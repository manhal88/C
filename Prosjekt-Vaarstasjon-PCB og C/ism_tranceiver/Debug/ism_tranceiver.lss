
ism_tranceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000966  000009fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000966  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800138  00800138  00000a32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000478  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000320a  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fb6  00000000  00000000  000040e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001452  00000000  00000000  0000509a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000924  00000000  00000000  000064ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fae  00000000  00000000  00006e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001862  00000000  00000000  00007dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d0  00000000  00000000  00009620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 18 01 	jmp	0x230	; 0x230 <__ctors_end>
   4:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
   8:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
   c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  10:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  14:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  18:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  1c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  20:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  24:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  28:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  2c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  30:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  34:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  38:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  3c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  40:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  44:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  48:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  4c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  50:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  54:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  58:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  5c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  60:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  64:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 4f       	sbci	r16, 0xF0	; 240
  70:	00 00       	nop
  72:	00 07       	cpc	r16, r16
  74:	00 07       	cpc	r16, r16
  76:	00 14       	cp	r0, r0
  78:	7f 14       	cp	r7, r15
  7a:	7f 14       	cp	r7, r15
  7c:	24 2a       	or	r2, r20
  7e:	7f 2a       	or	r7, r31
  80:	12 23       	and	r17, r18
  82:	13 08       	sbc	r1, r3
  84:	64 62       	ori	r22, 0x24	; 36
  86:	36 49       	sbci	r19, 0x96	; 150
  88:	55 22       	and	r5, r21
  8a:	20 00       	.word	0x0020	; ????
  8c:	05 03       	mulsu	r16, r21
  8e:	00 00       	nop
  90:	00 1c       	adc	r0, r0
  92:	22 41       	sbci	r18, 0x12	; 18
  94:	00 00       	nop
  96:	41 22       	and	r4, r17
  98:	1c 00       	.word	0x001c	; ????
  9a:	14 08       	sbc	r1, r4
  9c:	3e 08       	sbc	r3, r14
  9e:	14 08       	sbc	r1, r4
  a0:	08 3e       	cpi	r16, 0xE8	; 232
  a2:	08 08       	sbc	r0, r8
  a4:	50 30       	cpi	r21, 0x00	; 0
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	08 08       	sbc	r0, r8
  ac:	08 08       	sbc	r0, r8
  ae:	00 60       	ori	r16, 0x00	; 0
  b0:	60 00       	.word	0x0060	; ????
  b2:	00 20       	and	r0, r0
  b4:	10 08       	sbc	r1, r0
  b6:	04 02       	muls	r16, r20
  b8:	3e 51       	subi	r19, 0x1E	; 30
  ba:	49 45       	sbci	r20, 0x59	; 89
  bc:	3e 00       	.word	0x003e	; ????
  be:	42 7f       	andi	r20, 0xF2	; 242
  c0:	40 00       	.word	0x0040	; ????
  c2:	42 61       	ori	r20, 0x12	; 18
  c4:	51 49       	sbci	r21, 0x91	; 145
  c6:	46 21       	and	r20, r6
  c8:	41 45       	sbci	r20, 0x51	; 81
  ca:	4b 31       	cpi	r20, 0x1B	; 27
  cc:	18 14       	cp	r1, r8
  ce:	12 7f       	andi	r17, 0xF2	; 242
  d0:	10 27       	eor	r17, r16
  d2:	45 45       	sbci	r20, 0x55	; 85
  d4:	45 39       	cpi	r20, 0x95	; 149
  d6:	3c 4a       	sbci	r19, 0xAC	; 172
  d8:	49 49       	sbci	r20, 0x99	; 153
  da:	30 01       	movw	r6, r0
  dc:	71 09       	sbc	r23, r1
  de:	05 03       	mulsu	r16, r21
  e0:	36 49       	sbci	r19, 0x96	; 150
  e2:	49 49       	sbci	r20, 0x99	; 153
  e4:	36 06       	cpc	r3, r22
  e6:	49 49       	sbci	r20, 0x99	; 153
  e8:	29 1e       	adc	r2, r25
  ea:	00 36       	cpi	r16, 0x60	; 96
  ec:	36 00       	.word	0x0036	; ????
  ee:	00 00       	nop
  f0:	56 36       	cpi	r21, 0x66	; 102
  f2:	00 00       	nop
  f4:	08 14       	cp	r0, r8
  f6:	22 41       	sbci	r18, 0x12	; 18
  f8:	00 14       	cp	r0, r0
  fa:	14 14       	cp	r1, r4
  fc:	14 14       	cp	r1, r4
  fe:	00 41       	sbci	r16, 0x10	; 16
 100:	22 14       	cp	r2, r2
 102:	08 02       	muls	r16, r24
 104:	01 51       	subi	r16, 0x11	; 17
 106:	09 06       	cpc	r0, r25
 108:	3e 41       	sbci	r19, 0x1E	; 30
 10a:	5d 55       	subi	r21, 0x5D	; 93
 10c:	1e 7e       	andi	r17, 0xEE	; 238
 10e:	11 11       	cpse	r17, r1
 110:	11 7e       	andi	r17, 0xE1	; 225
 112:	7f 49       	sbci	r23, 0x9F	; 159
 114:	49 49       	sbci	r20, 0x99	; 153
 116:	36 3e       	cpi	r19, 0xE6	; 230
 118:	41 41       	sbci	r20, 0x11	; 17
 11a:	41 22       	and	r4, r17
 11c:	7f 41       	sbci	r23, 0x1F	; 31
 11e:	41 22       	and	r4, r17
 120:	1c 7f       	andi	r17, 0xFC	; 252
 122:	49 49       	sbci	r20, 0x99	; 153
 124:	49 41       	sbci	r20, 0x19	; 25
 126:	7f 09       	sbc	r23, r15
 128:	09 09       	sbc	r16, r9
 12a:	01 3e       	cpi	r16, 0xE1	; 225
 12c:	41 49       	sbci	r20, 0x91	; 145
 12e:	49 7a       	andi	r20, 0xA9	; 169
 130:	7f 08       	sbc	r7, r15
 132:	08 08       	sbc	r0, r8
 134:	7f 00       	.word	0x007f	; ????
 136:	41 7f       	andi	r20, 0xF1	; 241
 138:	41 00       	.word	0x0041	; ????
 13a:	20 40       	sbci	r18, 0x00	; 0
 13c:	41 3f       	cpi	r20, 0xF1	; 241
 13e:	01 7f       	andi	r16, 0xF1	; 241
 140:	08 14       	cp	r0, r8
 142:	22 41       	sbci	r18, 0x12	; 18
 144:	7f 40       	sbci	r23, 0x0F	; 15
 146:	40 40       	sbci	r20, 0x00	; 0
 148:	40 7f       	andi	r20, 0xF0	; 240
 14a:	02 0c       	add	r0, r2
 14c:	02 7f       	andi	r16, 0xF2	; 242
 14e:	7f 04       	cpc	r7, r15
 150:	08 10       	cpse	r0, r8
 152:	7f 3e       	cpi	r23, 0xEF	; 239
 154:	41 41       	sbci	r20, 0x11	; 17
 156:	41 3e       	cpi	r20, 0xE1	; 225
 158:	7f 09       	sbc	r23, r15
 15a:	09 09       	sbc	r16, r9
 15c:	06 3e       	cpi	r16, 0xE6	; 230
 15e:	41 51       	subi	r20, 0x11	; 17
 160:	21 5e       	subi	r18, 0xE1	; 225
 162:	7f 09       	sbc	r23, r15
 164:	19 29       	or	r17, r9
 166:	46 26       	eor	r4, r22
 168:	49 49       	sbci	r20, 0x99	; 153
 16a:	49 32       	cpi	r20, 0x29	; 41
 16c:	01 01       	movw	r0, r2
 16e:	7f 01       	movw	r14, r30
 170:	01 3f       	cpi	r16, 0xF1	; 241
 172:	40 40       	sbci	r20, 0x00	; 0
 174:	40 3f       	cpi	r20, 0xF0	; 240
 176:	1f 20       	and	r1, r15
 178:	40 20       	and	r4, r0
 17a:	1f 3f       	cpi	r17, 0xFF	; 255
 17c:	40 38       	cpi	r20, 0x80	; 128
 17e:	40 3f       	cpi	r20, 0xF0	; 240
 180:	63 14       	cp	r6, r3
 182:	08 14       	cp	r0, r8
 184:	63 07       	cpc	r22, r19
 186:	08 70       	andi	r16, 0x08	; 8
 188:	08 07       	cpc	r16, r24
 18a:	61 51       	subi	r22, 0x11	; 17
 18c:	49 45       	sbci	r20, 0x59	; 89
 18e:	43 00       	.word	0x0043	; ????
 190:	7f 41       	sbci	r23, 0x1F	; 31
 192:	41 00       	.word	0x0041	; ????
 194:	02 04       	cpc	r0, r2
 196:	08 10       	cpse	r0, r8
 198:	20 00       	.word	0x0020	; ????
 19a:	41 41       	sbci	r20, 0x11	; 17
 19c:	7f 00       	.word	0x007f	; ????
 19e:	04 02       	muls	r16, r20
 1a0:	01 02       	muls	r16, r17
 1a2:	04 40       	sbci	r16, 0x04	; 4
 1a4:	40 40       	sbci	r20, 0x00	; 0
 1a6:	40 40       	sbci	r20, 0x00	; 0
 1a8:	00 00       	nop
 1aa:	03 05       	cpc	r16, r3
 1ac:	00 20       	and	r0, r0
 1ae:	54 54       	subi	r21, 0x44	; 68
 1b0:	54 78       	andi	r21, 0x84	; 132
 1b2:	7f 44       	sbci	r23, 0x4F	; 79
 1b4:	44 44       	sbci	r20, 0x44	; 68
 1b6:	38 38       	cpi	r19, 0x88	; 136
 1b8:	44 44       	sbci	r20, 0x44	; 68
 1ba:	44 44       	sbci	r20, 0x44	; 68
 1bc:	38 44       	sbci	r19, 0x48	; 72
 1be:	44 44       	sbci	r20, 0x44	; 68
 1c0:	7f 38       	cpi	r23, 0x8F	; 143
 1c2:	54 54       	subi	r21, 0x44	; 68
 1c4:	54 18       	sub	r5, r4
 1c6:	04 04       	cpc	r0, r4
 1c8:	7e 05       	cpc	r23, r14
 1ca:	05 08       	sbc	r0, r5
 1cc:	54 54       	subi	r21, 0x44	; 68
 1ce:	54 3c       	cpi	r21, 0xC4	; 196
 1d0:	7f 08       	sbc	r7, r15
 1d2:	04 04       	cpc	r0, r4
 1d4:	78 00       	.word	0x0078	; ????
 1d6:	44 7d       	andi	r20, 0xD4	; 212
 1d8:	40 00       	.word	0x0040	; ????
 1da:	20 40       	sbci	r18, 0x00	; 0
 1dc:	44 3d       	cpi	r20, 0xD4	; 212
 1de:	00 7f       	andi	r16, 0xF0	; 240
 1e0:	10 28       	or	r1, r0
 1e2:	44 00       	.word	0x0044	; ????
 1e4:	00 41       	sbci	r16, 0x10	; 16
 1e6:	7f 40       	sbci	r23, 0x0F	; 15
 1e8:	00 7c       	andi	r16, 0xC0	; 192
 1ea:	04 7c       	andi	r16, 0xC4	; 196
 1ec:	04 78       	andi	r16, 0x84	; 132
 1ee:	7c 08       	sbc	r7, r12
 1f0:	04 04       	cpc	r0, r4
 1f2:	78 38       	cpi	r23, 0x88	; 136
 1f4:	44 44       	sbci	r20, 0x44	; 68
 1f6:	44 38       	cpi	r20, 0x84	; 132
 1f8:	7c 14       	cp	r7, r12
 1fa:	14 14       	cp	r1, r4
 1fc:	08 08       	sbc	r0, r8
 1fe:	14 14       	cp	r1, r4
 200:	14 7c       	andi	r17, 0xC4	; 196
 202:	7c 08       	sbc	r7, r12
 204:	04 04       	cpc	r0, r4
 206:	00 48       	sbci	r16, 0x80	; 128
 208:	54 54       	subi	r21, 0x44	; 68
 20a:	54 24       	eor	r5, r4
 20c:	04 04       	cpc	r0, r4
 20e:	3f 44       	sbci	r19, 0x4F	; 79
 210:	44 3c       	cpi	r20, 0xC4	; 196
 212:	40 40       	sbci	r20, 0x00	; 0
 214:	20 7c       	andi	r18, 0xC0	; 192
 216:	1c 20       	and	r1, r12
 218:	40 20       	and	r4, r0
 21a:	1c 3c       	cpi	r17, 0xCC	; 204
 21c:	40 30       	cpi	r20, 0x00	; 0
 21e:	40 3c       	cpi	r20, 0xC0	; 192
 220:	44 28       	or	r4, r4
 222:	10 28       	or	r1, r0
 224:	44 0c       	add	r4, r4
 226:	50 50       	subi	r21, 0x00	; 0
 228:	50 3c       	cpi	r21, 0xC0	; 192
 22a:	44 64       	ori	r20, 0x44	; 68
 22c:	54 4c       	sbci	r21, 0xC4	; 196
 22e:	44 00       	.word	0x0044	; ????

00000230 <__ctors_end>:
 230:	11 24       	eor	r1, r1
 232:	1f be       	out	0x3f, r1	; 63
 234:	cf ef       	ldi	r28, 0xFF	; 255
 236:	d8 e0       	ldi	r29, 0x08	; 8
 238:	de bf       	out	0x3e, r29	; 62
 23a:	cd bf       	out	0x3d, r28	; 61

0000023c <__do_copy_data>:
 23c:	11 e0       	ldi	r17, 0x01	; 1
 23e:	a0 e0       	ldi	r26, 0x00	; 0
 240:	b1 e0       	ldi	r27, 0x01	; 1
 242:	e6 e6       	ldi	r30, 0x66	; 102
 244:	f9 e0       	ldi	r31, 0x09	; 9
 246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x10>
 248:	05 90       	lpm	r0, Z+
 24a:	0d 92       	st	X+, r0
 24c:	a8 33       	cpi	r26, 0x38	; 56
 24e:	b1 07       	cpc	r27, r17
 250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0xc>

00000252 <__do_clear_bss>:
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	a8 e3       	ldi	r26, 0x38	; 56
 256:	b1 e0       	ldi	r27, 0x01	; 1
 258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
 25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
 25c:	af 33       	cpi	r26, 0x3F	; 63
 25e:	b2 07       	cpc	r27, r18
 260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>
 262:	0e 94 ac 01 	call	0x358	; 0x358 <main>
 266:	0c 94 b1 04 	jmp	0x962	; 0x962 <_exit>

0000026a <__bad_interrupt>:
 26a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026e <i2c_init>:
static void i2c_stop(void);

int i2c_init (void) {
	
	/* Minimum value of TWBR is 10 */
	TWBR = 10;	
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	80 93 b8 00 	sts	0x00B8, r24
	return EXIT_SUCCESS;
}
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	08 95       	ret

0000027a <spi_init>:
#include "../ism_tranceiver.h"

int spi_init (void) {
	
	/* Enable, Master, and SPI mode 3 */
	SPCR = ( (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA));
 27a:	8c e5       	ldi	r24, 0x5C	; 92
 27c:	8c bd       	out	0x2c, r24	; 44
	
	/* F_CPU / 2 */
	SPSR = (1<<SPI2X);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	8d bd       	out	0x2d, r24	; 45
	
	return EXIT_SUCCESS;
}
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret

00000288 <spi_transmit>:

int spi_transmit (uint8_t *data) {
	
	SPDR = *data;
 288:	fc 01       	movw	r30, r24
 28a:	20 81       	ld	r18, Z
 28c:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & (1<<SPIF)));
 28e:	0d b4       	in	r0, 0x2d	; 45
 290:	07 fe       	sbrs	r0, 7
 292:	fd cf       	rjmp	.-6      	; 0x28e <spi_transmit+0x6>
	
	*data = SPDR;
 294:	2e b5       	in	r18, 0x2e	; 46
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
	
	return EXIT_SUCCESS;
}
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	08 95       	ret

000002a0 <uart_init>:

#include "../ism_tranceiver.h"

int uart_init(void) {
	
    UBRR0H = UBRRH_VALUE;
 2a0:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
 2a6:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0A |= _BV(U2X0);
 2aa:	e0 ec       	ldi	r30, 0xC0	; 192
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	80 83       	st	Z, r24

	/* 8-bit data */ 
    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	80 93 c2 00 	sts	0x00C2, r24
    
	/* Enable RX and TX */
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 2ba:	88 e1       	ldi	r24, 0x18	; 24
 2bc:	80 93 c1 00 	sts	0x00C1, r24
	
	return EXIT_SUCCESS;    
}
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	08 95       	ret

000002c6 <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
 2c6:	cf 93       	push	r28
 2c8:	c8 2f       	mov	r28, r24
    if (c == '\n') {
 2ca:	8a 30       	cpi	r24, 0x0A	; 10
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <uart_putchar+0xe>
        uart_putchar('\r', stream);
 2ce:	8d e0       	ldi	r24, 0x0D	; 13
 2d0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
 2d4:	e0 ec       	ldi	r30, 0xC0	; 192
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	90 81       	ld	r25, Z
 2da:	95 ff       	sbrs	r25, 5
 2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <uart_putchar+0x12>
    UDR0 = c;
 2de:	c0 93 c6 00 	sts	0x00C6, r28
}
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <uart_getchar>:

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
 2e6:	e0 ec       	ldi	r30, 0xC0	; 192
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	88 23       	and	r24, r24
 2ee:	ec f7       	brge	.-6      	; 0x2ea <uart_getchar+0x4>
    return UDR0;
 2f0:	80 91 c6 00 	lds	r24, 0x00C6
}
 2f4:	08 95       	ret

000002f6 <init_hardware>:
#include "ndh-c12832a1z/st7565r.h"

int init_hardware(void) {
	
	/* Indicator LED's */
	OUTPUT(LED_ORANGE);
 2f6:	53 9a       	sbi	0x0a, 3	; 10
	OUTPUT(LED_BLUE);
 2f8:	54 9a       	sbi	0x0a, 4	; 10
	
	/* LCD connections */
	OUTPUT(LCD_CHIP_SELECT);
 2fa:	3a 9a       	sbi	0x07, 2	; 7
	OUTPUT(LCD_RESET);
 2fc:	39 9a       	sbi	0x07, 1	; 7
	OUTPUT(LCD_A0);
 2fe:	38 9a       	sbi	0x07, 0	; 7
	OUTPUT(LCD_BACKLIGHT);
 300:	56 9a       	sbi	0x0a, 6	; 10
	
	/* Radio connections */
	INPUT(NRF24L01_IRQ);
 302:	20 98       	cbi	0x04, 0	; 4
	OUTPUT(NRF24L01_CHIP_ENABLE);
 304:	21 9a       	sbi	0x04, 1	; 4
	OUTPUT(NRF24L01_CHIP_SELECT);
 306:	22 9a       	sbi	0x04, 2	; 4

	/* SPI initialization */
	OUTPUT(SPI_MOSI);
 308:	23 9a       	sbi	0x04, 3	; 4
	OUTPUT(SPI_SCK);	
 30a:	25 9a       	sbi	0x04, 5	; 4
	spi_init();
 30c:	0e 94 3d 01 	call	0x27a	; 0x27a <spi_init>
	
	/* Configure graphic LCD display controller */
	st7565r_init();
 310:	0e 94 bd 02 	call	0x57a	; 0x57a <st7565r_init>
	
	/* Redirecting STDIN and STDOUT to UART */
	uart_init();
 314:	0e 94 50 01 	call	0x2a0	; 0x2a0 <uart_init>
	stdout = &uart_output;
 318:	8e e0       	ldi	r24, 0x0E	; 14
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	90 93 3c 01 	sts	0x013C, r25
 320:	80 93 3b 01 	sts	0x013B, r24
	stdin = &uart_input;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	90 93 3a 01 	sts	0x013A, r25
 32c:	80 93 39 01 	sts	0x0139, r24
	
	/* I2C connection to radio transmitter */
	i2c_init();
 330:	0e 94 37 01 	call	0x26e	; 0x26e <i2c_init>

	return EXIT_SUCCESS;
}
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	08 95       	ret

0000033a <error>:

#define BUFFER_LENGHT 12

void error(void) {
	while(true) {
		TOGGLE(LED_ORANGE);
 33a:	28 e0       	ldi	r18, 0x08	; 8
		TOGGLE(LED_BLUE);
 33c:	90 e1       	ldi	r25, 0x10	; 16

#define BUFFER_LENGHT 12

void error(void) {
	while(true) {
		TOGGLE(LED_ORANGE);
 33e:	8b b1       	in	r24, 0x0b	; 11
 340:	82 27       	eor	r24, r18
 342:	8b b9       	out	0x0b, r24	; 11
		TOGGLE(LED_BLUE);
 344:	8b b1       	in	r24, 0x0b	; 11
 346:	89 27       	eor	r24, r25
 348:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	e3 ed       	ldi	r30, 0xD3	; 211
 34c:	f0 e3       	ldi	r31, 0x30	; 48
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <error+0x14>
 352:	00 c0       	rjmp	.+0      	; 0x354 <error+0x1a>
 354:	00 00       	nop
 356:	f3 cf       	rjmp	.-26     	; 0x33e <error+0x4>

00000358 <main>:
		_delay_ms(50);
	}
}

int main (void) {
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	00 d0       	rcall	.+0      	; 0x35e <main+0x6>
 35e:	00 d0       	rcall	.+0      	; 0x360 <main+0x8>
 360:	1f 92       	push	r1
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
	
	const uint8_t radio_address[] = { 0xeb, 0x01, 0xeb, 0x02, 0xeb };
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	ec e1       	ldi	r30, 0x1C	; 28
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	de 01       	movw	r26, r28
 36e:	11 96       	adiw	r26, 0x01	; 1
 370:	01 90       	ld	r0, Z+
 372:	0d 92       	st	X+, r0
 374:	8a 95       	dec	r24
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0x18>
	
	char buf[BUFFER_LENGHT];
	   
	/* Toggle LED if hardware initialization failed */
	if (init_hardware())
 378:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <init_hardware>
 37c:	89 2b       	or	r24, r25
 37e:	11 f0       	breq	.+4      	; 0x384 <main+0x2c>
		error();
 380:	0e 94 9d 01 	call	0x33a	; 0x33a <error>
	
	/* Enable graphic display */
	graphic_lcd_clear_screen();
 384:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <graphic_lcd_clear_screen>
	LCD_BACKLIGHT_ON;
 388:	5e 9a       	sbi	0x0b, 6	; 11
	graphic_lcd_write(1, 0, "hello ism transceiver!");
 38a:	41 e2       	ldi	r20, 0x21	; 33
 38c:	51 e0       	ldi	r21, 0x01	; 1
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 09 02 	call	0x412	; 0x412 <graphic_lcd_write>
	
	/* Enable radio in RX mode */
	radio_pl_init (radio_address, HAL_NRF_PRX);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	ce 01       	movw	r24, r28
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	0e 94 4e 04 	call	0x89c	; 0x89c <radio_pl_init>
	
	while(true) {
		
		device_prx_mode_pl();
		
		TOGGLE(LED_ORANGE);
 3a4:	08 e0       	ldi	r16, 0x08	; 8
		TOGGLE(LED_BLUE);
 3a6:	10 e1       	ldi	r17, 0x10	; 16
	/* Enable radio in RX mode */
	radio_pl_init (radio_address, HAL_NRF_PRX);
	
	while(true) {
		
		device_prx_mode_pl();
 3a8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <device_prx_mode_pl>
		
		TOGGLE(LED_ORANGE);
 3ac:	8b b1       	in	r24, 0x0b	; 11
 3ae:	80 27       	eor	r24, r16
 3b0:	8b b9       	out	0x0b, r24	; 11
		TOGGLE(LED_BLUE);
 3b2:	8b b1       	in	r24, 0x0b	; 11
 3b4:	81 27       	eor	r24, r17
 3b6:	8b b9       	out	0x0b, r24	; 11
 3b8:	83 e2       	ldi	r24, 0x23	; 35
 3ba:	94 ef       	ldi	r25, 0xF4	; 244
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <main+0x64>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x6a>
 3c2:	00 00       	nop
 3c4:	f1 cf       	rjmp	.-30     	; 0x3a8 <main+0x50>

000003c6 <graphic_lcd_clear_screen>:
#include "../ism_tranceiver.h"
#include "graphic_lcd.h"
#include "st7565r.h"
#include "font.h"

int graphic_lcd_clear_screen(void) {
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	10 e0       	ldi	r17, 0x00	; 0
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
		st7565r_set_page_address(i);
		st7565r_set_column_address(0);
		st7565r_set_display_start_line_address(0);
 3d2:	68 94       	set
 3d4:	ff 24       	eor	r15, r15
 3d6:	f7 f8       	bld	r15, 7
 3d8:	00 e0       	ldi	r16, 0x00	; 0
int graphic_lcd_clear_screen(void) {
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
		st7565r_set_page_address(i);
 3da:	81 2f       	mov	r24, r17
 3dc:	0e 94 8a 02 	call	0x514	; 0x514 <st7565r_set_page_address>
		st7565r_set_column_address(0);
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 8f 02 	call	0x51e	; 0x51e <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 9d 02 	call	0x53a	; 0x53a <st7565r_set_display_start_line_address>
 3ec:	cf 2d       	mov	r28, r15
 3ee:	d0 2f       	mov	r29, r16
		for (j=0; j<LINE_PIXEL_LENGHT; j++)
			st7565r_write_data(0);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <st7565r_write_data>
 3f6:	21 97       	sbiw	r28, 0x01	; 1
	
	for (i=0; i<LINE_COUNT; i++) {
		st7565r_set_page_address(i);
		st7565r_set_column_address(0);
		st7565r_set_display_start_line_address(0);
		for (j=0; j<LINE_PIXEL_LENGHT; j++)
 3f8:	20 97       	sbiw	r28, 0x00	; 0
 3fa:	d1 f7       	brne	.-12     	; 0x3f0 <graphic_lcd_clear_screen+0x2a>
 3fc:	1f 5f       	subi	r17, 0xFF	; 255

int graphic_lcd_clear_screen(void) {
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
 3fe:	14 30       	cpi	r17, 0x04	; 4
 400:	61 f7       	brne	.-40     	; 0x3da <graphic_lcd_clear_screen+0x14>
		for (j=0; j<LINE_PIXEL_LENGHT; j++)
			st7565r_write_data(0);
	}
	
	return EXIT_SUCCESS;
}
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	ff 90       	pop	r15
 410:	08 95       	ret

00000412 <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
 412:	af 92       	push	r10
 414:	bf 92       	push	r11
 416:	cf 92       	push	r12
 418:	df 92       	push	r13
 41a:	ef 92       	push	r14
 41c:	ff 92       	push	r15
 41e:	0f 93       	push	r16
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	c6 2f       	mov	r28, r22
 428:	6a 01       	movw	r12, r20

	int i, j;
	
	st7565r_set_page_address(line);
 42a:	0e 94 8a 02 	call	0x514	; 0x514 <st7565r_set_page_address>
	st7565r_set_column_address(offset);
 42e:	8c 2f       	mov	r24, r28
 430:	0e 94 8f 02 	call	0x51e	; 0x51e <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
 434:	e1 2c       	mov	r14, r1
 436:	f1 2c       	mov	r15, r1
 438:	a1 2c       	mov	r10, r1
 43a:	b1 2c       	mov	r11, r1
 43c:	1c c0       	rjmp	.+56     	; 0x476 <graphic_lcd_write+0x64>
	
		for (j=0; j<FONT_SIZE; j++) {
			st7565r_write_data(pgm_read_byte(font_5x8_table + \
 43e:	f8 01       	movw	r30, r16
 440:	80 81       	ld	r24, Z
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	80 97       	sbiw	r24, 0x20	; 32
 446:	fc 01       	movw	r30, r24
 448:	ee 0f       	add	r30, r30
 44a:	ff 1f       	adc	r31, r31
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	e8 0f       	add	r30, r24
 452:	f9 1f       	adc	r31, r25
 454:	ec 0f       	add	r30, r28
 456:	fd 1f       	adc	r31, r29
 458:	e8 59       	subi	r30, 0x98	; 152
 45a:	ff 4f       	sbci	r31, 0xFF	; 255
 45c:	84 91       	lpm	r24, Z
 45e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <st7565r_write_data>
	st7565r_set_page_address(line);
	st7565r_set_column_address(offset);
	
	for (i=0; i<strlen(text); i++) {
	
		for (j=0; j<FONT_SIZE; j++) {
 462:	21 96       	adiw	r28, 0x01	; 1
 464:	c5 30       	cpi	r28, 0x05	; 5
 466:	d1 05       	cpc	r29, r1
 468:	51 f7       	brne	.-44     	; 0x43e <graphic_lcd_write+0x2c>
			st7565r_write_data(pgm_read_byte(font_5x8_table + \
			                    (((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j) \
							  )); 
		}
		st7565r_write_data(0);
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <st7565r_write_data>
	int i, j;
	
	st7565r_set_page_address(line);
	st7565r_set_column_address(offset);
	
	for (i=0; i<strlen(text); i++) {
 470:	ff ef       	ldi	r31, 0xFF	; 255
 472:	ef 1a       	sub	r14, r31
 474:	ff 0a       	sbc	r15, r31
 476:	87 01       	movw	r16, r14
 478:	f6 01       	movw	r30, r12
 47a:	01 90       	ld	r0, Z+
 47c:	00 20       	and	r0, r0
 47e:	e9 f7       	brne	.-6      	; 0x47a <graphic_lcd_write+0x68>
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	ec 19       	sub	r30, r12
 484:	fd 09       	sbc	r31, r13
 486:	ee 16       	cp	r14, r30
 488:	ff 06       	cpc	r15, r31
 48a:	28 f4       	brcc	.+10     	; 0x496 <graphic_lcd_write+0x84>
 48c:	ca 2d       	mov	r28, r10
 48e:	db 2d       	mov	r29, r11
 490:	0c 0d       	add	r16, r12
 492:	1d 1d       	adc	r17, r13
 494:	d4 cf       	rjmp	.-88     	; 0x43e <graphic_lcd_write+0x2c>
		}
		st7565r_write_data(0);
	}
		
	return EXIT_SUCCESS;
}
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	bf 90       	pop	r11
 4ac:	af 90       	pop	r10
 4ae:	08 95       	ret

000004b0 <st7565r_write_command>:
#include "../ism_tranceiver.h"
#include "../avr/spi.h"

#include "st7565r.h"

void st7565r_write_command(uint8_t command) {
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	1f 92       	push	r1
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	89 83       	std	Y+1, r24	; 0x01
	
        LOW(LCD_CHIP_SELECT);
 4bc:	42 98       	cbi	0x08, 2	; 8
        LOW(LCD_A0);
 4be:	40 98       	cbi	0x08, 0	; 8
		spi_transmit(&command);
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	0e 94 44 01 	call	0x288	; 0x288 <spi_transmit>
        HIGH(LCD_CHIP_SELECT);
 4c8:	42 9a       	sbi	0x08, 2	; 8
}
 4ca:	0f 90       	pop	r0
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	1f 92       	push	r1
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	89 83       	std	Y+1, r24	; 0x01
	
        LOW(LCD_CHIP_SELECT);
 4de:	42 98       	cbi	0x08, 2	; 8
        HIGH(LCD_A0);
 4e0:	40 9a       	sbi	0x08, 0	; 8
		spi_transmit(&data);
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	0e 94 44 01 	call	0x288	; 0x288 <spi_transmit>
        LOW(LCD_A0);
 4ea:	40 98       	cbi	0x08, 0	; 8
        HIGH(LCD_CHIP_SELECT);
 4ec:	42 9a       	sbi	0x08, 2	; 8
}
 4ee:	0f 90       	pop	r0
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <st7565r_hard_reset>:
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
	
        LOW(LCD_RESET);
 4f6:	41 98       	cbi	0x08, 1	; 8
 4f8:	87 ea       	ldi	r24, 0xA7	; 167
 4fa:	91 e6       	ldi	r25, 0x61	; 97
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <st7565r_hard_reset+0x6>
 500:	00 c0       	rjmp	.+0      	; 0x502 <st7565r_hard_reset+0xc>
 502:	00 00       	nop
        _delay_ms(100);
        HIGH(LCD_RESET);
 504:	41 9a       	sbi	0x08, 1	; 8
 506:	87 ea       	ldi	r24, 0xA7	; 167
 508:	91 e6       	ldi	r25, 0x61	; 97
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <st7565r_hard_reset+0x14>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <st7565r_hard_reset+0x1a>
 510:	00 00       	nop
 512:	08 95       	ret

00000514 <st7565r_set_page_address>:
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
 514:	8f 70       	andi	r24, 0x0F	; 15
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 516:	80 6b       	ori	r24, 0xB0	; 176
 518:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>
 51c:	08 95       	ret

0000051e <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
 51e:	cf 93       	push	r28
 520:	c8 2f       	mov	r28, r24
        // Make sure the address is 7 bits
        address &= 0x7F;
 522:	8f 77       	andi	r24, 0x7F	; 127
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 524:	82 95       	swap	r24
 526:	8f 70       	andi	r24, 0x0F	; 15
 528:	80 61       	ori	r24, 0x10	; 16
 52a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 52e:	8c 2f       	mov	r24, r28
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>
}
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <st7565r_set_display_start_line_address>:
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
        // Make sure address is 6 bits
        address &= 0x3F;
 53a:	8f 73       	andi	r24, 0x3F	; 63
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 53c:	80 64       	ori	r24, 0x40	; 64
 53e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>
 542:	08 95       	ret

00000544 <st7565r_display_on>:
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
 544:	8f ea       	ldi	r24, 0xAF	; 175
 546:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>
 54a:	08 95       	ret

0000054c <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
 54c:	cf 93       	push	r28
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
 54e:	8e 31       	cpi	r24, 0x1E	; 30
 550:	08 f4       	brcc	.+2      	; 0x554 <st7565r_set_contrast+0x8>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
 552:	8e e1       	ldi	r24, 0x1E	; 30
 554:	c8 2f       	mov	r28, r24
 556:	89 32       	cpi	r24, 0x29	; 41
 558:	08 f0       	brcs	.+2      	; 0x55c <st7565r_set_contrast+0x10>
 55a:	c8 e2       	ldi	r28, 0x28	; 40
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
 55c:	81 e8       	ldi	r24, 0x81	; 129
 55e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
 562:	8c 2f       	mov	r24, r28
 564:	80 95       	com	r24
 566:	8f 73       	andi	r24, 0x3F	; 63
 568:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>
        return contrast;
}
 56c:	8c 2f       	mov	r24, r28
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <st7565r_display_invert_disable>:
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
 572:	86 ea       	ldi	r24, 0xA6	; 166
 574:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>
 578:	08 95       	ret

0000057a <st7565r_init>:
}

void st7565r_init(void)
{
        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
 57a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        LOW(LCD_A0);
 57e:	40 98       	cbi	0x08, 0	; 8

        // The column address is set to increasing
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
 580:	80 ea       	ldi	r24, 0xA0	; 160
 582:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
 586:	0e 94 b9 02 	call	0x572	; 0x572 <st7565r_display_invert_disable>

        // The common mode scan direction is reversed COM31->COM0
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
 58a:	88 ec       	ldi	r24, 0xC8	; 200
 58c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
 590:	82 ea       	ldi	r24, 0xA2	; 162
 592:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
 596:	8f e2       	ldi	r24, 0x2F	; 47
 598:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
 59c:	88 ef       	ldi	r24, 0xF8	; 248
 59e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
 5a8:	81 e2       	ldi	r24, 0x21	; 33
 5aa:	0e 94 58 02 	call	0x4b0	; 0x4b0 <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
 5ae:	8e e1       	ldi	r24, 0x1E	; 30
 5b0:	0e 94 a6 02 	call	0x54c	; 0x54c <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
 5b4:	0e 94 a2 02 	call	0x544	; 0x544 <st7565r_display_on>
 5b8:	08 95       	ret

000005ba <device_prx_mode_pl>:
#endif
}

void device_prx_mode_pl(void)
{
  CE_HIGH();        // Set Chip Enable (CE) pin high to enable receiver
 5ba:	29 9a       	sbi	0x05, 1	; 5
 5bc:	08 95       	ret

000005be <hal_nrf_rw>:

#include "../ism_tranceiver.h"
#include "../avr/spi.h"

uint8_t hal_nrf_rw(uint8_t value)
{
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
	uint8_t *data = value;
 5c2:	c8 2f       	mov	r28, r24
 5c4:	d0 e0       	ldi	r29, 0x00	; 0
	spi_transmit(data);
 5c6:	ce 01       	movw	r24, r28
 5c8:	0e 94 44 01 	call	0x288	; 0x288 <spi_transmit>
	return *data;
}
 5cc:	88 81       	ld	r24, Y
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <hal_nrf_lock_unlock>:
  return temp;
}

void hal_nrf_lock_unlock()
{
  CSN_LOW();
 5d4:	2a 98       	cbi	0x05, 2	; 5

  hal_nrf_rw(LOCK_UNLOCK);             
 5d6:	80 e5       	ldi	r24, 0x50	; 80
 5d8:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
  hal_nrf_rw(0x73);
 5dc:	83 e7       	ldi	r24, 0x73	; 115
 5de:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>

  CSN_HIGH();
 5e2:	2a 9a       	sbi	0x05, 2	; 5
 5e4:	08 95       	ret

000005e6 <hal_nrf_read_reg>:
}

uint8_t hal_nrf_read_reg(uint8_t reg)
{
uint8_t temp;
  CSN_LOW();
 5e6:	2a 98       	cbi	0x05, 2	; 5
  hal_nrf_rw(reg);
 5e8:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
  temp = hal_nrf_rw(0);
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
  CSN_HIGH();
 5f2:	2a 9a       	sbi	0x05, 2	; 5

  return temp;
}
 5f4:	08 95       	ret

000005f6 <hal_nrf_get_address_width>:
  return (hal_nrf_read_reg(OBSERVE_TX) & (BIT_7|BIT_6|BIT_5|BIT_4)) >> 4;
}

uint8_t hal_nrf_get_address_width(void)
{
  return (hal_nrf_read_reg(SETUP_AW) + 2);
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
}
 5fc:	8e 5f       	subi	r24, 0xFE	; 254
 5fe:	08 95       	ret

00000600 <hal_nrf_write_reg>:

  return temp;
}

uint8_t hal_nrf_write_reg(uint8_t reg, uint8_t value)
{
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	d6 2f       	mov	r29, r22
  uint8_t retval;
  CSN_LOW();
 606:	2a 98       	cbi	0x05, 2	; 5
  if(reg < WRITE_REG)   // i.e. this is a register access
 608:	80 32       	cpi	r24, 0x20	; 32
 60a:	40 f4       	brcc	.+16     	; 0x61c <hal_nrf_write_reg+0x1c>
  {
    retval = hal_nrf_rw(WRITE_REG + reg);
 60c:	80 5e       	subi	r24, 0xE0	; 224
 60e:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
 612:	c8 2f       	mov	r28, r24
    hal_nrf_rw(value);
 614:	8d 2f       	mov	r24, r29
 616:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
 61a:	10 c0       	rjmp	.+32     	; 0x63c <hal_nrf_write_reg+0x3c>
  }
  else            // single byte cmd OR future command/register access
  {
    if(!(reg == FLUSH_TX) && !(reg == FLUSH_RX) && !(reg == REUSE_TX_PL) && !(reg == NOP))
 61c:	9f e1       	ldi	r25, 0x1F	; 31
 61e:	98 0f       	add	r25, r24
 620:	93 30       	cpi	r25, 0x03	; 3
 622:	48 f0       	brcs	.+18     	; 0x636 <hal_nrf_write_reg+0x36>
 624:	8f 3f       	cpi	r24, 0xFF	; 255
 626:	39 f0       	breq	.+14     	; 0x636 <hal_nrf_write_reg+0x36>
    {
      retval = hal_nrf_rw(reg);
 628:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
 62c:	c8 2f       	mov	r28, r24
      hal_nrf_rw(value);
 62e:	8d 2f       	mov	r24, r29
 630:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
 634:	03 c0       	rjmp	.+6      	; 0x63c <hal_nrf_write_reg+0x3c>
    }
    else          // single byte L01 command
    {
      retval = hal_nrf_rw(reg);
 636:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
 63a:	c8 2f       	mov	r28, r24
    }
  }
  CSN_HIGH();
 63c:	2a 9a       	sbi	0x05, 2	; 5

  return retval;
}
 63e:	8c 2f       	mov	r24, r28
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <hal_nrf_set_crc_mode>:
{
  return hal_nrf_nop() & (BIT_6|BIT_5|BIT_4);
}

void hal_nrf_set_crc_mode(hal_nrf_crc_mode_t crc_mode)
{
 646:	cf 93       	push	r28
 648:	c8 2f       	mov	r28, r24
  hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) & ~(BIT_3|BIT_2)) | (UINT8(crc_mode)<<2));
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 650:	83 7f       	andi	r24, 0xF3	; 243
 652:	cc 0f       	add	r28, r28
 654:	cc 0f       	add	r28, r28
 656:	6c 2f       	mov	r22, r28
 658:	68 2b       	or	r22, r24
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
}
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <hal_nrf_open_pipe>:

void hal_nrf_open_pipe(hal_nrf_address_t pipe_num, bool auto_ack)
{
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	c8 2f       	mov	r28, r24
 66c:	16 2f       	mov	r17, r22
  switch(pipe_num)
 66e:	86 30       	cpi	r24, 0x06	; 6
 670:	18 f0       	brcs	.+6      	; 0x678 <hal_nrf_open_pipe+0x14>
 672:	8f 3f       	cpi	r24, 0xFF	; 255
 674:	39 f1       	breq	.+78     	; 0x6c4 <hal_nrf_open_pipe+0x60>
 676:	35 c0       	rjmp	.+106    	; 0x6e2 <hal_nrf_open_pipe+0x7e>
    case HAL_NRF_PIPE1:
    case HAL_NRF_PIPE2:
    case HAL_NRF_PIPE3:
    case HAL_NRF_PIPE4:
    case HAL_NRF_PIPE5:
      hal_nrf_write_reg(EN_RXADDR, hal_nrf_read_reg(EN_RXADDR) | SET_BIT(pipe_num));
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 67e:	21 e0       	ldi	r18, 0x01	; 1
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	a9 01       	movw	r20, r18
 684:	02 c0       	rjmp	.+4      	; 0x68a <hal_nrf_open_pipe+0x26>
 686:	44 0f       	add	r20, r20
 688:	55 1f       	adc	r21, r21
 68a:	ca 95       	dec	r28
 68c:	e2 f7       	brpl	.-8      	; 0x686 <hal_nrf_open_pipe+0x22>
 68e:	ea 01       	movw	r28, r20
 690:	64 2f       	mov	r22, r20
 692:	68 2b       	or	r22, r24
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>

      if(auto_ack)
 69a:	11 23       	and	r17, r17
 69c:	49 f0       	breq	.+18     	; 0x6b0 <hal_nrf_open_pipe+0x4c>
        hal_nrf_write_reg(EN_AA, hal_nrf_read_reg(EN_AA) | SET_BIT(pipe_num));
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 6a4:	6c 2f       	mov	r22, r28
 6a6:	68 2b       	or	r22, r24
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 6ae:	19 c0       	rjmp	.+50     	; 0x6e2 <hal_nrf_open_pipe+0x7e>
      else
        hal_nrf_write_reg(EN_AA, hal_nrf_read_reg(EN_AA) & ~SET_BIT(pipe_num));
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 6b6:	c0 95       	com	r28
 6b8:	68 2f       	mov	r22, r24
 6ba:	6c 23       	and	r22, r28
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 6c2:	0f c0       	rjmp	.+30     	; 0x6e2 <hal_nrf_open_pipe+0x7e>
      break;

    case HAL_NRF_ALL:
      hal_nrf_write_reg(EN_RXADDR, ~(BIT_7|BIT_6));
 6c4:	6f e3       	ldi	r22, 0x3F	; 63
 6c6:	82 e0       	ldi	r24, 0x02	; 2
 6c8:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>

      if(auto_ack)
 6cc:	11 23       	and	r17, r17
 6ce:	29 f0       	breq	.+10     	; 0x6da <hal_nrf_open_pipe+0x76>
        hal_nrf_write_reg(EN_AA, ~(BIT_7|BIT_6));
 6d0:	6f e3       	ldi	r22, 0x3F	; 63
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <hal_nrf_open_pipe+0x7e>
      else
        hal_nrf_write_reg(EN_AA, 0);
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
      break;
      
    default:
      break;
  }
}
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	08 95       	ret

000006ea <hal_nrf_close_pipe>:

void hal_nrf_close_pipe(hal_nrf_address_t pipe_num)
{
 6ea:	cf 93       	push	r28
 6ec:	c8 2f       	mov	r28, r24
  switch(pipe_num)
 6ee:	86 30       	cpi	r24, 0x06	; 6
 6f0:	18 f0       	brcs	.+6      	; 0x6f8 <hal_nrf_close_pipe+0xe>
 6f2:	8f 3f       	cpi	r24, 0xFF	; 255
 6f4:	e1 f0       	breq	.+56     	; 0x72e <hal_nrf_close_pipe+0x44>
 6f6:	23 c0       	rjmp	.+70     	; 0x73e <hal_nrf_close_pipe+0x54>
    case HAL_NRF_PIPE1:
    case HAL_NRF_PIPE2:
    case HAL_NRF_PIPE3:
    case HAL_NRF_PIPE4:
    case HAL_NRF_PIPE5:
      hal_nrf_write_reg(EN_RXADDR, hal_nrf_read_reg(EN_RXADDR) & ~SET_BIT(pipe_num));
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 6fe:	21 e0       	ldi	r18, 0x01	; 1
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	b9 01       	movw	r22, r18
 704:	02 c0       	rjmp	.+4      	; 0x70a <hal_nrf_close_pipe+0x20>
 706:	66 0f       	add	r22, r22
 708:	77 1f       	adc	r23, r23
 70a:	ca 95       	dec	r28
 70c:	e2 f7       	brpl	.-8      	; 0x706 <hal_nrf_close_pipe+0x1c>
 70e:	c6 2f       	mov	r28, r22
 710:	c0 95       	com	r28
 712:	68 2f       	mov	r22, r24
 714:	6c 23       	and	r22, r28
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
      hal_nrf_write_reg(EN_AA, hal_nrf_read_reg(EN_AA) & ~SET_BIT(pipe_num));
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 722:	68 2f       	mov	r22, r24
 724:	6c 23       	and	r22, r28
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
      break;
 72c:	08 c0       	rjmp	.+16     	; 0x73e <hal_nrf_close_pipe+0x54>
    
    case HAL_NRF_ALL:
      hal_nrf_write_reg(EN_RXADDR, 0);
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	82 e0       	ldi	r24, 0x02	; 2
 732:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
      hal_nrf_write_reg(EN_AA, 0);
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
      break;
      
    default:
      break;
  }
}
 73e:	cf 91       	pop	r28
 740:	08 95       	ret

00000742 <hal_nrf_set_auto_retr>:
      break;
  }
}

void hal_nrf_set_auto_retr(uint8_t retr, uint16_t delay)
{
 742:	48 2f       	mov	r20, r24
  hal_nrf_write_reg(SETUP_RETR, (((delay/250)-1)<<4) | retr);
 744:	9b 01       	movw	r18, r22
 746:	36 95       	lsr	r19
 748:	27 95       	ror	r18
 74a:	a3 e1       	ldi	r26, 0x13	; 19
 74c:	b3 e8       	ldi	r27, 0x83	; 131
 74e:	0e 94 a2 04 	call	0x944	; 0x944 <__umulhisi3>
 752:	00 24       	eor	r0, r0
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	00 1c       	adc	r0, r0
 75a:	88 0f       	add	r24, r24
 75c:	99 1f       	adc	r25, r25
 75e:	00 1c       	adc	r0, r0
 760:	89 2f       	mov	r24, r25
 762:	90 2d       	mov	r25, r0
 764:	6f ef       	ldi	r22, 0xFF	; 255
 766:	68 0f       	add	r22, r24
 768:	62 95       	swap	r22
 76a:	60 7f       	andi	r22, 0xF0	; 240
 76c:	64 2b       	or	r22, r20
 76e:	84 e0       	ldi	r24, 0x04	; 4
 770:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 774:	08 95       	ret

00000776 <hal_nrf_set_address_width>:
}

void hal_nrf_set_address_width(hal_nrf_address_width_t address_width)
{
  hal_nrf_write_reg(SETUP_AW, (UINT8(address_width) - 2));
 776:	6e ef       	ldi	r22, 0xFE	; 254
 778:	68 0f       	add	r22, r24
 77a:	83 e0       	ldi	r24, 0x03	; 3
 77c:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 780:	08 95       	ret

00000782 <hal_nrf_set_rx_pload_width>:
}

void hal_nrf_set_rx_pload_width(uint8_t pipe_num, uint8_t pload_width)
{
  hal_nrf_write_reg(RX_PW_P0 + pipe_num, pload_width);
 782:	8f 5e       	subi	r24, 0xEF	; 239
 784:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 788:	08 95       	ret

0000078a <hal_nrf_set_operation_mode>:
  return hal_nrf_read_reg(RX_PW_P0 + pipe_num);
}

void hal_nrf_set_operation_mode(hal_nrf_operation_mode_t op_mode)
{
  if(op_mode == HAL_NRF_PRX)
 78a:	81 30       	cpi	r24, 0x01	; 1
 78c:	49 f4       	brne	.+18     	; 0x7a0 <hal_nrf_set_operation_mode+0x16>
  {
    hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) | (1<<PRIM_RX)));
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 794:	68 2f       	mov	r22, r24
 796:	61 60       	ori	r22, 0x01	; 1
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 79e:	08 95       	ret
  }
  else
  {
    hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) & ~(1<<PRIM_RX)));
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 7a6:	68 2f       	mov	r22, r24
 7a8:	6e 7f       	andi	r22, 0xFE	; 254
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 7b0:	08 95       	ret

000007b2 <hal_nrf_set_power_mode>:
  }
}

void hal_nrf_set_power_mode(hal_nrf_pwr_mode_t pwr_mode)
{
  if(pwr_mode == HAL_NRF_PWR_UP)
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	49 f4       	brne	.+18     	; 0x7c8 <hal_nrf_set_power_mode+0x16>
  {
    hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) | (1<<PWR_UP)));
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 7bc:	68 2f       	mov	r22, r24
 7be:	62 60       	ori	r22, 0x02	; 2
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 7c6:	08 95       	ret
  }
  else
  {
    hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) & ~(1<<PWR_UP)));
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 7ce:	68 2f       	mov	r22, r24
 7d0:	6d 7f       	andi	r22, 0xFD	; 253
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 7d8:	08 95       	ret

000007da <hal_nrf_set_rf_channel>:
  }
}

void hal_nrf_set_rf_channel(uint8_t channel)
{
  hal_nrf_write_reg(RF_CH, channel);
 7da:	68 2f       	mov	r22, r24
 7dc:	85 e0       	ldi	r24, 0x05	; 5
 7de:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 7e2:	08 95       	ret

000007e4 <hal_nrf_setup_dyn_pl>:
  hal_nrf_write_multibyte_reg(UINT8(HAL_NRF_TX_PLOAD), tx_pload, length);
}

void hal_nrf_setup_dyn_pl(uint8_t setup)
{
  hal_nrf_write_reg(DYNPD, setup & ~0xC0); 
 7e4:	68 2f       	mov	r22, r24
 7e6:	6f 73       	andi	r22, 0x3F	; 63
 7e8:	8c e1       	ldi	r24, 0x1C	; 28
 7ea:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 7ee:	08 95       	ret

000007f0 <hal_nrf_enable_dynamic_pl>:
}

void hal_nrf_enable_dynamic_pl(void)
{
  hal_nrf_write_reg(FEATURE, (hal_nrf_read_reg(FEATURE) | 0x04));   
 7f0:	8d e1       	ldi	r24, 0x1D	; 29
 7f2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 7f6:	68 2f       	mov	r22, r24
 7f8:	64 60       	ori	r22, 0x04	; 4
 7fa:	8d e1       	ldi	r24, 0x1D	; 29
 7fc:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 800:	08 95       	ret

00000802 <hal_nrf_enable_ack_pl>:
  hal_nrf_write_reg(FEATURE, (hal_nrf_read_reg(FEATURE) & ~0x04));   
}

void hal_nrf_enable_ack_pl(void)
{
  hal_nrf_write_reg(FEATURE, (hal_nrf_read_reg(FEATURE) | 0x02));   
 802:	8d e1       	ldi	r24, 0x1D	; 29
 804:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 808:	68 2f       	mov	r22, r24
 80a:	62 60       	ori	r22, 0x02	; 2
 80c:	8d e1       	ldi	r24, 0x1D	; 29
 80e:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 812:	08 95       	ret

00000814 <hal_nrf_write_multibyte_reg>:

  return (((uint16_t) reg << 8) | length);
}

void hal_nrf_write_multibyte_reg(uint8_t reg, uint8_t *pbuf, uint8_t length)
{
 814:	ff 92       	push	r15
 816:	0f 93       	push	r16
 818:	1f 93       	push	r17
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	c8 2f       	mov	r28, r24
 820:	f6 2e       	mov	r15, r22
 822:	07 2f       	mov	r16, r23
 824:	14 2f       	mov	r17, r20
  switch(reg)
 826:	86 30       	cpi	r24, 0x06	; 6
 828:	39 f0       	breq	.+14     	; 0x838 <hal_nrf_write_multibyte_reg+0x24>
 82a:	18 f4       	brcc	.+6      	; 0x832 <hal_nrf_write_multibyte_reg+0x1e>
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	60 f4       	brcc	.+24     	; 0x848 <hal_nrf_write_multibyte_reg+0x34>
 830:	03 c0       	rjmp	.+6      	; 0x838 <hal_nrf_write_multibyte_reg+0x24>
 832:	87 30       	cpi	r24, 0x07	; 7
 834:	61 f0       	breq	.+24     	; 0x84e <hal_nrf_write_multibyte_reg+0x3a>
 836:	08 c0       	rjmp	.+16     	; 0x848 <hal_nrf_write_multibyte_reg+0x34>
  {
    case HAL_NRF_PIPE0:
    case HAL_NRF_PIPE1:
    case HAL_NRF_TX:
      length = hal_nrf_get_address_width();
 838:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <hal_nrf_get_address_width>
 83c:	18 2f       	mov	r17, r24
      CSN_LOW();
 83e:	2a 98       	cbi	0x05, 2	; 5
      hal_nrf_rw(WRITE_REG + RX_ADDR_P0 + reg);
 840:	8a e2       	ldi	r24, 0x2A	; 42
 842:	8c 0f       	add	r24, r28
 844:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
      break;      
    default:
      break;
  }

  while(length--)
 848:	11 11       	cpse	r17, r1
 84a:	06 c0       	rjmp	.+12     	; 0x858 <hal_nrf_write_multibyte_reg+0x44>
 84c:	0c c0       	rjmp	.+24     	; 0x866 <hal_nrf_write_multibyte_reg+0x52>
      CSN_LOW();
      hal_nrf_rw(WRITE_REG + RX_ADDR_P0 + reg);
      break;
      
    case HAL_NRF_TX_PLOAD:
      CSN_LOW();
 84e:	2a 98       	cbi	0x05, 2	; 5
      hal_nrf_rw(WR_TX_PLOAD);
 850:	80 ea       	ldi	r24, 0xA0	; 160
 852:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
      break;      
 856:	f8 cf       	rjmp	.-16     	; 0x848 <hal_nrf_write_multibyte_reg+0x34>
 858:	cf 2d       	mov	r28, r15
 85a:	d0 2f       	mov	r29, r16
      break;
  }

  while(length--)
  {
    hal_nrf_rw(*pbuf++);
 85c:	89 91       	ld	r24, Y+
 85e:	0e 94 df 02 	call	0x5be	; 0x5be <hal_nrf_rw>
 862:	11 50       	subi	r17, 0x01	; 1
      break;      
    default:
      break;
  }

  while(length--)
 864:	d9 f7       	brne	.-10     	; 0x85c <hal_nrf_write_multibyte_reg+0x48>
  {
    hal_nrf_rw(*pbuf++);
  }

  CSN_HIGH();
 866:	2a 9a       	sbi	0x05, 2	; 5
}
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	ff 90       	pop	r15
 872:	08 95       	ret

00000874 <hal_nrf_set_address>:
  }
}

void hal_nrf_set_address(hal_nrf_address_t address, uint8_t *addr)
{
  switch(address)
 874:	86 30       	cpi	r24, 0x06	; 6
 876:	18 f4       	brcc	.+6      	; 0x87e <hal_nrf_set_address+0xa>
 878:	82 30       	cpi	r24, 0x02	; 2
 87a:	18 f0       	brcs	.+6      	; 0x882 <hal_nrf_set_address+0xe>
 87c:	06 c0       	rjmp	.+12     	; 0x88a <hal_nrf_set_address+0x16>
 87e:	86 30       	cpi	r24, 0x06	; 6
 880:	49 f4       	brne	.+18     	; 0x894 <hal_nrf_set_address+0x20>
  {
    case HAL_NRF_TX:
    case HAL_NRF_PIPE0:
    case HAL_NRF_PIPE1:
      hal_nrf_write_multibyte_reg((uint8_t) address, addr, 0);
 882:	40 e0       	ldi	r20, 0x00	; 0
 884:	0e 94 0a 04 	call	0x814	; 0x814 <hal_nrf_write_multibyte_reg>
      break;
 888:	08 95       	ret

    case HAL_NRF_PIPE2:
    case HAL_NRF_PIPE3:
    case HAL_NRF_PIPE4:
    case HAL_NRF_PIPE5:
      hal_nrf_write_reg(RX_ADDR_P0 + (uint8_t) address, *addr);
 88a:	fb 01       	movw	r30, r22
 88c:	60 81       	ld	r22, Z
 88e:	86 5f       	subi	r24, 0xF6	; 246
 890:	0e 94 00 03 	call	0x600	; 0x600 <hal_nrf_write_reg>
 894:	08 95       	ret

00000896 <radio_set_status>:
  return pload[byte_index];
}

void radio_set_status (radio_status_t new_status)
{
  status = new_status;
 896:	80 93 38 01 	sts	0x0138, r24
 89a:	08 95       	ret

0000089c <radio_pl_init>:
#include "hal_nrf.h"
#include "radio_pl.h"
#include "radio.h"

void radio_pl_init (const uint8_t *address, hal_nrf_operation_mode_t operational_mode)
{
 89c:	1f 93       	push	r17
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	ec 01       	movw	r28, r24
 8a4:	16 2f       	mov	r17, r22
  hal_nrf_close_pipe(HAL_NRF_ALL);               // First close all radio pipes
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	0e 94 75 03 	call	0x6ea	; 0x6ea <hal_nrf_close_pipe>
                                                 // Pipe 0 and 1 open by default
  hal_nrf_open_pipe(HAL_NRF_PIPE0, true);        // Then open pipe0, w/autoack 
 8ac:	61 e0       	ldi	r22, 0x01	; 1
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	0e 94 32 03 	call	0x664	; 0x664 <hal_nrf_open_pipe>

  hal_nrf_set_crc_mode(HAL_NRF_CRC_16BIT);       // Operates in 16bits CRC mode
 8b4:	83 e0       	ldi	r24, 0x03	; 3
 8b6:	0e 94 23 03 	call	0x646	; 0x646 <hal_nrf_set_crc_mode>
  hal_nrf_set_auto_retr(RF_RETRANSMITS, RF_RETRANS_DELAY);
 8ba:	6a ef       	ldi	r22, 0xFA	; 250
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	8f e0       	ldi	r24, 0x0F	; 15
 8c0:	0e 94 a1 03 	call	0x742	; 0x742 <hal_nrf_set_auto_retr>
                                                 // Enables auto retransmit.
                                                 // 3 retrans with 250ms delay

  hal_nrf_set_address_width(HAL_NRF_AW_5BYTES);  // 5 bytes address width
 8c4:	85 e0       	ldi	r24, 0x05	; 5
 8c6:	0e 94 bb 03 	call	0x776	; 0x776 <hal_nrf_set_address_width>
  hal_nrf_set_address(HAL_NRF_TX, address);      // Set device's addresses
 8ca:	be 01       	movw	r22, r28
 8cc:	86 e0       	ldi	r24, 0x06	; 6
 8ce:	0e 94 3a 04 	call	0x874	; 0x874 <hal_nrf_set_address>
  hal_nrf_set_address(HAL_NRF_PIPE0, address);   // Sets recieving address on 
 8d2:	be 01       	movw	r22, r28
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	0e 94 3a 04 	call	0x874	; 0x874 <hal_nrf_set_address>
 * Enables:                                                                  *
 *  - ACK payload                                                            *
 *  - Dynamic payload width                                                  *
 *  - Dynamic ACK                                                            *
 *****************************************************************************/
  hal_nrf_enable_ack_pl();                       // Try to enable ack payload
 8da:	0e 94 01 04 	call	0x802	; 0x802 <hal_nrf_enable_ack_pl>

  // When the features are locked, the FEATURE and DYNPD are read out 0x00
  // even after we have tried to enable ack payload. This mean that we need to
  // activate the features.
  if(hal_nrf_read_reg(FEATURE) == 0x00 && (hal_nrf_read_reg(DYNPD) == 0x00))
 8de:	8d e1       	ldi	r24, 0x1D	; 29
 8e0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 8e4:	81 11       	cpse	r24, r1
 8e6:	09 c0       	rjmp	.+18     	; 0x8fa <radio_pl_init+0x5e>
 8e8:	8c e1       	ldi	r24, 0x1C	; 28
 8ea:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <hal_nrf_read_reg>
 8ee:	81 11       	cpse	r24, r1
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <radio_pl_init+0x5e>
  {
    hal_nrf_lock_unlock ();                      // Activate features
 8f2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hal_nrf_lock_unlock>
    hal_nrf_enable_ack_pl();                     // Enables payload in ack
 8f6:	0e 94 01 04 	call	0x802	; 0x802 <hal_nrf_enable_ack_pl>
  }

  hal_nrf_enable_dynamic_pl();                   // Enables dynamic payload
 8fa:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <hal_nrf_enable_dynamic_pl>
  hal_nrf_setup_dyn_pl(ALL_PIPES);               // Sets up dynamic payload on
 8fe:	8f e3       	ldi	r24, 0x3F	; 63
 900:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <hal_nrf_setup_dyn_pl>
                                                 // all data pipes.
/*****************************************************************************
 * End changes from esb/radio_esb.c                                          *
 *****************************************************************************/
   
  if(operational_mode == HAL_NRF_PTX)            // Mode depentant settings
 904:	11 11       	cpse	r17, r1
 906:	04 c0       	rjmp	.+8      	; 0x910 <__stack+0x11>
  {
    hal_nrf_set_operation_mode(HAL_NRF_PTX);     // Enter TX mode
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	0e 94 c5 03 	call	0x78a	; 0x78a <hal_nrf_set_operation_mode>
 90e:	07 c0       	rjmp	.+14     	; 0x91e <__stack+0x1f>
  }
  else
  {
    hal_nrf_set_operation_mode(HAL_NRF_PRX);     // Enter RX mode
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	0e 94 c5 03 	call	0x78a	; 0x78a <hal_nrf_set_operation_mode>
    hal_nrf_set_rx_pload_width((uint8_t)HAL_NRF_PIPE0, RF_PAYLOAD_LENGTH);
 916:	6a e0       	ldi	r22, 0x0A	; 10
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	0e 94 c1 03 	call	0x782	; 0x782 <hal_nrf_set_rx_pload_width>
                                                 // Pipe0 expect 
                                                 // PAYLOAD_LENGTH byte payload
                                                 // PAYLOAD_LENGTH in radio.h
  }

  hal_nrf_set_rf_channel(RF_CHANNEL);            // Operating on static channel
 91e:	88 e2       	ldi	r24, 0x28	; 40
 920:	0e 94 ed 03 	call	0x7da	; 0x7da <hal_nrf_set_rf_channel>
                                                 // Defined in radio.h. 
                                                 // Frequency = 2400 + RF_CHANNEL
  hal_nrf_set_power_mode(HAL_NRF_PWR_UP);        // Power up device
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hal_nrf_set_power_mode>
 92a:	83 ef       	ldi	r24, 0xF3	; 243
 92c:	91 e0       	ldi	r25, 0x01	; 1
 92e:	01 97       	sbiw	r24, 0x01	; 1
 930:	f1 f7       	brne	.-4      	; 0x92e <__stack+0x2f>
 932:	00 c0       	rjmp	.+0      	; 0x934 <__stack+0x35>
 934:	00 00       	nop
  
  _delay_ms(RF_POWER_UP_DELAY);
  
  radio_set_status (RF_IDLE);                    // Radio now ready
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	0e 94 4b 04 	call	0x896	; 0x896 <radio_set_status>
}    
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	1f 91       	pop	r17
 942:	08 95       	ret

00000944 <__umulhisi3>:
 944:	a2 9f       	mul	r26, r18
 946:	b0 01       	movw	r22, r0
 948:	b3 9f       	mul	r27, r19
 94a:	c0 01       	movw	r24, r0
 94c:	a3 9f       	mul	r26, r19
 94e:	70 0d       	add	r23, r0
 950:	81 1d       	adc	r24, r1
 952:	11 24       	eor	r1, r1
 954:	91 1d       	adc	r25, r1
 956:	b2 9f       	mul	r27, r18
 958:	70 0d       	add	r23, r0
 95a:	81 1d       	adc	r24, r1
 95c:	11 24       	eor	r1, r1
 95e:	91 1d       	adc	r25, r1
 960:	08 95       	ret

00000962 <_exit>:
 962:	f8 94       	cli

00000964 <__stop_program>:
 964:	ff cf       	rjmp	.-2      	; 0x964 <__stop_program>
