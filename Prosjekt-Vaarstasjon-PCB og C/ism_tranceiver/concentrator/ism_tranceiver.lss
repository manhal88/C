
ism_tranceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00001d6e  00001e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  0080020e  0080020e  00001f10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e0  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003eea  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001320  00000000  00000000  00006372  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001781  00000000  00000000  00007692  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  00008e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011e2  00000000  00000000  0000992c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002080  00000000  00000000  0000ab0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  0000cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__ctors_end>
       4:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
       8:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
       c:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_3>
      10:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      14:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      18:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      1c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      20:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      24:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_9>
      28:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      2c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      30:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      34:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      38:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      3c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      40:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      44:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      48:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      4c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      50:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      54:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      58:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      5c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      60:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      64:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 4f       	sbci	r16, 0xF0	; 240
      70:	00 00       	nop
      72:	00 07       	cpc	r16, r16
      74:	00 07       	cpc	r16, r16
      76:	00 14       	cp	r0, r0
      78:	7f 14       	cp	r7, r15
      7a:	7f 14       	cp	r7, r15
      7c:	24 2a       	or	r2, r20
      7e:	7f 2a       	or	r7, r31
      80:	12 23       	and	r17, r18
      82:	13 08       	sbc	r1, r3
      84:	64 62       	ori	r22, 0x24	; 36
      86:	36 49       	sbci	r19, 0x96	; 150
      88:	55 22       	and	r5, r21
      8a:	20 00       	.word	0x0020	; ????
      8c:	05 03       	mulsu	r16, r21
      8e:	00 00       	nop
      90:	00 1c       	adc	r0, r0
      92:	22 41       	sbci	r18, 0x12	; 18
      94:	00 00       	nop
      96:	41 22       	and	r4, r17
      98:	1c 00       	.word	0x001c	; ????
      9a:	14 08       	sbc	r1, r4
      9c:	3e 08       	sbc	r3, r14
      9e:	14 08       	sbc	r1, r4
      a0:	08 3e       	cpi	r16, 0xE8	; 232
      a2:	08 08       	sbc	r0, r8
      a4:	50 30       	cpi	r21, 0x00	; 0
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	08 08       	sbc	r0, r8
      ac:	08 08       	sbc	r0, r8
      ae:	00 60       	ori	r16, 0x00	; 0
      b0:	60 00       	.word	0x0060	; ????
      b2:	00 20       	and	r0, r0
      b4:	10 08       	sbc	r1, r0
      b6:	04 02       	muls	r16, r20
      b8:	3e 51       	subi	r19, 0x1E	; 30
      ba:	49 45       	sbci	r20, 0x59	; 89
      bc:	3e 00       	.word	0x003e	; ????
      be:	42 7f       	andi	r20, 0xF2	; 242
      c0:	40 00       	.word	0x0040	; ????
      c2:	42 61       	ori	r20, 0x12	; 18
      c4:	51 49       	sbci	r21, 0x91	; 145
      c6:	46 21       	and	r20, r6
      c8:	41 45       	sbci	r20, 0x51	; 81
      ca:	4b 31       	cpi	r20, 0x1B	; 27
      cc:	18 14       	cp	r1, r8
      ce:	12 7f       	andi	r17, 0xF2	; 242
      d0:	10 27       	eor	r17, r16
      d2:	45 45       	sbci	r20, 0x55	; 85
      d4:	45 39       	cpi	r20, 0x95	; 149
      d6:	3c 4a       	sbci	r19, 0xAC	; 172
      d8:	49 49       	sbci	r20, 0x99	; 153
      da:	30 01       	movw	r6, r0
      dc:	71 09       	sbc	r23, r1
      de:	05 03       	mulsu	r16, r21
      e0:	36 49       	sbci	r19, 0x96	; 150
      e2:	49 49       	sbci	r20, 0x99	; 153
      e4:	36 06       	cpc	r3, r22
      e6:	49 49       	sbci	r20, 0x99	; 153
      e8:	29 1e       	adc	r2, r25
      ea:	00 36       	cpi	r16, 0x60	; 96
      ec:	36 00       	.word	0x0036	; ????
      ee:	00 00       	nop
      f0:	56 36       	cpi	r21, 0x66	; 102
      f2:	00 00       	nop
      f4:	08 14       	cp	r0, r8
      f6:	22 41       	sbci	r18, 0x12	; 18
      f8:	00 14       	cp	r0, r0
      fa:	14 14       	cp	r1, r4
      fc:	14 14       	cp	r1, r4
      fe:	00 41       	sbci	r16, 0x10	; 16
     100:	22 14       	cp	r2, r2
     102:	08 02       	muls	r16, r24
     104:	01 51       	subi	r16, 0x11	; 17
     106:	09 06       	cpc	r0, r25
     108:	3e 41       	sbci	r19, 0x1E	; 30
     10a:	5d 55       	subi	r21, 0x5D	; 93
     10c:	1e 7e       	andi	r17, 0xEE	; 238
     10e:	11 11       	cpse	r17, r1
     110:	11 7e       	andi	r17, 0xE1	; 225
     112:	7f 49       	sbci	r23, 0x9F	; 159
     114:	49 49       	sbci	r20, 0x99	; 153
     116:	36 3e       	cpi	r19, 0xE6	; 230
     118:	41 41       	sbci	r20, 0x11	; 17
     11a:	41 22       	and	r4, r17
     11c:	7f 41       	sbci	r23, 0x1F	; 31
     11e:	41 22       	and	r4, r17
     120:	1c 7f       	andi	r17, 0xFC	; 252
     122:	49 49       	sbci	r20, 0x99	; 153
     124:	49 41       	sbci	r20, 0x19	; 25
     126:	7f 09       	sbc	r23, r15
     128:	09 09       	sbc	r16, r9
     12a:	01 3e       	cpi	r16, 0xE1	; 225
     12c:	41 49       	sbci	r20, 0x91	; 145
     12e:	49 7a       	andi	r20, 0xA9	; 169
     130:	7f 08       	sbc	r7, r15
     132:	08 08       	sbc	r0, r8
     134:	7f 00       	.word	0x007f	; ????
     136:	41 7f       	andi	r20, 0xF1	; 241
     138:	41 00       	.word	0x0041	; ????
     13a:	20 40       	sbci	r18, 0x00	; 0
     13c:	41 3f       	cpi	r20, 0xF1	; 241
     13e:	01 7f       	andi	r16, 0xF1	; 241
     140:	08 14       	cp	r0, r8
     142:	22 41       	sbci	r18, 0x12	; 18
     144:	7f 40       	sbci	r23, 0x0F	; 15
     146:	40 40       	sbci	r20, 0x00	; 0
     148:	40 7f       	andi	r20, 0xF0	; 240
     14a:	02 0c       	add	r0, r2
     14c:	02 7f       	andi	r16, 0xF2	; 242
     14e:	7f 04       	cpc	r7, r15
     150:	08 10       	cpse	r0, r8
     152:	7f 3e       	cpi	r23, 0xEF	; 239
     154:	41 41       	sbci	r20, 0x11	; 17
     156:	41 3e       	cpi	r20, 0xE1	; 225
     158:	7f 09       	sbc	r23, r15
     15a:	09 09       	sbc	r16, r9
     15c:	06 3e       	cpi	r16, 0xE6	; 230
     15e:	41 51       	subi	r20, 0x11	; 17
     160:	21 5e       	subi	r18, 0xE1	; 225
     162:	7f 09       	sbc	r23, r15
     164:	19 29       	or	r17, r9
     166:	46 26       	eor	r4, r22
     168:	49 49       	sbci	r20, 0x99	; 153
     16a:	49 32       	cpi	r20, 0x29	; 41
     16c:	01 01       	movw	r0, r2
     16e:	7f 01       	movw	r14, r30
     170:	01 3f       	cpi	r16, 0xF1	; 241
     172:	40 40       	sbci	r20, 0x00	; 0
     174:	40 3f       	cpi	r20, 0xF0	; 240
     176:	1f 20       	and	r1, r15
     178:	40 20       	and	r4, r0
     17a:	1f 3f       	cpi	r17, 0xFF	; 255
     17c:	40 38       	cpi	r20, 0x80	; 128
     17e:	40 3f       	cpi	r20, 0xF0	; 240
     180:	63 14       	cp	r6, r3
     182:	08 14       	cp	r0, r8
     184:	63 07       	cpc	r22, r19
     186:	08 70       	andi	r16, 0x08	; 8
     188:	08 07       	cpc	r16, r24
     18a:	61 51       	subi	r22, 0x11	; 17
     18c:	49 45       	sbci	r20, 0x59	; 89
     18e:	43 00       	.word	0x0043	; ????
     190:	7f 41       	sbci	r23, 0x1F	; 31
     192:	41 00       	.word	0x0041	; ????
     194:	02 04       	cpc	r0, r2
     196:	08 10       	cpse	r0, r8
     198:	20 00       	.word	0x0020	; ????
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	7f 00       	.word	0x007f	; ????
     19e:	04 02       	muls	r16, r20
     1a0:	01 02       	muls	r16, r17
     1a2:	04 40       	sbci	r16, 0x04	; 4
     1a4:	40 40       	sbci	r20, 0x00	; 0
     1a6:	40 40       	sbci	r20, 0x00	; 0
     1a8:	00 00       	nop
     1aa:	03 05       	cpc	r16, r3
     1ac:	00 20       	and	r0, r0
     1ae:	54 54       	subi	r21, 0x44	; 68
     1b0:	54 78       	andi	r21, 0x84	; 132
     1b2:	7f 44       	sbci	r23, 0x4F	; 79
     1b4:	44 44       	sbci	r20, 0x44	; 68
     1b6:	38 38       	cpi	r19, 0x88	; 136
     1b8:	44 44       	sbci	r20, 0x44	; 68
     1ba:	44 44       	sbci	r20, 0x44	; 68
     1bc:	38 44       	sbci	r19, 0x48	; 72
     1be:	44 44       	sbci	r20, 0x44	; 68
     1c0:	7f 38       	cpi	r23, 0x8F	; 143
     1c2:	54 54       	subi	r21, 0x44	; 68
     1c4:	54 18       	sub	r5, r4
     1c6:	04 04       	cpc	r0, r4
     1c8:	7e 05       	cpc	r23, r14
     1ca:	05 08       	sbc	r0, r5
     1cc:	54 54       	subi	r21, 0x44	; 68
     1ce:	54 3c       	cpi	r21, 0xC4	; 196
     1d0:	7f 08       	sbc	r7, r15
     1d2:	04 04       	cpc	r0, r4
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	44 7d       	andi	r20, 0xD4	; 212
     1d8:	40 00       	.word	0x0040	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	44 3d       	cpi	r20, 0xD4	; 212
     1de:	00 7f       	andi	r16, 0xF0	; 240
     1e0:	10 28       	or	r1, r0
     1e2:	44 00       	.word	0x0044	; ????
     1e4:	00 41       	sbci	r16, 0x10	; 16
     1e6:	7f 40       	sbci	r23, 0x0F	; 15
     1e8:	00 7c       	andi	r16, 0xC0	; 192
     1ea:	04 7c       	andi	r16, 0xC4	; 196
     1ec:	04 78       	andi	r16, 0x84	; 132
     1ee:	7c 08       	sbc	r7, r12
     1f0:	04 04       	cpc	r0, r4
     1f2:	78 38       	cpi	r23, 0x88	; 136
     1f4:	44 44       	sbci	r20, 0x44	; 68
     1f6:	44 38       	cpi	r20, 0x84	; 132
     1f8:	7c 14       	cp	r7, r12
     1fa:	14 14       	cp	r1, r4
     1fc:	08 08       	sbc	r0, r8
     1fe:	14 14       	cp	r1, r4
     200:	14 7c       	andi	r17, 0xC4	; 196
     202:	7c 08       	sbc	r7, r12
     204:	04 04       	cpc	r0, r4
     206:	00 48       	sbci	r16, 0x80	; 128
     208:	54 54       	subi	r21, 0x44	; 68
     20a:	54 24       	eor	r5, r4
     20c:	04 04       	cpc	r0, r4
     20e:	3f 44       	sbci	r19, 0x4F	; 79
     210:	44 3c       	cpi	r20, 0xC4	; 196
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	20 7c       	andi	r18, 0xC0	; 192
     216:	1c 20       	and	r1, r12
     218:	40 20       	and	r4, r0
     21a:	1c 3c       	cpi	r17, 0xCC	; 204
     21c:	40 30       	cpi	r20, 0x00	; 0
     21e:	40 3c       	cpi	r20, 0xC0	; 192
     220:	44 28       	or	r4, r4
     222:	10 28       	or	r1, r0
     224:	44 0c       	add	r4, r4
     226:	50 50       	subi	r21, 0x00	; 0
     228:	50 3c       	cpi	r21, 0xC0	; 192
     22a:	44 64       	ori	r20, 0x44	; 68
     22c:	54 4c       	sbci	r21, 0xC4	; 196
     22e:	44 00       	.word	0x0044	; ????

00000230 <__ctors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d8 e0       	ldi	r29, 0x08	; 8
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61

0000023c <__do_copy_data>:
     23c:	12 e0       	ldi	r17, 0x02	; 2
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b1 e0       	ldi	r27, 0x01	; 1
     242:	ee e6       	ldi	r30, 0x6E	; 110
     244:	fd e1       	ldi	r31, 0x1D	; 29
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x10>
     248:	05 90       	lpm	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	ae 30       	cpi	r26, 0x0E	; 14
     24e:	b1 07       	cpc	r27, r17
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0xc>

00000252 <__do_clear_bss>:
     252:	22 e0       	ldi	r18, 0x02	; 2
     254:	ae e0       	ldi	r26, 0x0E	; 14
     256:	b2 e0       	ldi	r27, 0x02	; 2
     258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
     25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
     25c:	ab 32       	cpi	r26, 0x2B	; 43
     25e:	b2 07       	cpc	r27, r18
     260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>
     262:	0e 94 33 04 	call	0x866	; 0x866 <main>
     266:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <_exit>

0000026a <__bad_interrupt>:
     26a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026e <i2c_start>:
}

static int i2c_start (uint8_t address) {
	
	// reset TWI control register
	TWCR = 0;
     26e:	ec eb       	ldi	r30, 0xBC	; 188
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     274:	94 ea       	ldi	r25, 0xA4	; 164
     276:	90 83       	st	Z, r25
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
     278:	90 81       	ld	r25, Z
     27a:	99 23       	and	r25, r25
     27c:	ec f7       	brge	.-6      	; 0x278 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if ((TWSR & 0xF8) != TW_START)
     27e:	90 91 b9 00 	lds	r25, 0x00B9
     282:	98 7f       	andi	r25, 0xF8	; 248
     284:	98 30       	cpi	r25, 0x08	; 8
     286:	a9 f4       	brne	.+42     	; 0x2b2 <i2c_start+0x44>
		return EXIT_FAILURE;
	
	// load slave address into data register
	TWDR = address;
     288:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     28c:	84 e8       	ldi	r24, 0x84	; 132
     28e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
     292:	ec eb       	ldi	r30, 0xBC	; 188
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	88 23       	and	r24, r24
     29a:	ec f7       	brge	.-6      	; 0x296 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     29c:	20 91 b9 00 	lds	r18, 0x00B9
     2a0:	28 7f       	andi	r18, 0xF8	; 248
	//_delay_ms(1);
	if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK))
     2a2:	28 31       	cpi	r18, 0x18	; 24
     2a4:	49 f0       	breq	.+18     	; 0x2b8 <i2c_start+0x4a>
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	20 34       	cpi	r18, 0x40	; 64
     2ac:	39 f4       	brne	.+14     	; 0x2bc <i2c_start+0x4e>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	08 95       	ret
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
	
	// check if the start condition was successfully transmitted
	if ((TWSR & 0xF8) != TW_START)
		return EXIT_FAILURE;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	08 95       	ret
	uint8_t twst = TW_STATUS & 0xF8;
	//_delay_ms(1);
	if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK))
		return EXIT_FAILURE;

	return EXIT_SUCCESS;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
}
     2bc:	08 95       	ret

000002be <i2c_write>:

static int i2c_write (uint8_t data) {
	
	// load data into data register
	TWDR = data;
     2be:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     2c2:	84 e8       	ldi	r24, 0x84	; 132
     2c4:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
     2c8:	ec eb       	ldi	r30, 0xBC	; 188
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	88 23       	and	r24, r24
     2d0:	ec f7       	brge	.-6      	; 0x2cc <i2c_write+0xe>
	
	if ((TWSR & 0xF8) != TW_MT_DATA_ACK)
     2d2:	90 91 b9 00 	lds	r25, 0x00B9
     2d6:	98 7f       	andi	r25, 0xF8	; 248
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	98 32       	cpi	r25, 0x28	; 40
     2de:	11 f4       	brne	.+4      	; 0x2e4 <i2c_write+0x26>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
		return EXIT_FAILURE;
	
	return EXIT_SUCCESS;
}
     2e4:	c9 01       	movw	r24, r18
     2e6:	08 95       	ret

000002e8 <i2c_init>:
static void i2c_stop(void);

int i2c_init (void) {
	
	/* Minimum value of TWBR is 10 */
	TWBR = 10;	
     2e8:	8a e0       	ldi	r24, 0x0A	; 10
     2ea:	80 93 b8 00 	sts	0x00B8, r24
	return EXIT_SUCCESS;
}
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	08 95       	ret

000002f4 <i2c_write_reg>:

int i2c_write_reg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint8_t length) {
     2f4:	cf 92       	push	r12
     2f6:	df 92       	push	r13
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	c6 2f       	mov	r28, r22
     306:	6a 01       	movw	r12, r20
     308:	12 2f       	mov	r17, r18
	
	if (i2c_start(devaddr | 0x00))
     30a:	0e 94 37 01 	call	0x26e	; 0x26e <i2c_start>
     30e:	89 2b       	or	r24, r25
     310:	e1 f4       	brne	.+56     	; 0x34a <i2c_write_reg+0x56>
		return EXIT_FAILURE;

	if (i2c_write(regaddr))
     312:	8c 2f       	mov	r24, r28
     314:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_write>
     318:	7c 01       	movw	r14, r24
     31a:	89 2b       	or	r24, r25
     31c:	d1 f4       	brne	.+52     	; 0x352 <i2c_write_reg+0x5e>
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < length; i++) {
     31e:	11 23       	and	r17, r17
     320:	81 f0       	breq	.+32     	; 0x342 <i2c_write_reg+0x4e>
     322:	e6 01       	movw	r28, r12
     324:	11 50       	subi	r17, 0x01	; 1
     326:	01 2f       	mov	r16, r17
     328:	10 e0       	ldi	r17, 0x00	; 0
     32a:	0f 5f       	subi	r16, 0xFF	; 255
     32c:	1f 4f       	sbci	r17, 0xFF	; 255
     32e:	0c 0d       	add	r16, r12
     330:	1d 1d       	adc	r17, r13
		if (i2c_write(data[i])) 
     332:	89 91       	ld	r24, Y+
     334:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_write>
     338:	89 2b       	or	r24, r25
     33a:	79 f4       	brne	.+30     	; 0x35a <i2c_write_reg+0x66>
		return EXIT_FAILURE;

	if (i2c_write(regaddr))
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < length; i++) {
     33c:	c0 17       	cp	r28, r16
     33e:	d1 07       	cpc	r29, r17
     340:	c1 f7       	brne	.-16     	; 0x332 <i2c_write_reg+0x3e>
}

static void i2c_stop(void) {
	
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     342:	84 e9       	ldi	r24, 0x94	; 148
     344:	80 93 bc 00 	sts	0x00BC, r24
     348:	0b c0       	rjmp	.+22     	; 0x360 <i2c_write_reg+0x6c>
}

int i2c_write_reg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint8_t length) {
	
	if (i2c_start(devaddr | 0x00))
		return EXIT_FAILURE;
     34a:	ee 24       	eor	r14, r14
     34c:	e3 94       	inc	r14
     34e:	f1 2c       	mov	r15, r1
     350:	07 c0       	rjmp	.+14     	; 0x360 <i2c_write_reg+0x6c>

	if (i2c_write(regaddr))
		return EXIT_FAILURE;
     352:	ee 24       	eor	r14, r14
     354:	e3 94       	inc	r14
     356:	f1 2c       	mov	r15, r1
     358:	03 c0       	rjmp	.+6      	; 0x360 <i2c_write_reg+0x6c>

	for (uint8_t i = 0; i < length; i++) {
		if (i2c_write(data[i])) 
			return EXIT_FAILURE;
     35a:	ee 24       	eor	r14, r14
     35c:	e3 94       	inc	r14
     35e:	f1 2c       	mov	r15, r1
	}

	i2c_stop();

	return EXIT_SUCCESS;
}
     360:	c7 01       	movw	r24, r14
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	08 95       	ret

00000374 <i2c_read_reg>:

int i2c_read_reg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint8_t length) {
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	c8 2f       	mov	r28, r24
     382:	f6 2e       	mov	r15, r22
     384:	8a 01       	movw	r16, r20
     386:	e2 2e       	mov	r14, r18
	
	if (i2c_start(devaddr))
     388:	0e 94 37 01 	call	0x26e	; 0x26e <i2c_start>
     38c:	89 2b       	or	r24, r25
     38e:	e1 f5       	brne	.+120    	; 0x408 <i2c_read_reg+0x94>
		return EXIT_FAILURE;

	if (i2c_write(regaddr))
     390:	8f 2d       	mov	r24, r15
     392:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_write>
     396:	89 2b       	or	r24, r25
     398:	d1 f5       	brne	.+116    	; 0x40e <i2c_read_reg+0x9a>
		return EXIT_FAILURE;

	if (i2c_start(devaddr | 0x01))
     39a:	8c 2f       	mov	r24, r28
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	0e 94 37 01 	call	0x26e	; 0x26e <i2c_start>
     3a2:	bc 01       	movw	r22, r24
     3a4:	89 2b       	or	r24, r25
     3a6:	b1 f5       	brne	.+108    	; 0x414 <i2c_read_reg+0xa0>
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
     3a8:	4e 2d       	mov	r20, r14
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	41 50       	subi	r20, 0x01	; 1
     3ae:	51 09       	sbc	r21, r1
     3b0:	14 16       	cp	r1, r20
     3b2:	15 06       	cpc	r1, r21
     3b4:	ac f4       	brge	.+42     	; 0x3e0 <i2c_read_reg+0x6c>
     3b6:	30 e0       	ldi	r19, 0x00	; 0
}

static int i2c_read_ack (void) {
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     3b8:	ec eb       	ldi	r30, 0xBC	; 188
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	24 ec       	ldi	r18, 0xC4	; 196
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
	// return received data from TWDR
	return TWDR;
     3be:	cb eb       	ldi	r28, 0xBB	; 187
     3c0:	d0 e0       	ldi	r29, 0x00	; 0

	if (i2c_start(devaddr | 0x01))
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
		data[i] = i2c_read_ack();
     3c2:	d8 01       	movw	r26, r16
     3c4:	a3 0f       	add	r26, r19
     3c6:	b1 1d       	adc	r27, r1
}

static int i2c_read_ack (void) {
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     3c8:	20 83       	st	Z, r18
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
     3ca:	90 81       	ld	r25, Z
     3cc:	99 23       	and	r25, r25
     3ce:	ec f7       	brge	.-6      	; 0x3ca <i2c_read_reg+0x56>
	// return received data from TWDR
	return TWDR;
     3d0:	88 81       	ld	r24, Y

	if (i2c_start(devaddr | 0x01))
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
		data[i] = i2c_read_ack();
     3d2:	8c 93       	st	X, r24
		return EXIT_FAILURE;

	if (i2c_start(devaddr | 0x01))
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
     3d4:	3f 5f       	subi	r19, 0xFF	; 255
     3d6:	83 2f       	mov	r24, r19
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	84 17       	cp	r24, r20
     3dc:	95 07       	cpc	r25, r21
     3de:	8c f3       	brlt	.-30     	; 0x3c2 <i2c_read_reg+0x4e>
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     3e0:	ee 2d       	mov	r30, r14
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	e0 0f       	add	r30, r16
     3e8:	f1 1f       	adc	r31, r17
}

static uint8_t i2c_read_nack (void) {
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     3ea:	84 e8       	ldi	r24, 0x84	; 132
     3ec:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
     3f0:	ac eb       	ldi	r26, 0xBC	; 188
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	8c 91       	ld	r24, X
     3f6:	88 23       	and	r24, r24
     3f8:	ec f7       	brge	.-6      	; 0x3f4 <i2c_read_reg+0x80>
	// return received data from TWDR
	return TWDR;
     3fa:	80 91 bb 00 	lds	r24, 0x00BB
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     3fe:	80 83       	st	Z, r24
}

static void i2c_stop(void) {
	
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     400:	84 e9       	ldi	r24, 0x94	; 148
     402:	80 93 bc 00 	sts	0x00BC, r24
     406:	08 c0       	rjmp	.+16     	; 0x418 <i2c_read_reg+0xa4>
}

int i2c_read_reg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint8_t length) {
	
	if (i2c_start(devaddr))
		return EXIT_FAILURE;
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	05 c0       	rjmp	.+10     	; 0x418 <i2c_read_reg+0xa4>

	if (i2c_write(regaddr))
		return EXIT_FAILURE;
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	02 c0       	rjmp	.+4      	; 0x418 <i2c_read_reg+0xa4>

	if (i2c_start(devaddr | 0x01))
		return EXIT_FAILURE;
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	70 e0       	ldi	r23, 0x00	; 0
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return EXIT_SUCCESS;
}
     418:	cb 01       	movw	r24, r22
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	08 95       	ret

00000428 <i2c_read_reg_10ms_delay>:

int i2c_read_reg_10ms_delay(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint8_t length) {
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	c8 2f       	mov	r28, r24
     436:	f6 2e       	mov	r15, r22
     438:	8a 01       	movw	r16, r20
     43a:	e2 2e       	mov	r14, r18
	
	if (i2c_start(devaddr))
     43c:	0e 94 37 01 	call	0x26e	; 0x26e <i2c_start>
     440:	89 2b       	or	r24, r25
     442:	09 f0       	breq	.+2      	; 0x446 <i2c_read_reg_10ms_delay+0x1e>
     444:	43 c0       	rjmp	.+134    	; 0x4cc <i2c_read_reg_10ms_delay+0xa4>
		return EXIT_FAILURE;

	if (i2c_write(regaddr))
     446:	8f 2d       	mov	r24, r15
     448:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_write>
     44c:	89 2b       	or	r24, r25
     44e:	09 f0       	breq	.+2      	; 0x452 <i2c_read_reg_10ms_delay+0x2a>
     450:	40 c0       	rjmp	.+128    	; 0x4d2 <i2c_read_reg_10ms_delay+0xaa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     452:	83 ec       	ldi	r24, 0xC3	; 195
     454:	99 e0       	ldi	r25, 0x09	; 9
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <i2c_read_reg_10ms_delay+0x2e>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <i2c_read_reg_10ms_delay+0x34>
     45c:	00 00       	nop
		return EXIT_FAILURE;

	_delay_ms(10);

	if (i2c_start(devaddr | 0x01))
     45e:	8c 2f       	mov	r24, r28
     460:	81 60       	ori	r24, 0x01	; 1
     462:	0e 94 37 01 	call	0x26e	; 0x26e <i2c_start>
     466:	bc 01       	movw	r22, r24
     468:	89 2b       	or	r24, r25
     46a:	b1 f5       	brne	.+108    	; 0x4d8 <i2c_read_reg_10ms_delay+0xb0>
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
     46c:	4e 2d       	mov	r20, r14
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	41 50       	subi	r20, 0x01	; 1
     472:	51 09       	sbc	r21, r1
     474:	14 16       	cp	r1, r20
     476:	15 06       	cpc	r1, r21
     478:	ac f4       	brge	.+42     	; 0x4a4 <i2c_read_reg_10ms_delay+0x7c>
     47a:	30 e0       	ldi	r19, 0x00	; 0
}

static int i2c_read_ack (void) {
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     47c:	ec eb       	ldi	r30, 0xBC	; 188
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	24 ec       	ldi	r18, 0xC4	; 196
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
	// return received data from TWDR
	return TWDR;
     482:	cb eb       	ldi	r28, 0xBB	; 187
     484:	d0 e0       	ldi	r29, 0x00	; 0

	if (i2c_start(devaddr | 0x01))
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
		data[i] = i2c_read_ack();
     486:	d8 01       	movw	r26, r16
     488:	a3 0f       	add	r26, r19
     48a:	b1 1d       	adc	r27, r1
}

static int i2c_read_ack (void) {
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     48c:	20 83       	st	Z, r18
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
     48e:	90 81       	ld	r25, Z
     490:	99 23       	and	r25, r25
     492:	ec f7       	brge	.-6      	; 0x48e <i2c_read_reg_10ms_delay+0x66>
	// return received data from TWDR
	return TWDR;
     494:	88 81       	ld	r24, Y

	if (i2c_start(devaddr | 0x01))
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
		data[i] = i2c_read_ack();
     496:	8c 93       	st	X, r24
	_delay_ms(10);

	if (i2c_start(devaddr | 0x01))
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
     498:	3f 5f       	subi	r19, 0xFF	; 255
     49a:	83 2f       	mov	r24, r19
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	84 17       	cp	r24, r20
     4a0:	95 07       	cpc	r25, r21
     4a2:	8c f3       	brlt	.-30     	; 0x486 <i2c_read_reg_10ms_delay+0x5e>
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     4a4:	ee 2d       	mov	r30, r14
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	31 97       	sbiw	r30, 0x01	; 1
     4aa:	e0 0f       	add	r30, r16
     4ac:	f1 1f       	adc	r31, r17
}

static uint8_t i2c_read_nack (void) {
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     4ae:	84 e8       	ldi	r24, 0x84	; 132
     4b0:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while (!(TWCR & (1<<TWINT)));
     4b4:	ac eb       	ldi	r26, 0xBC	; 188
     4b6:	b0 e0       	ldi	r27, 0x00	; 0
     4b8:	8c 91       	ld	r24, X
     4ba:	88 23       	and	r24, r24
     4bc:	ec f7       	brge	.-6      	; 0x4b8 <i2c_read_reg_10ms_delay+0x90>
	// return received data from TWDR
	return TWDR;
     4be:	80 91 bb 00 	lds	r24, 0x00BB
		return EXIT_FAILURE;

	for (uint8_t i = 0; i < (length-1); i++) {
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     4c2:	80 83       	st	Z, r24
}

static void i2c_stop(void) {
	
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     4c4:	84 e9       	ldi	r24, 0x94	; 148
     4c6:	80 93 bc 00 	sts	0x00BC, r24
     4ca:	08 c0       	rjmp	.+16     	; 0x4dc <i2c_read_reg_10ms_delay+0xb4>
}

int i2c_read_reg_10ms_delay(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint8_t length) {
	
	if (i2c_start(devaddr))
		return EXIT_FAILURE;
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <i2c_read_reg_10ms_delay+0xb4>

	if (i2c_write(regaddr))
		return EXIT_FAILURE;
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <i2c_read_reg_10ms_delay+0xb4>

	_delay_ms(10);

	if (i2c_start(devaddr | 0x01))
		return EXIT_FAILURE;
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	70 e0       	ldi	r23, 0x00	; 0
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return EXIT_SUCCESS;
}
     4dc:	cb 01       	movw	r24, r22
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	08 95       	ret

000004ec <init_interrupts>:
#include "interrupt.h"

static void pcint0_interrupt(void) {
	
	/* set PCIE0 to enable PCMSK0 scan */
	PCICR |= (1 << PCIE0);
     4ec:	e8 e6       	ldi	r30, 0x68	; 104
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	81 60       	ori	r24, 0x01	; 1
     4f4:	80 83       	st	Z, r24
		
	/* set PCINT0 to trigger an interrupt on state change */
	PCMSK0 |= (1 << PCINT0);
     4f6:	eb e6       	ldi	r30, 0x6B	; 107
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	81 60       	ori	r24, 0x01	; 1
     4fe:	80 83       	st	Z, r24
	
	pcint0_interrupt();
	//init_rtc_interrup();
	
	return EXIT_SUCCESS;
}
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	08 95       	ret

00000506 <spi_init>:
#include "../ism_tranceiver.h"

int spi_init (void) {
	
	/* Enable, Master, and SPI mode 3 */
	SPCR = ( (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA));
     506:	8c e5       	ldi	r24, 0x5C	; 92
     508:	8c bd       	out	0x2c, r24	; 44
	
	/* F_CPU / 2 */
	SPSR = (1<<SPI2X);
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	8d bd       	out	0x2d, r24	; 45
	
	return EXIT_SUCCESS;
}
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	08 95       	ret

00000514 <spi_mode0>:

int spi_mode0 (void) {
	
	/* Enable, Master, and SPI mode 0 */
	SPCR = ( (1<<SPE) | (1<<MSTR));
     514:	80 e5       	ldi	r24, 0x50	; 80
     516:	8c bd       	out	0x2c, r24	; 44
	
	return EXIT_SUCCESS;
}
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	08 95       	ret

0000051e <spi_mode3>:

int spi_mode3 (void) {
	
	/* Enable, Master, and SPI mode 0 */
	SPCR = ( (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA));
     51e:	8c e5       	ldi	r24, 0x5C	; 92
     520:	8c bd       	out	0x2c, r24	; 44
	
	return EXIT_SUCCESS;
}
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	08 95       	ret

00000528 <spi_transmit>:

int spi_transmit (uint8_t *data) {
	
	SPDR = *data;
     528:	fc 01       	movw	r30, r24
     52a:	20 81       	ld	r18, Z
     52c:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & (1<<SPIF)));
     52e:	0d b4       	in	r0, 0x2d	; 45
     530:	07 fe       	sbrs	r0, 7
     532:	fd cf       	rjmp	.-6      	; 0x52e <spi_transmit+0x6>
	
	*data = SPDR;
     534:	2e b5       	in	r18, 0x2e	; 46
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18
	
	return EXIT_SUCCESS;
}
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	08 95       	ret

00000540 <uart_init>:

#include "../ism_tranceiver.h"

int uart_init(void) {
	
    UBRR0H = UBRRH_VALUE;
     540:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
     544:	8c e0       	ldi	r24, 0x0C	; 12
     546:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0A |= _BV(U2X0);
     54a:	e0 ec       	ldi	r30, 0xC0	; 192
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	82 60       	ori	r24, 0x02	; 2
     552:	80 83       	st	Z, r24

	/* 8-bit data */ 
    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     554:	86 e0       	ldi	r24, 0x06	; 6
     556:	80 93 c2 00 	sts	0x00C2, r24
    
	/* Enable RX and TX */
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
     55a:	88 e1       	ldi	r24, 0x18	; 24
     55c:	80 93 c1 00 	sts	0x00C1, r24
	
	return EXIT_SUCCESS;    
}
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	08 95       	ret

00000566 <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
     566:	cf 93       	push	r28
     568:	c8 2f       	mov	r28, r24
    if (c == '\n') {
     56a:	8a 30       	cpi	r24, 0x0A	; 10
     56c:	19 f4       	brne	.+6      	; 0x574 <uart_putchar+0xe>
        uart_putchar('\r', stream);
     56e:	8d e0       	ldi	r24, 0x0D	; 13
     570:	0e 94 b3 02 	call	0x566	; 0x566 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
     574:	e0 ec       	ldi	r30, 0xC0	; 192
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	90 81       	ld	r25, Z
     57a:	95 ff       	sbrs	r25, 5
     57c:	fd cf       	rjmp	.-6      	; 0x578 <uart_putchar+0x12>
    UDR0 = c;
     57e:	c0 93 c6 00 	sts	0x00C6, r28
}
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <uart_getchar>:

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
     586:	e0 ec       	ldi	r30, 0xC0	; 192
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	88 23       	and	r24, r24
     58e:	ec f7       	brge	.-6      	; 0x58a <uart_getchar+0x4>
    return UDR0;
     590:	80 91 c6 00 	lds	r24, 0x00C6
}
     594:	08 95       	ret

00000596 <init_hdc1050>:

#include "../ism_tranceiver.h"
#include "hdc1050.h"
#include "../avr/i2c.h"

int init_hdc1050(void) {
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	00 d0       	rcall	.+0      	; 0x59c <init_hdc1050+0x6>
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t data[2];
	
	/* Verify device ID */
	if (i2c_read_reg(HDC1050_I2C_ADDRESS, HDC1050_REG_DEVICE_ID, data, 2))
     5a0:	22 e0       	ldi	r18, 0x02	; 2
     5a2:	ae 01       	movw	r20, r28
     5a4:	4f 5f       	subi	r20, 0xFF	; 255
     5a6:	5f 4f       	sbci	r21, 0xFF	; 255
     5a8:	6f ef       	ldi	r22, 0xFF	; 255
     5aa:	80 e8       	ldi	r24, 0x80	; 128
     5ac:	0e 94 ba 01 	call	0x374	; 0x374 <i2c_read_reg>
     5b0:	89 2b       	or	r24, r25
     5b2:	d9 f4       	brne	.+54     	; 0x5ea <init_hdc1050+0x54>
		return EXIT_FAILURE;
		
	if (((data[0] << 8) | data[1])  != HDC1050_DEVICE_ID)
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	98 2f       	mov	r25, r24
     5ba:	88 27       	eor	r24, r24
     5bc:	2a 81       	ldd	r18, Y+2	; 0x02
     5be:	82 2b       	or	r24, r18
     5c0:	80 35       	cpi	r24, 0x50	; 80
     5c2:	90 41       	sbci	r25, 0x10	; 16
     5c4:	a9 f4       	brne	.+42     	; 0x5f0 <init_hdc1050+0x5a>
	 * 
	 * Heater enabled, Temperature or humidity is acuired,
	 * Battery voltage grater than 2V8, 14-bit resolution,
	 * 
	 */
	data[0] = 0x00;
     5c6:	19 82       	std	Y+1, r1	; 0x01
	data[1] = 0x00;
     5c8:	1a 82       	std	Y+2, r1	; 0x02
	
	if (i2c_write_reg(HDC1050_I2C_ADDRESS, HDC1050_REG_CONFIGURATION, data, 2))
     5ca:	22 e0       	ldi	r18, 0x02	; 2
     5cc:	ae 01       	movw	r20, r28
     5ce:	4f 5f       	subi	r20, 0xFF	; 255
     5d0:	5f 4f       	sbci	r21, 0xFF	; 255
     5d2:	62 e0       	ldi	r22, 0x02	; 2
     5d4:	80 e8       	ldi	r24, 0x80	; 128
     5d6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <i2c_write_reg>
     5da:	31 e0       	ldi	r19, 0x01	; 1
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	89 2b       	or	r24, r25
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <init_hdc1050+0x4e>
     5e2:	30 e0       	ldi	r19, 0x00	; 0
	
	uint8_t data[2];
	
	/* Verify device ID */
	if (i2c_read_reg(HDC1050_I2C_ADDRESS, HDC1050_REG_DEVICE_ID, data, 2))
		return EXIT_FAILURE;
     5e4:	83 2f       	mov	r24, r19
     5e6:	92 2f       	mov	r25, r18
     5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <init_hdc1050+0x5e>
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <init_hdc1050+0x5e>
		
	if (((data[0] << 8) | data[1])  != HDC1050_DEVICE_ID)
		return EXIT_FAILURE;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
	
	if (i2c_write_reg(HDC1050_I2C_ADDRESS, HDC1050_REG_CONFIGURATION, data, 2))
		return EXIT_FAILURE;	
	
	return EXIT_SUCCESS;
}
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <hdc1050_read_temperature>:

int hdc1050_read_temperature(uint8_t *temperature, uint8_t *temperature_decimal) {
     5fe:	8f 92       	push	r8
     600:	9f 92       	push	r9
     602:	af 92       	push	r10
     604:	bf 92       	push	r11
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	00 d0       	rcall	.+0      	; 0x618 <hdc1050_read_temperature+0x1a>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	6c 01       	movw	r12, r24
     61e:	7b 01       	movw	r14, r22

	uint8_t data[2];
	float temp;
	
	if (i2c_read_reg_10ms_delay(HDC1050_I2C_ADDRESS, HDC1050_REG_TEMPERATURE, data, 2))
     620:	22 e0       	ldi	r18, 0x02	; 2
     622:	ae 01       	movw	r20, r28
     624:	4f 5f       	subi	r20, 0xFF	; 255
     626:	5f 4f       	sbci	r21, 0xFF	; 255
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	80 e8       	ldi	r24, 0x80	; 128
     62c:	0e 94 14 02 	call	0x428	; 0x428 <i2c_read_reg_10ms_delay>
     630:	8c 01       	movw	r16, r24
     632:	89 2b       	or	r24, r25
     634:	59 f5       	brne	.+86     	; 0x68c <hdc1050_read_temperature+0x8e>
		return EXIT_FAILURE;
		
	temp = ((data[0] << 8) | data[1]) * 165UL;
     636:	a9 81       	ldd	r26, Y+1	; 0x01
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	ba 2f       	mov	r27, r26
     63c:	aa 27       	eor	r26, r26
     63e:	8a 81       	ldd	r24, Y+2	; 0x02
     640:	a8 2b       	or	r26, r24
     642:	25 ea       	ldi	r18, 0xA5	; 165
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	0e 94 90 0b 	call	0x1720	; 0x1720 <__usmulhisi3>
     64a:	0e 94 86 0a 	call	0x150c	; 0x150c <__floatunsisf>
	temp /= 0xffff;
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	3f ef       	ldi	r19, 0xFF	; 255
     652:	4f e7       	ldi	r20, 0x7F	; 127
     654:	57 e4       	ldi	r21, 0x47	; 71
     656:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__divsf3>
	temp -= 40;
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e2       	ldi	r20, 0x20	; 32
     660:	52 e4       	ldi	r21, 0x42	; 66
     662:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__subsf3>
     666:	4b 01       	movw	r8, r22
     668:	5c 01       	movw	r10, r24
	
	*temperature = (uint8_t)temp;
     66a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__fixunssfsi>
     66e:	f6 01       	movw	r30, r12
     670:	60 83       	st	Z, r22
	*temperature_decimal = (uint8_t)(temp * 10);
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	40 e2       	ldi	r20, 0x20	; 32
     678:	51 e4       	ldi	r21, 0x41	; 65
     67a:	c5 01       	movw	r24, r10
     67c:	b4 01       	movw	r22, r8
     67e:	0e 94 14 0b 	call	0x1628	; 0x1628 <__mulsf3>
     682:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__fixunssfsi>
     686:	f7 01       	movw	r30, r14
     688:	60 83       	st	Z, r22

	return EXIT_SUCCESS;
     68a:	02 c0       	rjmp	.+4      	; 0x690 <hdc1050_read_temperature+0x92>

	uint8_t data[2];
	float temp;
	
	if (i2c_read_reg_10ms_delay(HDC1050_I2C_ADDRESS, HDC1050_REG_TEMPERATURE, data, 2))
		return EXIT_FAILURE;
     68c:	01 e0       	ldi	r16, 0x01	; 1
     68e:	10 e0       	ldi	r17, 0x00	; 0
	
	*temperature = (uint8_t)temp;
	*temperature_decimal = (uint8_t)(temp * 10);

	return EXIT_SUCCESS;
}
     690:	c8 01       	movw	r24, r16
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	bf 90       	pop	r11
     6a8:	af 90       	pop	r10
     6aa:	9f 90       	pop	r9
     6ac:	8f 90       	pop	r8
     6ae:	08 95       	ret

000006b0 <hdc1050_read_humidity>:

int hdc1050_read_humidity(uint8_t *humidity) {
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	00 d0       	rcall	.+0      	; 0x6be <hdc1050_read_humidity+0xe>
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	7c 01       	movw	r14, r24
	
	uint8_t data[2];
	float hum;
	
	if (i2c_read_reg_10ms_delay(HDC1050_I2C_ADDRESS, HDC1050_REG_HUMIDITY, data, 2))
     6c4:	22 e0       	ldi	r18, 0x02	; 2
     6c6:	ae 01       	movw	r20, r28
     6c8:	4f 5f       	subi	r20, 0xFF	; 255
     6ca:	5f 4f       	sbci	r21, 0xFF	; 255
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	80 e8       	ldi	r24, 0x80	; 128
     6d0:	0e 94 14 02 	call	0x428	; 0x428 <i2c_read_reg_10ms_delay>
     6d4:	8c 01       	movw	r16, r24
     6d6:	89 2b       	or	r24, r25
     6d8:	b9 f4       	brne	.+46     	; 0x708 <hdc1050_read_humidity+0x58>
		return EXIT_FAILURE;
	
	hum = ((data[0] << 8) | data[1]) * 100UL;
     6da:	a9 81       	ldd	r26, Y+1	; 0x01
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	ba 2f       	mov	r27, r26
     6e0:	aa 27       	eor	r26, r26
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	a8 2b       	or	r26, r24
     6e6:	24 e6       	ldi	r18, 0x64	; 100
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	0e 94 90 0b 	call	0x1720	; 0x1720 <__usmulhisi3>
     6ee:	0e 94 86 0a 	call	0x150c	; 0x150c <__floatunsisf>
	hum /= 0xffff;
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	3f ef       	ldi	r19, 0xFF	; 255
     6f6:	4f e7       	ldi	r20, 0x7F	; 127
     6f8:	57 e4       	ldi	r21, 0x47	; 71
     6fa:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__divsf3>
	
	*humidity = (uint8_t)hum;
     6fe:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__fixunssfsi>
     702:	f7 01       	movw	r30, r14
     704:	60 83       	st	Z, r22
	
	return EXIT_SUCCESS;
     706:	02 c0       	rjmp	.+4      	; 0x70c <hdc1050_read_humidity+0x5c>
	
	uint8_t data[2];
	float hum;
	
	if (i2c_read_reg_10ms_delay(HDC1050_I2C_ADDRESS, HDC1050_REG_HUMIDITY, data, 2))
		return EXIT_FAILURE;
     708:	01 e0       	ldi	r16, 0x01	; 1
     70a:	10 e0       	ldi	r17, 0x00	; 0
	hum /= 0xffff;
	
	*humidity = (uint8_t)hum;
	
	return EXIT_SUCCESS;
     70c:	c8 01       	movw	r24, r16
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	08 95       	ret

00000720 <init_hardware>:
     720:	87 ea       	ldi	r24, 0xA7	; 167
     722:	91 e6       	ldi	r25, 0x61	; 97
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <init_hardware+0x4>
     728:	00 c0       	rjmp	.+0      	; 0x72a <init_hardware+0xa>
     72a:	00 00       	nop
	
	/* Wait for power to stabilize */
	_delay_ms(100);
	
	/* Indicator LED's */
	OUTPUT(LED_ORANGE);
     72c:	53 9a       	sbi	0x0a, 3	; 10
	OUTPUT(LED_BLUE);
     72e:	54 9a       	sbi	0x0a, 4	; 10
	
	/* Switch */
	INPUT(DOOR_BELL_SWITCH);
     730:	52 98       	cbi	0x0a, 2	; 10

	/* Radio connections */
	INPUT(NRF24L01_IRQ);
     732:	20 98       	cbi	0x04, 0	; 4
	OUTPUT(NRF24L01_CHIP_ENABLE);
     734:	22 9a       	sbi	0x04, 2	; 4
	LOW(NRF24L01_CHIP_ENABLE);
     736:	2a 98       	cbi	0x05, 2	; 5
	OUTPUT(NRF24L01_CHIP_SELECT);
     738:	21 9a       	sbi	0x04, 1	; 4
	HIGH(NRF24L01_CHIP_SELECT);
     73a:	29 9a       	sbi	0x05, 1	; 5
	
	/* SPI initialization */
	INPUT(SPI_MISO);
     73c:	24 98       	cbi	0x04, 4	; 4
	OUTPUT(SPI_MOSI);
     73e:	23 9a       	sbi	0x04, 3	; 4
	OUTPUT(SPI_SCK);	
     740:	25 9a       	sbi	0x04, 5	; 4
	
	if (spi_init())
     742:	0e 94 83 02 	call	0x506	; 0x506 <spi_init>
     746:	89 2b       	or	r24, r25
     748:	01 f5       	brne	.+64     	; 0x78a <init_hardware+0x6a>
		return EXIT_FAILURE;
	
	/* Redirecting STDIN and STDOUT to UART */
	if (uart_init())
     74a:	0e 94 a0 02 	call	0x540	; 0x540 <uart_init>
     74e:	89 2b       	or	r24, r25
     750:	f9 f4       	brne	.+62     	; 0x790 <init_hardware+0x70>
		return EXIT_FAILURE;
	stdout = &uart_output;
     752:	e5 e2       	ldi	r30, 0x25	; 37
     754:	f2 e0       	ldi	r31, 0x02	; 2
     756:	8e e0       	ldi	r24, 0x0E	; 14
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	93 83       	std	Z+3, r25	; 0x03
     75c:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	91 83       	std	Z+1, r25	; 0x01
     764:	80 83       	st	Z, r24
	
	/* I2C initialization */
	if (i2c_init())
     766:	0e 94 74 01 	call	0x2e8	; 0x2e8 <i2c_init>
     76a:	89 2b       	or	r24, r25
     76c:	a1 f4       	brne	.+40     	; 0x796 <init_hardware+0x76>
		return EXIT_FAILURE;
	
	if (init_hdc1050())
     76e:	0e 94 cb 02 	call	0x596	; 0x596 <init_hdc1050>
     772:	89 2b       	or	r24, r25
     774:	99 f4       	brne	.+38     	; 0x79c <init_hardware+0x7c>
		return EXIT_FAILURE;
	
	/* Set up interrupts */
	if (init_interrupts())
     776:	0e 94 76 02 	call	0x4ec	; 0x4ec <init_interrupts>
     77a:	31 e0       	ldi	r19, 0x01	; 1
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	89 2b       	or	r24, r25
     780:	09 f4       	brne	.+2      	; 0x784 <init_hardware+0x64>
     782:	30 e0       	ldi	r19, 0x00	; 0
	INPUT(SPI_MISO);
	OUTPUT(SPI_MOSI);
	OUTPUT(SPI_SCK);	
	
	if (spi_init())
		return EXIT_FAILURE;
     784:	83 2f       	mov	r24, r19
     786:	92 2f       	mov	r25, r18
     788:	08 95       	ret
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	08 95       	ret
	
	/* Redirecting STDIN and STDOUT to UART */
	if (uart_init())
		return EXIT_FAILURE;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	08 95       	ret
	stdout = &uart_output;
	stdin = &uart_input;
	
	/* I2C initialization */
	if (i2c_init())
		return EXIT_FAILURE;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	08 95       	ret
	
	if (init_hdc1050())
		return EXIT_FAILURE;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
	/* Set up interrupts */
	if (init_interrupts())
		return EXIT_FAILURE;
		
	return EXIT_SUCCESS;
}
     7a0:	08 95       	ret

000007a2 <enable_graphic_display>:
	}
}

static void enable_graphic_display(void) {
	
	OUTPUT(LCD_CHIP_SELECT);
     7a2:	3a 9a       	sbi	0x07, 2	; 7
	OUTPUT(LCD_RESET);
     7a4:	39 9a       	sbi	0x07, 1	; 7
	OUTPUT(LCD_A0);
     7a6:	38 9a       	sbi	0x07, 0	; 7
	OUTPUT(LCD_BACKLIGHT);
     7a8:	56 9a       	sbi	0x0a, 6	; 10
	st7565r_init();
     7aa:	0e 94 42 06 	call	0xc84	; 0xc84 <st7565r_init>
	graphic_lcd_clear_screen();
     7ae:	0e 94 64 05 	call	0xac8	; 0xac8 <graphic_lcd_clear_screen>
	graphic_lcd_write(1, 0, "hello ism transceiver!");
     7b2:	41 e2       	ldi	r20, 0x21	; 33
     7b4:	51 e0       	ldi	r21, 0x01	; 1
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 89 05 	call	0xb12	; 0xb12 <graphic_lcd_write>
	LCD_BACKLIGHT_ON();
     7c2:	5e 9a       	sbi	0x0b, 6	; 11
     7c4:	08 95       	ret

000007c6 <display_local_temperature_and_humidity>:
}

static void display_local_temperature_and_humidity(void) {
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	a1 97       	sbiw	r28, 0x21	; 33
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61

	uint8_t data[3];
	char display_buffer[30]; 

	if (hdc1050_read_temperature(&data[0], &data[1]))
     7de:	be 01       	movw	r22, r28
     7e0:	6e 5f       	subi	r22, 0xFE	; 254
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <hdc1050_read_temperature>
     7ec:	89 2b       	or	r24, r25
     7ee:	21 f0       	breq	.+8      	; 0x7f8 <display_local_temperature_and_humidity+0x32>
		puts("failed reading temperature");
     7f0:	88 e3       	ldi	r24, 0x38	; 56
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 ad 0b 	call	0x175a	; 0x175a <puts>
	if (hdc1050_read_humidity(&data[2]))
     7f8:	ce 01       	movw	r24, r28
     7fa:	03 96       	adiw	r24, 0x03	; 3
     7fc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <hdc1050_read_humidity>
     800:	89 2b       	or	r24, r25
     802:	21 f0       	breq	.+8      	; 0x80c <display_local_temperature_and_humidity+0x46>
		puts("failed reading humidity");	
     804:	83 e5       	ldi	r24, 0x53	; 83
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 ad 0b 	call	0x175a	; 0x175a <puts>
	sprintf(display_buffer, "local:  %d,%dC %d%%", data[0], data[1], data[2]);
     80c:	8b 81       	ldd	r24, Y+3	; 0x03
     80e:	1f 92       	push	r1
     810:	8f 93       	push	r24
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	1f 92       	push	r1
     816:	8f 93       	push	r24
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	1f 92       	push	r1
     81c:	8f 93       	push	r24
     81e:	8b e6       	ldi	r24, 0x6B	; 107
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	8e 01       	movw	r16, r28
     828:	0c 5f       	subi	r16, 0xFC	; 252
     82a:	1f 4f       	sbci	r17, 0xFF	; 255
     82c:	1f 93       	push	r17
     82e:	0f 93       	push	r16
     830:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <sprintf>
	graphic_lcd_clear_screen();														 
     834:	0e 94 64 05 	call	0xac8	; 0xac8 <graphic_lcd_clear_screen>
	graphic_lcd_write(0, 0, display_buffer);
     838:	a8 01       	movw	r20, r16
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 89 05 	call	0xb12	; 0xb12 <graphic_lcd_write>
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
}
     850:	a1 96       	adiw	r28, 0x21	; 33
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	08 95       	ret

00000866 <main>:


int main (void) {
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	a3 97       	sbiw	r28, 0x23	; 35
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
	   
	uint8_t radio_address[] = { 0xeb, 0x01, 0xeb, 0x02, 0xeb }; 
     87a:	85 e0       	ldi	r24, 0x05	; 5
     87c:	ec e1       	ldi	r30, 0x1C	; 28
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	de 01       	movw	r26, r28
     882:	11 96       	adiw	r26, 0x01	; 1
     884:	01 90       	ld	r0, Z+
     886:	0d 92       	st	X+, r0
     888:	8a 95       	dec	r24
     88a:	e1 f7       	brne	.-8      	; 0x884 <main+0x1e>
	   
	/* Toggle LED if hardware initialization failed */
	if (init_hardware())
     88c:	0e 94 90 03 	call	0x720	; 0x720 <init_hardware>
     890:	89 2b       	or	r24, r25
     892:	79 f0       	breq	.+30     	; 0x8b2 <main+0x4c>
/* Radio payload */
uint8_t pload_pl[RF_PAYLOAD_LENGTH];

static void error(void) {
	while(true) {
		TOGGLE(LED_ORANGE);
     894:	28 e0       	ldi	r18, 0x08	; 8
		TOGGLE(LED_BLUE);
     896:	90 e1       	ldi	r25, 0x10	; 16
/* Radio payload */
uint8_t pload_pl[RF_PAYLOAD_LENGTH];

static void error(void) {
	while(true) {
		TOGGLE(LED_ORANGE);
     898:	8b b1       	in	r24, 0x0b	; 11
     89a:	82 27       	eor	r24, r18
     89c:	8b b9       	out	0x0b, r24	; 11
		TOGGLE(LED_BLUE);
     89e:	8b b1       	in	r24, 0x0b	; 11
     8a0:	89 27       	eor	r24, r25
     8a2:	8b b9       	out	0x0b, r24	; 11
     8a4:	e3 ed       	ldi	r30, 0xD3	; 211
     8a6:	f0 e3       	ldi	r31, 0x30	; 48
     8a8:	31 97       	sbiw	r30, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <main+0x42>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <main+0x48>
     8ae:	00 00       	nop
     8b0:	f3 cf       	rjmp	.-26     	; 0x898 <main+0x32>
	/* Toggle LED if hardware initialization failed */
	if (init_hardware())
		error();
			
	/* Enable interrupts */
	sei();	
     8b2:	78 94       	sei

	LED_ORANGE_ON();
     8b4:	5b 9a       	sbi	0x0b, 3	; 11
	
	/* Radio test if swithc is pressed at power up */
	if (READ(DOOR_BELL_SWITCH) == 0) {
     8b6:	4a 99       	sbic	0x09, 2	; 9
     8b8:	45 c0       	rjmp	.+138    	; 0x944 <__stack+0x45>
     8ba:	87 ea       	ldi	r24, 0xA7	; 167
     8bc:	91 e6       	ldi	r25, 0x61	; 97
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <main+0x58>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <main+0x5e>
     8c4:	00 00       	nop
		
		_delay_ms(100);
		
		if (READ(DOOR_BELL_SWITCH) == 0) {		
     8c6:	4a 99       	sbic	0x09, 2	; 9
     8c8:	3d c0       	rjmp	.+122    	; 0x944 <__stack+0x45>
			
			#ifdef CONCENTRATOR_BOARD
				enable_graphic_display();
     8ca:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <enable_graphic_display>
				graphic_lcd_write(0, 0, "Test mode:");
     8ce:	4f e7       	ldi	r20, 0x7F	; 127
     8d0:	51 e0       	ldi	r21, 0x01	; 1
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 89 05 	call	0xb12	; 0xb12 <graphic_lcd_write>
				graphic_lcd_write(1, 0, "Constant carrier");
     8de:	4a e8       	ldi	r20, 0x8A	; 138
     8e0:	51 e0       	ldi	r21, 0x01	; 1
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 89 05 	call	0xb12	; 0xb12 <graphic_lcd_write>
				graphic_lcd_write(2, 0, "F0 = 2402MHz");
     8ee:	4b e9       	ldi	r20, 0x9B	; 155
     8f0:	51 e0       	ldi	r21, 0x01	; 1
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 89 05 	call	0xb12	; 0xb12 <graphic_lcd_write>
				graphic_lcd_write(3, 0, "RF power = 0dBm");
     8fe:	48 ea       	ldi	r20, 0xA8	; 168
     900:	51 e0       	ldi	r21, 0x01	; 1
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 89 05 	call	0xb12	; 0xb12 <graphic_lcd_write>
			#endif
			
			LED_BLUE_ON();			
     90e:	5c 9a       	sbi	0x0b, 4	; 11
			LED_ORANGE_ON();			
     910:	5b 9a       	sbi	0x0b, 3	; 11
			
			hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	0e 94 96 07 	call	0xf2c	; 0xf2c <hal_nrf_set_power_mode>
     918:	e3 ec       	ldi	r30, 0xC3	; 195
     91a:	f9 e0       	ldi	r31, 0x09	; 9
     91c:	31 97       	sbiw	r30, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <__stack+0x1d>
     920:	00 c0       	rjmp	.+0      	; 0x922 <__stack+0x23>
     922:	00 00       	nop
			_delay_ms(10);
			
			hal_nrf_set_operation_mode(HAL_NRF_PTX);
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 82 07 	call	0xf04	; 0xf04 <hal_nrf_set_operation_mode>
			hal_nrf_set_pll_mode(HAL_NRF_PLL_LOCK);
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	0e 94 de 07 	call	0xfbc	; 0xfbc <hal_nrf_set_pll_mode>
			
			#define CONTINOUS_WAVE 7
			hal_nrf_write_reg(RF_SETUP, (hal_nrf_read_reg(RF_SETUP) | (1<<CONTINOUS_WAVE)));
     930:	86 e0       	ldi	r24, 0x06	; 6
     932:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     936:	68 2f       	mov	r22, r24
     938:	60 68       	ori	r22, 0x80	; 128
     93a:	86 e0       	ldi	r24, 0x06	; 6
     93c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
			
			HIGH(NRF24L01_CHIP_ENABLE);
     940:	2a 9a       	sbi	0x05, 2	; 5
			
			for(;;);
     942:	ff cf       	rjmp	.-2      	; 0x942 <__stack+0x43>
		}
	}
	
	#ifdef CONCENTRATOR_BOARD
	
		puts("concentrator board");
     944:	88 eb       	ldi	r24, 0xB8	; 184
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 ad 0b 	call	0x175a	; 0x175a <puts>
		enable_graphic_display();
     94c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <enable_graphic_display>
		display_local_temperature_and_humidity();
     950:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <display_local_temperature_and_humidity>
		
		/* Enable radio in RX mode with payload in acknowledge */
		radio_pl_init (radio_address, HAL_NRF_PRX);
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <radio_pl_init>
	uint8_t data[3];
	char display_buffer[30];
	bool update_display = false;
		
	/* Enable receiver */
	HIGH(NRF24L01_CHIP_ENABLE);
     95e:	2a 9a       	sbi	0x05, 2	; 5
static void radio_receiver_mode(void) {

	int radio_timeout_count_down = 0;
	uint8_t data[3];
	char display_buffer[30];
	bool update_display = false;
     960:	61 2c       	mov	r6, r1
	HIGH(NRF24L01_CHIP_ENABLE);

	while(true)	{
		
		/* Setup and put the ACK payload on the FIFO */
		pload_pl[0] = 0;
     962:	0f 2e       	mov	r0, r31
     964:	fb e1       	ldi	r31, 0x1B	; 27
     966:	ef 2e       	mov	r14, r31
     968:	f2 e0       	ldi	r31, 0x02	; 2
     96a:	ff 2e       	mov	r15, r31
     96c:	f0 2d       	mov	r31, r0

		/* If door bell switch is pressed */
		if (READ(DOOR_BELL_SWITCH) == 0)
			pload_pl[0] = 1;
     96e:	77 24       	eor	r7, r7
     970:	73 94       	inc	r7

		hal_nrf_write_ack_pload (0, pload_pl, RF_PAYLOAD_LENGTH);
     972:	0f 2e       	mov	r0, r31
     974:	fc e0       	ldi	r31, 0x0C	; 12
     976:	4f 2e       	mov	r4, r31
     978:	f0 2d       	mov	r31, r0
     97a:	51 2c       	mov	r5, r1
			if (radio_get_pload_byte(0))
				LED_ORANGE_ON();
				
			if (update_display) {
				update_display = false;	
				sprintf(display_buffer, "sensor: %d,%dC %d%%", radio_get_pload_byte(1), radio_get_pload_byte(2), radio_get_pload_byte(3));
     97c:	0f 2e       	mov	r0, r31
     97e:	fb ec       	ldi	r31, 0xCB	; 203
     980:	8f 2e       	mov	r8, r31
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	9f 2e       	mov	r9, r31
     986:	f0 2d       	mov	r31, r0
     988:	6e 01       	movw	r12, r28
     98a:	f6 e0       	ldi	r31, 0x06	; 6
     98c:	cf 0e       	add	r12, r31
     98e:	d1 1c       	adc	r13, r1
				graphic_lcd_write(2, 0, display_buffer);
			
				if (radio_get_pload_byte(0))
					graphic_lcd_write(3, 0, "hello!");
				
				printf("data %d %d %d %d\n", radio_get_pload_byte(0), radio_get_pload_byte(1), radio_get_pload_byte(2), radio_get_pload_byte(3));
     990:	0f 2e       	mov	r0, r31
     992:	f6 ee       	ldi	r31, 0xE6	; 230
     994:	af 2e       	mov	r10, r31
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	bf 2e       	mov	r11, r31
     99a:	f0 2d       	mov	r31, r0
	HIGH(NRF24L01_CHIP_ENABLE);

	while(true)	{
		
		/* Setup and put the ACK payload on the FIFO */
		pload_pl[0] = 0;
     99c:	f7 01       	movw	r30, r14
     99e:	10 82       	st	Z, r1

		/* If door bell switch is pressed */
		if (READ(DOOR_BELL_SWITCH) == 0)
     9a0:	4a 9b       	sbis	0x09, 2	; 9
			pload_pl[0] = 1;
     9a2:	70 82       	st	Z, r7

		hal_nrf_write_ack_pload (0, pload_pl, RF_PAYLOAD_LENGTH);
     9a4:	4a e0       	ldi	r20, 0x0A	; 10
     9a6:	b7 01       	movw	r22, r14
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0e 94 73 06 	call	0xce6	; 0xce6 <hal_nrf_write_ack_pload>
     9ae:	04 2d       	mov	r16, r4
     9b0:	15 2d       	mov	r17, r5
     9b2:	83 ec       	ldi	r24, 0xC3	; 195
     9b4:	99 e0       	ldi	r25, 0x09	; 9
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <__stack+0xb7>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <__stack+0xbd>
     9bc:	00 00       	nop
		 * OR there is data on the radio
		 */
		radio_timeout_count_down = 11;
		do {
			_delay_ms(10);
			radio_irq ();
     9be:	0e 94 c8 08 	call	0x1190	; 0x1190 <radio_irq>
				
		} while ((radio_get_status () == RF_IDLE) && radio_timeout_count_down--);
     9c2:	0e 94 bc 08 	call	0x1178	; 0x1178 <radio_get_status>
     9c6:	81 11       	cpse	r24, r1
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__stack+0xd1>
     9ca:	01 50       	subi	r16, 0x01	; 1
     9cc:	11 09       	sbc	r17, r1
     9ce:	89 f7       	brne	.-30     	; 0x9b2 <__stack+0xb3>

		/* Set blue LED if data is sent, or acknowledge payload is received */
		if ((radio_get_status ()) == RF_TX_DS || (radio_get_status ()) == RF_TX_AP)
     9d0:	0e 94 bc 08 	call	0x1178	; 0x1178 <radio_get_status>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__stack+0xe1>
     9d8:	0e 94 bc 08 	call	0x1178	; 0x1178 <radio_get_status>
     9dc:	84 30       	cpi	r24, 0x04	; 4
     9de:	09 f4       	brne	.+2      	; 0x9e2 <__stack+0xe3>
			LED_BLUE_ON();
     9e0:	5c 9a       	sbi	0x0b, 4	; 11

		if ((radio_get_status ()) == RF_RX_DR || (radio_get_status ()) == RF_TX_AP)	{
     9e2:	0e 94 bc 08 	call	0x1178	; 0x1178 <radio_get_status>
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	29 f0       	breq	.+10     	; 0x9f4 <__stack+0xf5>
     9ea:	0e 94 bc 08 	call	0x1178	; 0x1178 <radio_get_status>
     9ee:	84 30       	cpi	r24, 0x04	; 4
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__stack+0xf5>
     9f2:	58 c0       	rjmp	.+176    	; 0xaa4 <__stack+0x1a5>
			
			/* If payload is one, DOOR_BELL_SWITCH on transmitter side was pushed */
			if (radio_get_pload_byte(0))
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	0e 94 bf 08 	call	0x117e	; 0x117e <radio_get_pload_byte>
     9fa:	81 11       	cpse	r24, r1
				LED_ORANGE_ON();
     9fc:	5b 9a       	sbi	0x0b, 3	; 11
				
			if (update_display) {
     9fe:	66 20       	and	r6, r6
     a00:	09 f4       	brne	.+2      	; 0xa04 <__stack+0x105>
     a02:	50 c0       	rjmp	.+160    	; 0xaa4 <__stack+0x1a5>
				update_display = false;	
				sprintf(display_buffer, "sensor: %d,%dC %d%%", radio_get_pload_byte(1), radio_get_pload_byte(2), radio_get_pload_byte(3));
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	0e 94 bf 08 	call	0x117e	; 0x117e <radio_get_pload_byte>
     a0a:	08 2f       	mov	r16, r24
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	0e 94 bf 08 	call	0x117e	; 0x117e <radio_get_pload_byte>
     a12:	18 2f       	mov	r17, r24
     a14:	87 2d       	mov	r24, r7
     a16:	0e 94 bf 08 	call	0x117e	; 0x117e <radio_get_pload_byte>
     a1a:	1f 92       	push	r1
     a1c:	0f 93       	push	r16
     a1e:	1f 92       	push	r1
     a20:	1f 93       	push	r17
     a22:	1f 92       	push	r1
     a24:	8f 93       	push	r24
     a26:	9f 92       	push	r9
     a28:	8f 92       	push	r8
     a2a:	df 92       	push	r13
     a2c:	cf 92       	push	r12
     a2e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <sprintf>
				graphic_lcd_write(2, 0, display_buffer);
     a32:	a6 01       	movw	r20, r12
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 89 05 	call	0xb12	; 0xb12 <graphic_lcd_write>
			
				if (radio_get_pload_byte(0))
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 bf 08 	call	0x117e	; 0x117e <radio_get_pload_byte>
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	88 23       	and	r24, r24
     a52:	41 f0       	breq	.+16     	; 0xa64 <__stack+0x165>
					graphic_lcd_write(3, 0, "hello!");
     a54:	4f ed       	ldi	r20, 0xDF	; 223
     a56:	51 e0       	ldi	r21, 0x01	; 1
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 89 05 	call	0xb12	; 0xb12 <graphic_lcd_write>
				
				printf("data %d %d %d %d\n", radio_get_pload_byte(0), radio_get_pload_byte(1), radio_get_pload_byte(2), radio_get_pload_byte(3));
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	0e 94 bf 08 	call	0x117e	; 0x117e <radio_get_pload_byte>
     a6a:	68 2e       	mov	r6, r24
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	0e 94 bf 08 	call	0x117e	; 0x117e <radio_get_pload_byte>
     a72:	08 2f       	mov	r16, r24
     a74:	87 2d       	mov	r24, r7
     a76:	0e 94 bf 08 	call	0x117e	; 0x117e <radio_get_pload_byte>
     a7a:	18 2f       	mov	r17, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	0e 94 bf 08 	call	0x117e	; 0x117e <radio_get_pload_byte>
     a82:	1f 92       	push	r1
     a84:	6f 92       	push	r6
     a86:	1f 92       	push	r1
     a88:	0f 93       	push	r16
     a8a:	1f 92       	push	r1
     a8c:	1f 93       	push	r17
     a8e:	1f 92       	push	r1
     a90:	8f 93       	push	r24
     a92:	bf 92       	push	r11
     a94:	af 92       	push	r10
     a96:	0e 94 97 0b 	call	0x172e	; 0x172e <printf>
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
			}
		}

		/* Set radio status to idle */
		radio_set_status (RF_IDLE);
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 c5 08 	call	0x118a	; 0x118a <radio_set_status>
     aaa:	3f e9       	ldi	r19, 0x9F	; 159
     aac:	86 e8       	ldi	r24, 0x86	; 134
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	31 50       	subi	r19, 0x01	; 1
     ab2:	80 40       	sbci	r24, 0x00	; 0
     ab4:	90 40       	sbci	r25, 0x00	; 0
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <__stack+0x1b1>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <__stack+0x1bb>
     aba:	00 00       	nop
		
		_delay_ms(500);
		LED_BLUE_OFF();
     abc:	5c 98       	cbi	0x0b, 4	; 11
		LED_ORANGE_OFF();
     abe:	5b 98       	cbi	0x0b, 3	; 11
		
		update_display = true;
		display_local_temperature_and_humidity();
     ac0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <display_local_temperature_and_humidity>
		
		_delay_ms(500);
		LED_BLUE_OFF();
		LED_ORANGE_OFF();
		
		update_display = true;
     ac4:	67 2c       	mov	r6, r7
     ac6:	6a cf       	rjmp	.-300    	; 0x99c <__stack+0x9d>

00000ac8 <graphic_lcd_clear_screen>:
#include "../ism_tranceiver.h"
#include "graphic_lcd.h"
#include "st7565r.h"
#include "font.h"

int graphic_lcd_clear_screen(void) {
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	10 e0       	ldi	r17, 0x00	; 0
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
		st7565r_set_page_address(i);
		st7565r_set_column_address(0);
		st7565r_set_display_start_line_address(0);
     ad4:	68 94       	set
     ad6:	ff 24       	eor	r15, r15
     ad8:	f7 f8       	bld	r15, 7
     ada:	00 e0       	ldi	r16, 0x00	; 0
int graphic_lcd_clear_screen(void) {
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
		st7565r_set_page_address(i);
     adc:	81 2f       	mov	r24, r17
     ade:	0e 94 0d 06 	call	0xc1a	; 0xc1a <st7565r_set_page_address>
		st7565r_set_column_address(0);
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 12 06 	call	0xc24	; 0xc24 <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	0e 94 22 06 	call	0xc44	; 0xc44 <st7565r_set_display_start_line_address>
     aee:	cf 2d       	mov	r28, r15
     af0:	d0 2f       	mov	r29, r16
		for (j=0; j<LINE_PIXEL_LENGHT; j++)
			st7565r_write_data(0);
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <st7565r_write_data>
     af8:	21 97       	sbiw	r28, 0x01	; 1
	
	for (i=0; i<LINE_COUNT; i++) {
		st7565r_set_page_address(i);
		st7565r_set_column_address(0);
		st7565r_set_display_start_line_address(0);
		for (j=0; j<LINE_PIXEL_LENGHT; j++)
     afa:	d9 f7       	brne	.-10     	; 0xaf2 <graphic_lcd_clear_screen+0x2a>
     afc:	1f 5f       	subi	r17, 0xFF	; 255

int graphic_lcd_clear_screen(void) {
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
     afe:	14 30       	cpi	r17, 0x04	; 4
     b00:	69 f7       	brne	.-38     	; 0xadc <graphic_lcd_clear_screen+0x14>
		for (j=0; j<LINE_PIXEL_LENGHT; j++)
			st7565r_write_data(0);
	}
	
	return EXIT_SUCCESS;
}
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	08 95       	ret

00000b12 <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
     b12:	af 92       	push	r10
     b14:	bf 92       	push	r11
     b16:	cf 92       	push	r12
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	c6 2f       	mov	r28, r22
     b28:	6a 01       	movw	r12, r20

	int i, j;
	
	st7565r_set_page_address(line);
     b2a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <st7565r_set_page_address>
	st7565r_set_column_address(offset);
     b2e:	8c 2f       	mov	r24, r28
     b30:	0e 94 12 06 	call	0xc24	; 0xc24 <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
     b34:	e1 2c       	mov	r14, r1
     b36:	f1 2c       	mov	r15, r1
     b38:	a1 2c       	mov	r10, r1
     b3a:	b1 2c       	mov	r11, r1
     b3c:	20 c0       	rjmp	.+64     	; 0xb7e <graphic_lcd_write+0x6c>
     b3e:	ca 2d       	mov	r28, r10
     b40:	db 2d       	mov	r29, r11
     b42:	0c 0d       	add	r16, r12
     b44:	1d 1d       	adc	r17, r13
	
		for (j=0; j<FONT_SIZE; j++) {
			st7565r_write_data(pgm_read_byte(font_5x8_table + \
     b46:	f8 01       	movw	r30, r16
     b48:	80 81       	ld	r24, Z
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	80 97       	sbiw	r24, 0x20	; 32
     b4e:	fc 01       	movw	r30, r24
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	e8 0f       	add	r30, r24
     b5a:	f9 1f       	adc	r31, r25
     b5c:	ec 0f       	add	r30, r28
     b5e:	fd 1f       	adc	r31, r29
     b60:	e8 59       	subi	r30, 0x98	; 152
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	84 91       	lpm	r24, Z
     b66:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <st7565r_write_data>
	st7565r_set_page_address(line);
	st7565r_set_column_address(offset);
	
	for (i=0; i<strlen(text); i++) {
	
		for (j=0; j<FONT_SIZE; j++) {
     b6a:	21 96       	adiw	r28, 0x01	; 1
     b6c:	c5 30       	cpi	r28, 0x05	; 5
     b6e:	d1 05       	cpc	r29, r1
     b70:	51 f7       	brne	.-44     	; 0xb46 <graphic_lcd_write+0x34>
			st7565r_write_data(pgm_read_byte(font_5x8_table + \
			                    (((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j) \
							  )); 
		}
		st7565r_write_data(0);
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <st7565r_write_data>
	int i, j;
	
	st7565r_set_page_address(line);
	st7565r_set_column_address(offset);
	
	for (i=0; i<strlen(text); i++) {
     b78:	ff ef       	ldi	r31, 0xFF	; 255
     b7a:	ef 1a       	sub	r14, r31
     b7c:	ff 0a       	sbc	r15, r31
     b7e:	87 01       	movw	r16, r14
     b80:	f6 01       	movw	r30, r12
     b82:	01 90       	ld	r0, Z+
     b84:	00 20       	and	r0, r0
     b86:	e9 f7       	brne	.-6      	; 0xb82 <graphic_lcd_write+0x70>
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	ec 19       	sub	r30, r12
     b8c:	fd 09       	sbc	r31, r13
     b8e:	ee 16       	cp	r14, r30
     b90:	ff 06       	cpc	r15, r31
     b92:	a8 f2       	brcs	.-86     	; 0xb3e <graphic_lcd_write+0x2c>
		}
		st7565r_write_data(0);
	}
		
	return EXIT_SUCCESS;
}
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	08 95       	ret

00000bae <st7565r_write_command>:
#include "../ism_tranceiver.h"
#include "../avr/spi.h"

#include "st7565r.h"

void st7565r_write_command(uint8_t command) {
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	1f 92       	push	r1
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	89 83       	std	Y+1, r24	; 0x01

		spi_mode3();
     bba:	0e 94 8f 02 	call	0x51e	; 0x51e <spi_mode3>
        LOW(LCD_CHIP_SELECT);
     bbe:	42 98       	cbi	0x08, 2	; 8
        LOW(LCD_A0);
     bc0:	40 98       	cbi	0x08, 0	; 8
		spi_transmit(&command);
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	0e 94 94 02 	call	0x528	; 0x528 <spi_transmit>
        HIGH(LCD_CHIP_SELECT);
     bca:	42 9a       	sbi	0x08, 2	; 8
}
     bcc:	0f 90       	pop	r0
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	1f 92       	push	r1
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	89 83       	std	Y+1, r24	; 0x01
	
		spi_mode3();
     be0:	0e 94 8f 02 	call	0x51e	; 0x51e <spi_mode3>
        LOW(LCD_CHIP_SELECT);
     be4:	42 98       	cbi	0x08, 2	; 8
        HIGH(LCD_A0);
     be6:	40 9a       	sbi	0x08, 0	; 8
		spi_transmit(&data);
     be8:	ce 01       	movw	r24, r28
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	0e 94 94 02 	call	0x528	; 0x528 <spi_transmit>
        LOW(LCD_A0);
     bf0:	40 98       	cbi	0x08, 0	; 8
        HIGH(LCD_CHIP_SELECT);
     bf2:	42 9a       	sbi	0x08, 2	; 8
}
     bf4:	0f 90       	pop	r0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <st7565r_hard_reset>:
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
	
        LOW(LCD_RESET);
     bfc:	41 98       	cbi	0x08, 1	; 8
     bfe:	87 ea       	ldi	r24, 0xA7	; 167
     c00:	91 e6       	ldi	r25, 0x61	; 97
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <st7565r_hard_reset+0x6>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <st7565r_hard_reset+0xc>
     c08:	00 00       	nop
        _delay_ms(100);
        HIGH(LCD_RESET);
     c0a:	41 9a       	sbi	0x08, 1	; 8
     c0c:	87 ea       	ldi	r24, 0xA7	; 167
     c0e:	91 e6       	ldi	r25, 0x61	; 97
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <st7565r_hard_reset+0x14>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <st7565r_hard_reset+0x1a>
     c16:	00 00       	nop
     c18:	08 95       	ret

00000c1a <st7565r_set_page_address>:
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
     c1a:	8f 70       	andi	r24, 0x0F	; 15
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     c1c:	80 6b       	ori	r24, 0xB0	; 176
     c1e:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>
     c22:	08 95       	ret

00000c24 <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
     c24:	cf 93       	push	r28
     c26:	c8 2f       	mov	r28, r24
        // Make sure the address is 7 bits
        address &= 0x7F;
     c28:	98 2f       	mov	r25, r24
     c2a:	9f 77       	andi	r25, 0x7F	; 127
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     c2c:	89 2f       	mov	r24, r25
     c2e:	82 95       	swap	r24
     c30:	8f 70       	andi	r24, 0x0F	; 15
     c32:	80 61       	ori	r24, 0x10	; 16
     c34:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     c38:	8c 2f       	mov	r24, r28
     c3a:	8f 70       	andi	r24, 0x0F	; 15
     c3c:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>
}
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <st7565r_set_display_start_line_address>:
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
        // Make sure address is 6 bits
        address &= 0x3F;
     c44:	8f 73       	andi	r24, 0x3F	; 63
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
     c46:	80 64       	ori	r24, 0x40	; 64
     c48:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>
     c4c:	08 95       	ret

00000c4e <st7565r_display_on>:
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
     c4e:	8f ea       	ldi	r24, 0xAF	; 175
     c50:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>
     c54:	08 95       	ret

00000c56 <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
     c56:	cf 93       	push	r28
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
     c58:	8e 31       	cpi	r24, 0x1E	; 30
     c5a:	08 f4       	brcc	.+2      	; 0xc5e <st7565r_set_contrast+0x8>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
     c5c:	8e e1       	ldi	r24, 0x1E	; 30
     c5e:	c8 2f       	mov	r28, r24
     c60:	89 32       	cpi	r24, 0x29	; 41
     c62:	08 f0       	brcs	.+2      	; 0xc66 <st7565r_set_contrast+0x10>
     c64:	c8 e2       	ldi	r28, 0x28	; 40
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
     c66:	81 e8       	ldi	r24, 0x81	; 129
     c68:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
     c6c:	8c 2f       	mov	r24, r28
     c6e:	80 95       	com	r24
     c70:	8f 73       	andi	r24, 0x3F	; 63
     c72:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>
        return contrast;
}
     c76:	8c 2f       	mov	r24, r28
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <st7565r_display_invert_disable>:
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
     c7c:	86 ea       	ldi	r24, 0xA6	; 166
     c7e:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>
     c82:	08 95       	ret

00000c84 <st7565r_init>:
}

void st7565r_init(void)
{
        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
     c84:	0e 94 fe 05 	call	0xbfc	; 0xbfc <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        LOW(LCD_A0);
     c88:	40 98       	cbi	0x08, 0	; 8

        // The column address is set to increasing
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
     c8a:	80 ea       	ldi	r24, 0xA0	; 160
     c8c:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
     c90:	0e 94 3e 06 	call	0xc7c	; 0xc7c <st7565r_display_invert_disable>

        // The common mode scan direction is reversed COM31->COM0
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
     c94:	88 ec       	ldi	r24, 0xC8	; 200
     c96:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
     c9a:	82 ea       	ldi	r24, 0xA2	; 162
     c9c:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
     ca0:	8f e2       	ldi	r24, 0x2F	; 47
     ca2:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
     ca6:	88 ef       	ldi	r24, 0xF8	; 248
     ca8:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
     cb2:	81 e2       	ldi	r24, 0x21	; 33
     cb4:	0e 94 d7 05 	call	0xbae	; 0xbae <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
     cb8:	8e e1       	ldi	r24, 0x1E	; 30
     cba:	0e 94 2b 06 	call	0xc56	; 0xc56 <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
     cbe:	0e 94 27 06 	call	0xc4e	; 0xc4e <st7565r_display_on>
     cc2:	08 95       	ret

00000cc4 <hal_nrf_rw>:

#include "../ism_tranceiver.h"
#include "../avr/spi.h"

uint8_t hal_nrf_rw(uint8_t value)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	1f 92       	push	r1
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
	spi_mode0();
     cd0:	0e 94 8a 02 	call	0x514	; 0x514 <spi_mode0>
	uint8_t *data = &value;
	spi_transmit(data);
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 94 02 	call	0x528	; 0x528 <spi_transmit>
	return *data;
}
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	0f 90       	pop	r0
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <hal_nrf_write_ack_pload>:
{
  hal_nrf_write_reg(FEATURE, (hal_nrf_read_reg(FEATURE) & ~0x01));   
}

void hal_nrf_write_ack_pload(uint8_t pipe, uint8_t *tx_pload, uint8_t length)
{
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	7b 01       	movw	r14, r22
     cf4:	c4 2f       	mov	r28, r20
  CSN_LOW();
     cf6:	29 98       	cbi	0x05, 1	; 5

  hal_nrf_rw(WR_ACK_PLOAD | pipe);
     cf8:	88 6a       	ori	r24, 0xA8	; 168
     cfa:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
  while(length--)
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	8c 0f       	add	r24, r28
     d02:	cc 23       	and	r28, r28
     d04:	69 f0       	breq	.+26     	; 0xd20 <hal_nrf_write_ack_pload+0x3a>
     d06:	e7 01       	movw	r28, r14
     d08:	08 2f       	mov	r16, r24
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	0f 5f       	subi	r16, 0xFF	; 255
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	0e 0d       	add	r16, r14
     d12:	1f 1d       	adc	r17, r15
  {
    hal_nrf_rw(*tx_pload++);
     d14:	89 91       	ld	r24, Y+
     d16:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
void hal_nrf_write_ack_pload(uint8_t pipe, uint8_t *tx_pload, uint8_t length)
{
  CSN_LOW();

  hal_nrf_rw(WR_ACK_PLOAD | pipe);
  while(length--)
     d1a:	c0 17       	cp	r28, r16
     d1c:	d1 07       	cpc	r29, r17
     d1e:	d1 f7       	brne	.-12     	; 0xd14 <hal_nrf_write_ack_pload+0x2e>
  {
    hal_nrf_rw(*tx_pload++);
  }

  CSN_HIGH();
     d20:	29 9a       	sbi	0x05, 1	; 5
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	08 95       	ret

00000d30 <hal_nrf_read_rx_pl_w>:

uint8_t hal_nrf_read_rx_pl_w()
{
  uint8_t temp;
  
  CSN_LOW();
     d30:	29 98       	cbi	0x05, 1	; 5

  hal_nrf_rw(RD_RX_PLOAD_W);
     d32:	80 e6       	ldi	r24, 0x60	; 96
     d34:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
  temp = hal_nrf_rw(0);
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
  CSN_HIGH();
     d3e:	29 9a       	sbi	0x05, 1	; 5

  return temp;
}
     d40:	08 95       	ret

00000d42 <hal_nrf_lock_unlock>:

void hal_nrf_lock_unlock()
{
  CSN_LOW();
     d42:	29 98       	cbi	0x05, 1	; 5

  hal_nrf_rw(LOCK_UNLOCK);             
     d44:	80 e5       	ldi	r24, 0x50	; 80
     d46:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
  hal_nrf_rw(0x73);
     d4a:	83 e7       	ldi	r24, 0x73	; 115
     d4c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>

  CSN_HIGH();
     d50:	29 9a       	sbi	0x05, 1	; 5
     d52:	08 95       	ret

00000d54 <hal_nrf_read_reg>:
}

uint8_t hal_nrf_read_reg(uint8_t reg)
{
uint8_t temp;
  CSN_LOW();
     d54:	29 98       	cbi	0x05, 1	; 5
  hal_nrf_rw(reg);
     d56:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
  temp = hal_nrf_rw(0);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
  CSN_HIGH();
     d60:	29 9a       	sbi	0x05, 1	; 5

  return temp;
}
     d62:	08 95       	ret

00000d64 <hal_nrf_get_address_width>:
  return (hal_nrf_read_reg(OBSERVE_TX) & (BIT_7|BIT_6|BIT_5|BIT_4)) >> 4;
}

uint8_t hal_nrf_get_address_width(void)
{
  return (hal_nrf_read_reg(SETUP_AW) + 2);
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
}
     d6a:	8e 5f       	subi	r24, 0xFE	; 254
     d6c:	08 95       	ret

00000d6e <hal_nrf_write_reg>:

  return temp;
}

uint8_t hal_nrf_write_reg(uint8_t reg, uint8_t value)
{
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	d6 2f       	mov	r29, r22
  uint8_t retval;
  CSN_LOW();
     d74:	29 98       	cbi	0x05, 1	; 5
  if(reg < WRITE_REG)   // i.e. this is a register access
     d76:	80 32       	cpi	r24, 0x20	; 32
     d78:	40 f4       	brcc	.+16     	; 0xd8a <hal_nrf_write_reg+0x1c>
  {
    retval = hal_nrf_rw(WRITE_REG + reg);
     d7a:	80 5e       	subi	r24, 0xE0	; 224
     d7c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
     d80:	c8 2f       	mov	r28, r24
    hal_nrf_rw(value);
     d82:	8d 2f       	mov	r24, r29
     d84:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
     d88:	10 c0       	rjmp	.+32     	; 0xdaa <hal_nrf_write_reg+0x3c>
  }
  else            // single byte cmd OR future command/register access
  {
    if(!(reg == FLUSH_TX) && !(reg == FLUSH_RX) && !(reg == REUSE_TX_PL) && !(reg == NOP))
     d8a:	9f e1       	ldi	r25, 0x1F	; 31
     d8c:	98 0f       	add	r25, r24
     d8e:	93 30       	cpi	r25, 0x03	; 3
     d90:	48 f0       	brcs	.+18     	; 0xda4 <hal_nrf_write_reg+0x36>
     d92:	8f 3f       	cpi	r24, 0xFF	; 255
     d94:	39 f0       	breq	.+14     	; 0xda4 <hal_nrf_write_reg+0x36>
    {
      retval = hal_nrf_rw(reg);
     d96:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
     d9a:	c8 2f       	mov	r28, r24
      hal_nrf_rw(value);
     d9c:	8d 2f       	mov	r24, r29
     d9e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <hal_nrf_write_reg+0x3c>
    }
    else          // single byte L01 command
    {
      retval = hal_nrf_rw(reg);
     da4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
     da8:	c8 2f       	mov	r28, r24
    }
  }
  CSN_HIGH();
     daa:	29 9a       	sbi	0x05, 1	; 5

  return retval;
}
     dac:	8c 2f       	mov	r24, r28
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <hal_nrf_get_clear_irq_flags>:
  }
}

uint8_t hal_nrf_get_clear_irq_flags(void)
{
  return hal_nrf_write_reg(STATUS, (BIT_6|BIT_5|BIT_4)) & (BIT_6|BIT_5|BIT_4);
     db4:	60 e7       	ldi	r22, 0x70	; 112
     db6:	87 e0       	ldi	r24, 0x07	; 7
     db8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
}
     dbc:	80 77       	andi	r24, 0x70	; 112
     dbe:	08 95       	ret

00000dc0 <hal_nrf_set_crc_mode>:
{
  return hal_nrf_nop() & (BIT_6|BIT_5|BIT_4);
}

void hal_nrf_set_crc_mode(hal_nrf_crc_mode_t crc_mode)
{
     dc0:	cf 93       	push	r28
     dc2:	c8 2f       	mov	r28, r24
  hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) & ~(BIT_3|BIT_2)) | (UINT8(crc_mode)<<2));
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     dca:	83 7f       	andi	r24, 0xF3	; 243
     dcc:	6c 2f       	mov	r22, r28
     dce:	66 0f       	add	r22, r22
     dd0:	66 0f       	add	r22, r22
     dd2:	68 2b       	or	r22, r24
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
}
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <hal_nrf_open_pipe>:

void hal_nrf_open_pipe(hal_nrf_address_t pipe_num, bool auto_ack)
{
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	c8 2f       	mov	r28, r24
     de6:	16 2f       	mov	r17, r22
  switch(pipe_num)
     de8:	86 30       	cpi	r24, 0x06	; 6
     dea:	18 f0       	brcs	.+6      	; 0xdf2 <hal_nrf_open_pipe+0x14>
     dec:	8f 3f       	cpi	r24, 0xFF	; 255
     dee:	39 f1       	breq	.+78     	; 0xe3e <hal_nrf_open_pipe+0x60>
     df0:	35 c0       	rjmp	.+106    	; 0xe5c <hal_nrf_open_pipe+0x7e>
    case HAL_NRF_PIPE1:
    case HAL_NRF_PIPE2:
    case HAL_NRF_PIPE3:
    case HAL_NRF_PIPE4:
    case HAL_NRF_PIPE5:
      hal_nrf_write_reg(EN_RXADDR, hal_nrf_read_reg(EN_RXADDR) | SET_BIT(pipe_num));
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     df8:	21 e0       	ldi	r18, 0x01	; 1
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	a9 01       	movw	r20, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <hal_nrf_open_pipe+0x26>
     e00:	44 0f       	add	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	ca 95       	dec	r28
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <hal_nrf_open_pipe+0x22>
     e08:	ea 01       	movw	r28, r20
     e0a:	64 2f       	mov	r22, r20
     e0c:	68 2b       	or	r22, r24
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>

      if(auto_ack)
     e14:	11 23       	and	r17, r17
     e16:	49 f0       	breq	.+18     	; 0xe2a <hal_nrf_open_pipe+0x4c>
        hal_nrf_write_reg(EN_AA, hal_nrf_read_reg(EN_AA) | SET_BIT(pipe_num));
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     e1e:	6c 2f       	mov	r22, r28
     e20:	68 2b       	or	r22, r24
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     e28:	19 c0       	rjmp	.+50     	; 0xe5c <hal_nrf_open_pipe+0x7e>
      else
        hal_nrf_write_reg(EN_AA, hal_nrf_read_reg(EN_AA) & ~SET_BIT(pipe_num));
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     e30:	c0 95       	com	r28
     e32:	68 2f       	mov	r22, r24
     e34:	6c 23       	and	r22, r28
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <hal_nrf_open_pipe+0x7e>
      break;

    case HAL_NRF_ALL:
      hal_nrf_write_reg(EN_RXADDR, (uint8_t)(~(BIT_7|BIT_6)));
     e3e:	6f e3       	ldi	r22, 0x3F	; 63
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>

      if(auto_ack)
     e46:	11 23       	and	r17, r17
     e48:	29 f0       	breq	.+10     	; 0xe54 <hal_nrf_open_pipe+0x76>
        hal_nrf_write_reg(EN_AA, (uint8_t)(~(BIT_7|BIT_6)));
     e4a:	6f e3       	ldi	r22, 0x3F	; 63
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <hal_nrf_open_pipe+0x7e>
      else
        hal_nrf_write_reg(EN_AA, 0);
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
      break;
      
    default:
      break;
  }
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	08 95       	ret

00000e64 <hal_nrf_close_pipe>:

void hal_nrf_close_pipe(hal_nrf_address_t pipe_num)
{
     e64:	cf 93       	push	r28
     e66:	c8 2f       	mov	r28, r24
  switch(pipe_num)
     e68:	86 30       	cpi	r24, 0x06	; 6
     e6a:	18 f0       	brcs	.+6      	; 0xe72 <hal_nrf_close_pipe+0xe>
     e6c:	8f 3f       	cpi	r24, 0xFF	; 255
     e6e:	d9 f0       	breq	.+54     	; 0xea6 <hal_nrf_close_pipe+0x42>
     e70:	22 c0       	rjmp	.+68     	; 0xeb6 <hal_nrf_close_pipe+0x52>
    case HAL_NRF_PIPE1:
    case HAL_NRF_PIPE2:
    case HAL_NRF_PIPE3:
    case HAL_NRF_PIPE4:
    case HAL_NRF_PIPE5:
      hal_nrf_write_reg(EN_RXADDR, hal_nrf_read_reg(EN_RXADDR) & ~SET_BIT(pipe_num));
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <hal_nrf_close_pipe+0x1e>
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	ca 95       	dec	r28
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <hal_nrf_close_pipe+0x1a>
     e86:	c6 2f       	mov	r28, r22
     e88:	c0 95       	com	r28
     e8a:	68 2f       	mov	r22, r24
     e8c:	6c 23       	and	r22, r28
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
      hal_nrf_write_reg(EN_AA, hal_nrf_read_reg(EN_AA) & ~SET_BIT(pipe_num));
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     e9a:	68 2f       	mov	r22, r24
     e9c:	6c 23       	and	r22, r28
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
      break;
     ea4:	08 c0       	rjmp	.+16     	; 0xeb6 <hal_nrf_close_pipe+0x52>
    
    case HAL_NRF_ALL:
      hal_nrf_write_reg(EN_RXADDR, 0);
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
      hal_nrf_write_reg(EN_AA, 0);
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
      break;
      
    default:
      break;
  }
}
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <hal_nrf_set_auto_retr>:
      break;
  }
}

void hal_nrf_set_auto_retr(uint8_t retr, uint16_t delay)
{
     eba:	48 2f       	mov	r20, r24
  hal_nrf_write_reg(SETUP_RETR, (((delay/250)-1)<<4) | retr);
     ebc:	9b 01       	movw	r18, r22
     ebe:	36 95       	lsr	r19
     ec0:	27 95       	ror	r18
     ec2:	a3 e1       	ldi	r26, 0x13	; 19
     ec4:	b3 e8       	ldi	r27, 0x83	; 131
     ec6:	0e 94 81 0b 	call	0x1702	; 0x1702 <__umulhisi3>
     eca:	00 24       	eor	r0, r0
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	00 1c       	adc	r0, r0
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	00 1c       	adc	r0, r0
     ed8:	89 2f       	mov	r24, r25
     eda:	90 2d       	mov	r25, r0
     edc:	2f ef       	ldi	r18, 0xFF	; 255
     ede:	28 0f       	add	r18, r24
     ee0:	22 95       	swap	r18
     ee2:	20 7f       	andi	r18, 0xF0	; 240
     ee4:	62 2f       	mov	r22, r18
     ee6:	64 2b       	or	r22, r20
     ee8:	84 e0       	ldi	r24, 0x04	; 4
     eea:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     eee:	08 95       	ret

00000ef0 <hal_nrf_set_address_width>:
}

void hal_nrf_set_address_width(hal_nrf_address_width_t address_width)
{
  hal_nrf_write_reg(SETUP_AW, (UINT8(address_width) - 2));
     ef0:	6e ef       	ldi	r22, 0xFE	; 254
     ef2:	68 0f       	add	r22, r24
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     efa:	08 95       	ret

00000efc <hal_nrf_set_rx_pload_width>:
}

void hal_nrf_set_rx_pload_width(uint8_t pipe_num, uint8_t pload_width)
{
  hal_nrf_write_reg(RX_PW_P0 + pipe_num, pload_width);
     efc:	8f 5e       	subi	r24, 0xEF	; 239
     efe:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f02:	08 95       	ret

00000f04 <hal_nrf_set_operation_mode>:
  return hal_nrf_read_reg(RX_PW_P0 + pipe_num);
}

void hal_nrf_set_operation_mode(hal_nrf_operation_mode_t op_mode)
{
  if(op_mode == HAL_NRF_PRX)
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	49 f4       	brne	.+18     	; 0xf1a <hal_nrf_set_operation_mode+0x16>
  {
    hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) | (1<<PRIM_RX)));
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     f0e:	68 2f       	mov	r22, r24
     f10:	61 60       	ori	r22, 0x01	; 1
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f18:	08 95       	ret
  }
  else
  {
    hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) & ~(1<<PRIM_RX)));
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     f20:	68 2f       	mov	r22, r24
     f22:	6e 7f       	andi	r22, 0xFE	; 254
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f2a:	08 95       	ret

00000f2c <hal_nrf_set_power_mode>:
  }
}

void hal_nrf_set_power_mode(hal_nrf_pwr_mode_t pwr_mode)
{
  if(pwr_mode == HAL_NRF_PWR_UP)
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	49 f4       	brne	.+18     	; 0xf42 <hal_nrf_set_power_mode+0x16>
  {
    hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) | (1<<PWR_UP)));
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     f36:	68 2f       	mov	r22, r24
     f38:	62 60       	ori	r22, 0x02	; 2
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f40:	08 95       	ret
  }
  else
  {
    hal_nrf_write_reg(CONFIG, (hal_nrf_read_reg(CONFIG) & ~(1<<PWR_UP)));
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     f48:	68 2f       	mov	r22, r24
     f4a:	6d 7f       	andi	r22, 0xFD	; 253
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f52:	08 95       	ret

00000f54 <hal_nrf_set_rf_channel>:
  }
}

void hal_nrf_set_rf_channel(uint8_t channel)
{
  hal_nrf_write_reg(RF_CH, channel);
     f54:	68 2f       	mov	r22, r24
     f56:	85 e0       	ldi	r24, 0x05	; 5
     f58:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f5c:	08 95       	ret

00000f5e <hal_nrf_setup_dyn_pl>:
  hal_nrf_write_multibyte_reg(UINT8(HAL_NRF_TX_PLOAD), tx_pload, length);
}

void hal_nrf_setup_dyn_pl(uint8_t setup)
{
  hal_nrf_write_reg(DYNPD, setup & ~0xC0); 
     f5e:	68 2f       	mov	r22, r24
     f60:	6f 73       	andi	r22, 0x3F	; 63
     f62:	8c e1       	ldi	r24, 0x1C	; 28
     f64:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f68:	08 95       	ret

00000f6a <hal_nrf_enable_dynamic_pl>:
}

void hal_nrf_enable_dynamic_pl(void)
{
  hal_nrf_write_reg(FEATURE, (hal_nrf_read_reg(FEATURE) | 0x04));   
     f6a:	8d e1       	ldi	r24, 0x1D	; 29
     f6c:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     f70:	68 2f       	mov	r22, r24
     f72:	64 60       	ori	r22, 0x04	; 4
     f74:	8d e1       	ldi	r24, 0x1D	; 29
     f76:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f7a:	08 95       	ret

00000f7c <hal_nrf_enable_ack_pl>:
  hal_nrf_write_reg(FEATURE, (hal_nrf_read_reg(FEATURE) & ~0x04));   
}

void hal_nrf_enable_ack_pl(void)
{
  hal_nrf_write_reg(FEATURE, (hal_nrf_read_reg(FEATURE) | 0x02));   
     f7c:	8d e1       	ldi	r24, 0x1D	; 29
     f7e:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     f82:	68 2f       	mov	r22, r24
     f84:	62 60       	ori	r22, 0x02	; 2
     f86:	8d e1       	ldi	r24, 0x1D	; 29
     f88:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f8c:	08 95       	ret

00000f8e <hal_nrf_flush_tx>:
  hal_nrf_write_reg(FLUSH_RX, 0);
}

void hal_nrf_flush_tx(void)
{
  hal_nrf_write_reg(FLUSH_TX, 0);
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	81 ee       	ldi	r24, 0xE1	; 225
     f92:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     f96:	08 95       	ret

00000f98 <hal_nrf_nop>:
}

uint8_t hal_nrf_nop(void)
{
  return hal_nrf_write_reg(NOP,0);
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
}
     fa0:	08 95       	ret

00000fa2 <hal_nrf_get_rx_data_source>:
  CSN_HIGH();
}

uint8_t hal_nrf_get_rx_data_source(void)
{
  return ((hal_nrf_nop() & (BIT_3|BIT_2|BIT_1)) >> 1);
     fa2:	0e 94 cc 07 	call	0xf98	; 0xf98 <hal_nrf_nop>
     fa6:	8e 70       	andi	r24, 0x0E	; 14
}
     fa8:	86 95       	lsr	r24
     faa:	08 95       	ret

00000fac <hal_nrf_rx_fifo_empty>:
  return (hal_nrf_read_reg(RF_SETUP) & (1<<RF_DR)) >> RF_DR;
}

bool hal_nrf_rx_fifo_empty(void)
{
 if(hal_nrf_get_rx_data_source()==7)
     fac:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <hal_nrf_get_rx_data_source>
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	87 30       	cpi	r24, 0x07	; 7
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <hal_nrf_rx_fifo_empty+0xc>
     fb6:	90 e0       	ldi	r25, 0x00	; 0
  }
  else
  {
    return false;
  }
}
     fb8:	89 2f       	mov	r24, r25
     fba:	08 95       	ret

00000fbc <hal_nrf_set_pll_mode>:
  return hal_nrf_write_reg(NOP,0);
}

void hal_nrf_set_pll_mode(hal_nrf_pll_mode_t pll_mode)
{
  if(pll_mode == HAL_NRF_PLL_LOCK)
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	49 f4       	brne	.+18     	; 0xfd2 <hal_nrf_set_pll_mode+0x16>
  {
    hal_nrf_write_reg(RF_SETUP, (hal_nrf_read_reg(RF_SETUP) | (1<<PLL_LOCK)));
     fc0:	86 e0       	ldi	r24, 0x06	; 6
     fc2:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     fc6:	68 2f       	mov	r22, r24
     fc8:	60 61       	ori	r22, 0x10	; 16
     fca:	86 e0       	ldi	r24, 0x06	; 6
     fcc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     fd0:	08 95       	ret
  }
  else
  {
    hal_nrf_write_reg(RF_SETUP, (hal_nrf_read_reg(RF_SETUP) & ~(1<<PLL_LOCK)));
     fd2:	86 e0       	ldi	r24, 0x06	; 6
     fd4:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
     fd8:	68 2f       	mov	r22, r24
     fda:	6f 7e       	andi	r22, 0xEF	; 239
     fdc:	86 e0       	ldi	r24, 0x06	; 6
     fde:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
     fe2:	08 95       	ret

00000fe4 <hal_nrf_read_multibyte_reg>:

  return retval;
}

uint16_t hal_nrf_read_multibyte_reg(uint8_t reg, uint8_t *pbuf)
{
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	f8 2e       	mov	r15, r24
     ff6:	6b 01       	movw	r12, r22
uint8_t ctr, length;
  switch(reg)
     ff8:	86 e0       	ldi	r24, 0x06	; 6
     ffa:	f8 16       	cp	r15, r24
     ffc:	51 f0       	breq	.+20     	; 0x1012 <hal_nrf_read_multibyte_reg+0x2e>
     ffe:	8f 15       	cp	r24, r15
    1000:	20 f0       	brcs	.+8      	; 0x100a <hal_nrf_read_multibyte_reg+0x26>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	8f 15       	cp	r24, r15
    1006:	e0 f0       	brcs	.+56     	; 0x1040 <hal_nrf_read_multibyte_reg+0x5c>
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <hal_nrf_read_multibyte_reg+0x2e>
    100a:	88 e0       	ldi	r24, 0x08	; 8
    100c:	f8 16       	cp	r15, r24
    100e:	51 f0       	breq	.+20     	; 0x1024 <hal_nrf_read_multibyte_reg+0x40>
    1010:	17 c0       	rjmp	.+46     	; 0x1040 <hal_nrf_read_multibyte_reg+0x5c>
  {
    case HAL_NRF_PIPE0:
    case HAL_NRF_PIPE1:
    case HAL_NRF_TX:
      length = ctr = hal_nrf_get_address_width();
    1012:	0e 94 b2 06 	call	0xd64	; 0xd64 <hal_nrf_get_address_width>
    1016:	e8 2e       	mov	r14, r24
      CSN_LOW();
    1018:	29 98       	cbi	0x05, 1	; 5
      hal_nrf_rw(RX_ADDR_P0 + reg);
    101a:	8a e0       	ldi	r24, 0x0A	; 10
    101c:	8f 0d       	add	r24, r15
    101e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
      break;
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <hal_nrf_read_multibyte_reg+0x5e>
      
    case HAL_NRF_RX_PLOAD:
      if( (reg = hal_nrf_get_rx_data_source()) < 7)
    1024:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <hal_nrf_get_rx_data_source>
    1028:	f8 2e       	mov	r15, r24
    102a:	86 e0       	ldi	r24, 0x06	; 6
    102c:	8f 15       	cp	r24, r15
    102e:	e0 f0       	brcs	.+56     	; 0x1068 <hal_nrf_read_multibyte_reg+0x84>
      {
        length = ctr = hal_nrf_read_rx_pl_w();
    1030:	0e 94 98 06 	call	0xd30	; 0xd30 <hal_nrf_read_rx_pl_w>
    1034:	e8 2e       	mov	r14, r24

        CSN_LOW();
    1036:	29 98       	cbi	0x05, 1	; 5
        hal_nrf_rw(RD_RX_PLOAD);
    1038:	81 e6       	ldi	r24, 0x61	; 97
    103a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <hal_nrf_read_multibyte_reg+0x5e>
       ctr = length = 0;
      }
      break;

    default:
      ctr = length = 0;
    1040:	e1 2c       	mov	r14, r1
      break;
  }

  while(ctr--)
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	9e 0d       	add	r25, r14
    1046:	ee 20       	and	r14, r14
    1048:	81 f0       	breq	.+32     	; 0x106a <hal_nrf_read_multibyte_reg+0x86>
    104a:	e6 01       	movw	r28, r12
    104c:	09 2f       	mov	r16, r25
    104e:	10 e0       	ldi	r17, 0x00	; 0
    1050:	0f 5f       	subi	r16, 0xFF	; 255
    1052:	1f 4f       	sbci	r17, 0xFF	; 255
    1054:	0c 0d       	add	r16, r12
    1056:	1d 1d       	adc	r17, r13
  {
    *pbuf++ = hal_nrf_rw(0);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
    105e:	89 93       	st	Y+, r24
    default:
      ctr = length = 0;
      break;
  }

  while(ctr--)
    1060:	c0 17       	cp	r28, r16
    1062:	d1 07       	cpc	r29, r17
    1064:	c9 f7       	brne	.-14     	; 0x1058 <hal_nrf_read_multibyte_reg+0x74>
    1066:	01 c0       	rjmp	.+2      	; 0x106a <hal_nrf_read_multibyte_reg+0x86>
        CSN_LOW();
        hal_nrf_rw(RD_RX_PLOAD);
      }
      else
      {
       ctr = length = 0;
    1068:	e1 2c       	mov	r14, r1
  while(ctr--)
  {
    *pbuf++ = hal_nrf_rw(0);
  }

  CSN_HIGH();
    106a:	29 9a       	sbi	0x05, 1	; 5

  return (((uint16_t) reg << 8) | length);
    106c:	8e 2d       	mov	r24, r14
    106e:	90 e0       	ldi	r25, 0x00	; 0
}
    1070:	9f 29       	or	r25, r15
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	08 95       	ret

00001084 <hal_nrf_read_rx_pload>:

// Fixed: returns length==0 and pipe==7 means FIFO empty

uint16_t hal_nrf_read_rx_pload(uint8_t *rx_pload)
{
  return hal_nrf_read_multibyte_reg(UINT8(HAL_NRF_RX_PLOAD), rx_pload);
    1084:	bc 01       	movw	r22, r24
    1086:	88 e0       	ldi	r24, 0x08	; 8
    1088:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <hal_nrf_read_multibyte_reg>
}
    108c:	08 95       	ret

0000108e <hal_nrf_write_multibyte_reg>:

  return (((uint16_t) reg << 8) | length);
}

void hal_nrf_write_multibyte_reg(uint8_t reg, uint8_t *pbuf, uint8_t length)
{
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	c8 2f       	mov	r28, r24
    109c:	7b 01       	movw	r14, r22
    109e:	d4 2f       	mov	r29, r20
  switch(reg)
    10a0:	86 30       	cpi	r24, 0x06	; 6
    10a2:	39 f0       	breq	.+14     	; 0x10b2 <hal_nrf_write_multibyte_reg+0x24>
    10a4:	18 f4       	brcc	.+6      	; 0x10ac <hal_nrf_write_multibyte_reg+0x1e>
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	60 f4       	brcc	.+24     	; 0x10c2 <hal_nrf_write_multibyte_reg+0x34>
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <hal_nrf_write_multibyte_reg+0x24>
    10ac:	87 30       	cpi	r24, 0x07	; 7
    10ae:	71 f0       	breq	.+28     	; 0x10cc <hal_nrf_write_multibyte_reg+0x3e>
    10b0:	08 c0       	rjmp	.+16     	; 0x10c2 <hal_nrf_write_multibyte_reg+0x34>
  {
    case HAL_NRF_PIPE0:
    case HAL_NRF_PIPE1:
    case HAL_NRF_TX:
      length = hal_nrf_get_address_width();
    10b2:	0e 94 b2 06 	call	0xd64	; 0xd64 <hal_nrf_get_address_width>
    10b6:	d8 2f       	mov	r29, r24
      CSN_LOW();
    10b8:	29 98       	cbi	0x05, 1	; 5
      hal_nrf_rw(WRITE_REG + RX_ADDR_P0 + reg);
    10ba:	8a e2       	ldi	r24, 0x2A	; 42
    10bc:	8c 0f       	add	r24, r28
    10be:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
      break;      
    default:
      break;
  }

  while(length--)
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	9d 0f       	add	r25, r29
    10c6:	d1 11       	cpse	r29, r1
    10c8:	06 c0       	rjmp	.+12     	; 0x10d6 <hal_nrf_write_multibyte_reg+0x48>
    10ca:	12 c0       	rjmp	.+36     	; 0x10f0 <hal_nrf_write_multibyte_reg+0x62>
      CSN_LOW();
      hal_nrf_rw(WRITE_REG + RX_ADDR_P0 + reg);
      break;
      
    case HAL_NRF_TX_PLOAD:
      CSN_LOW();
    10cc:	29 98       	cbi	0x05, 1	; 5
      hal_nrf_rw(WR_TX_PLOAD);
    10ce:	80 ea       	ldi	r24, 0xA0	; 160
    10d0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
      break;      
    10d4:	f6 cf       	rjmp	.-20     	; 0x10c2 <hal_nrf_write_multibyte_reg+0x34>
    10d6:	e7 01       	movw	r28, r14
    10d8:	09 2f       	mov	r16, r25
    10da:	10 e0       	ldi	r17, 0x00	; 0
    10dc:	0f 5f       	subi	r16, 0xFF	; 255
    10de:	1f 4f       	sbci	r17, 0xFF	; 255
    10e0:	0e 0d       	add	r16, r14
    10e2:	1f 1d       	adc	r17, r15
      break;
  }

  while(length--)
  {
    hal_nrf_rw(*pbuf++);
    10e4:	89 91       	ld	r24, Y+
    10e6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <hal_nrf_rw>
      break;      
    default:
      break;
  }

  while(length--)
    10ea:	c0 17       	cp	r28, r16
    10ec:	d1 07       	cpc	r29, r17
    10ee:	d1 f7       	brne	.-12     	; 0x10e4 <hal_nrf_write_multibyte_reg+0x56>
  {
    hal_nrf_rw(*pbuf++);
  }

  CSN_HIGH();
    10f0:	29 9a       	sbi	0x05, 1	; 5
}
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	08 95       	ret

00001100 <hal_nrf_set_address>:
  }
}

void hal_nrf_set_address(hal_nrf_address_t address, uint8_t *addr)
{
  switch(address)
    1100:	86 30       	cpi	r24, 0x06	; 6
    1102:	18 f4       	brcc	.+6      	; 0x110a <hal_nrf_set_address+0xa>
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	18 f0       	brcs	.+6      	; 0x110e <hal_nrf_set_address+0xe>
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <hal_nrf_set_address+0x16>
    110a:	86 30       	cpi	r24, 0x06	; 6
    110c:	49 f4       	brne	.+18     	; 0x1120 <hal_nrf_set_address+0x20>
  {
    case HAL_NRF_TX:
    case HAL_NRF_PIPE0:
    case HAL_NRF_PIPE1:
      hal_nrf_write_multibyte_reg((uint8_t) address, addr, 0);
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	0e 94 47 08 	call	0x108e	; 0x108e <hal_nrf_write_multibyte_reg>
      break;
    1114:	08 95       	ret

    case HAL_NRF_PIPE2:
    case HAL_NRF_PIPE3:
    case HAL_NRF_PIPE4:
    case HAL_NRF_PIPE5:
      hal_nrf_write_reg(RX_ADDR_P0 + (uint8_t) address, *addr);
    1116:	fb 01       	movw	r30, r22
    1118:	60 81       	ld	r22, Z
    111a:	86 5f       	subi	r24, 0xF6	; 246
    111c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <hal_nrf_write_reg>
    1120:	08 95       	ret

00001122 <__vector_3>:
/** The current status of the radio. Should be set with radio_set_status(), 
 * and read with radio_get_status().
 */
static radio_status_t status;

ISR (NRF24L01_IRQ_VECTOR) {
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
	
	puts("radio irq");	
    1144:	88 ef       	ldi	r24, 0xF8	; 248
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	0e 94 ad 0b 	call	0x175a	; 0x175a <puts>
	if (READ(NRF24L01_IRQ) == 0)
    114c:	18 99       	sbic	0x03, 0	; 3
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <__vector_3+0x34>
	active_radio_interrupt = true;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 19 02 	sts	0x0219, r24
}
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <radio_get_status>:
}

radio_status_t radio_get_status (void)
{
  return status;
}
    1178:	80 91 0e 02 	lds	r24, 0x020E
    117c:	08 95       	ret

0000117e <radio_get_pload_byte>:

uint8_t radio_get_pload_byte (uint8_t byte_index)
{
  return pload[byte_index];
    117e:	e8 2f       	mov	r30, r24
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	e1 5f       	subi	r30, 0xF1	; 241
    1184:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1186:	80 81       	ld	r24, Z
    1188:	08 95       	ret

0000118a <radio_set_status>:

void radio_set_status (radio_status_t new_status)
{
  status = new_status;
    118a:	80 93 0e 02 	sts	0x020E, r24
    118e:	08 95       	ret

00001190 <radio_irq>:
}

void radio_irq(void) {
	
	/* Check if an interrupt is triggered */
	if (READ(NRF24L01_IRQ) == 0) { //(active_radio_interrupt == true) {
    1190:	18 99       	sbic	0x03, 0	; 3
    1192:	30 c0       	rjmp	.+96     	; 0x11f4 <radio_irq+0x64>
		
		switch(hal_nrf_get_clear_irq_flags ()) {
    1194:	0e 94 da 06 	call	0xdb4	; 0xdb4 <hal_nrf_get_clear_irq_flags>
    1198:	80 32       	cpi	r24, 0x20	; 32
    119a:	79 f0       	breq	.+30     	; 0x11ba <radio_irq+0x2a>
    119c:	18 f4       	brcc	.+6      	; 0x11a4 <radio_irq+0x14>
    119e:	80 31       	cpi	r24, 0x10	; 16
    11a0:	31 f0       	breq	.+12     	; 0x11ae <radio_irq+0x1e>
    11a2:	26 c0       	rjmp	.+76     	; 0x11f0 <radio_irq+0x60>
    11a4:	80 34       	cpi	r24, 0x40	; 64
    11a6:	89 f0       	breq	.+34     	; 0x11ca <radio_irq+0x3a>
    11a8:	80 36       	cpi	r24, 0x60	; 96
    11aa:	d9 f0       	breq	.+54     	; 0x11e2 <radio_irq+0x52>
    11ac:	21 c0       	rjmp	.+66     	; 0x11f0 <radio_irq+0x60>
			
			/* If max retries is reached. Flush TX FIFO, avoid FIFO jam */
			case (1<<HAL_NRF_MAX_RT):
				hal_nrf_flush_tx();
    11ae:	0e 94 c7 07 	call	0xf8e	; 0xf8e <hal_nrf_flush_tx>
  return pload[byte_index];
}

void radio_set_status (radio_status_t new_status)
{
  status = new_status;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 0e 02 	sts	0x020E, r24
    11b8:	1b c0       	rjmp	.+54     	; 0x11f0 <radio_irq+0x60>
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	80 93 0e 02 	sts	0x020E, r24
    11c0:	17 c0       	rjmp	.+46     	; 0x11f0 <radio_irq+0x60>
				break;
      
			/* Packet received */
			case (1<<HAL_NRF_RX_DR):                  
				while (!hal_nrf_rx_fifo_empty ()) {
					hal_nrf_read_rx_pload(pload);
    11c2:	8f e0       	ldi	r24, 0x0F	; 15
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	0e 94 42 08 	call	0x1084	; 0x1084 <hal_nrf_read_rx_pload>
				radio_set_status (RF_TX_DS);
				break;
      
			/* Packet received */
			case (1<<HAL_NRF_RX_DR):                  
				while (!hal_nrf_rx_fifo_empty ()) {
    11ca:	0e 94 d6 07 	call	0xfac	; 0xfac <hal_nrf_rx_fifo_empty>
    11ce:	88 23       	and	r24, r24
    11d0:	c1 f3       	breq	.-16     	; 0x11c2 <radio_irq+0x32>
  return pload[byte_index];
}

void radio_set_status (radio_status_t new_status)
{
  status = new_status;
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	80 93 0e 02 	sts	0x020E, r24
    11d8:	0b c0       	rjmp	.+22     	; 0x11f0 <radio_irq+0x60>
				break;
  
			/* Acknowledge payload received */
			case ((1<<HAL_NRF_RX_DR)|(1<<HAL_NRF_TX_DS)):
				while (!hal_nrf_rx_fifo_empty ()) {
					hal_nrf_read_rx_pload(pload);
    11da:	8f e0       	ldi	r24, 0x0F	; 15
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	0e 94 42 08 	call	0x1084	; 0x1084 <hal_nrf_read_rx_pload>
				radio_set_status (RF_RX_DR);
				break;
  
			/* Acknowledge payload received */
			case ((1<<HAL_NRF_RX_DR)|(1<<HAL_NRF_TX_DS)):
				while (!hal_nrf_rx_fifo_empty ()) {
    11e2:	0e 94 d6 07 	call	0xfac	; 0xfac <hal_nrf_rx_fifo_empty>
    11e6:	88 23       	and	r24, r24
    11e8:	c1 f3       	breq	.-16     	; 0x11da <radio_irq+0x4a>
  return pload[byte_index];
}

void radio_set_status (radio_status_t new_status)
{
  status = new_status;
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	80 93 0e 02 	sts	0x020E, r24
  
			default:
				break;    
		}
	
		active_radio_interrupt = false;
    11f0:	10 92 19 02 	sts	0x0219, r1
    11f4:	08 95       	ret

000011f6 <radio_pl_init>:
#include "hal_nrf.h"
#include "radio_pl.h"
#include "radio.h"

void radio_pl_init (uint8_t *address, hal_nrf_operation_mode_t operational_mode)
{
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
    11fe:	16 2f       	mov	r17, r22
  hal_nrf_close_pipe(HAL_NRF_ALL);               // First close all radio pipes
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	0e 94 32 07 	call	0xe64	; 0xe64 <hal_nrf_close_pipe>
                                                 // Pipe 0 and 1 open by default
  hal_nrf_open_pipe(HAL_NRF_PIPE0, true);        // Then open pipe0, w/autoack 
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	0e 94 ef 06 	call	0xdde	; 0xdde <hal_nrf_open_pipe>

  hal_nrf_set_crc_mode(HAL_NRF_CRC_16BIT);       // Operates in 16bits CRC mode
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <hal_nrf_set_crc_mode>
  hal_nrf_set_auto_retr(RF_RETRANSMITS, RF_RETRANS_DELAY);
    1214:	6a ef       	ldi	r22, 0xFA	; 250
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	8f e0       	ldi	r24, 0x0F	; 15
    121a:	0e 94 5d 07 	call	0xeba	; 0xeba <hal_nrf_set_auto_retr>
                                                 // Enables auto retransmit.
                                                 // 3 retrans with 250ms delay

  hal_nrf_set_address_width(HAL_NRF_AW_5BYTES);  // 5 bytes address width
    121e:	85 e0       	ldi	r24, 0x05	; 5
    1220:	0e 94 78 07 	call	0xef0	; 0xef0 <hal_nrf_set_address_width>
  hal_nrf_set_address(HAL_NRF_TX, address);      // Set device's addresses
    1224:	be 01       	movw	r22, r28
    1226:	86 e0       	ldi	r24, 0x06	; 6
    1228:	0e 94 80 08 	call	0x1100	; 0x1100 <hal_nrf_set_address>
  hal_nrf_set_address(HAL_NRF_PIPE0, address);   // Sets recieving address on 
    122c:	be 01       	movw	r22, r28
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	0e 94 80 08 	call	0x1100	; 0x1100 <hal_nrf_set_address>
 * Enables:                                                                  *
 *  - ACK payload                                                            *
 *  - Dynamic payload width                                                  *
 *  - Dynamic ACK                                                            *
 *****************************************************************************/
  hal_nrf_enable_ack_pl();                       // Try to enable ack payload
    1234:	0e 94 be 07 	call	0xf7c	; 0xf7c <hal_nrf_enable_ack_pl>

  // When the features are locked, the FEATURE and DYNPD are read out 0x00
  // even after we have tried to enable ack payload. This mean that we need to
  // activate the features.
  if(hal_nrf_read_reg(FEATURE) == 0x00 && (hal_nrf_read_reg(DYNPD) == 0x00))
    1238:	8d e1       	ldi	r24, 0x1D	; 29
    123a:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
    123e:	81 11       	cpse	r24, r1
    1240:	09 c0       	rjmp	.+18     	; 0x1254 <radio_pl_init+0x5e>
    1242:	8c e1       	ldi	r24, 0x1C	; 28
    1244:	0e 94 aa 06 	call	0xd54	; 0xd54 <hal_nrf_read_reg>
    1248:	81 11       	cpse	r24, r1
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <radio_pl_init+0x5e>
  {
    hal_nrf_lock_unlock ();                      // Activate features
    124c:	0e 94 a1 06 	call	0xd42	; 0xd42 <hal_nrf_lock_unlock>
    hal_nrf_enable_ack_pl();                     // Enables payload in ack
    1250:	0e 94 be 07 	call	0xf7c	; 0xf7c <hal_nrf_enable_ack_pl>
  }

  hal_nrf_enable_dynamic_pl();                   // Enables dynamic payload
    1254:	0e 94 b5 07 	call	0xf6a	; 0xf6a <hal_nrf_enable_dynamic_pl>
  hal_nrf_setup_dyn_pl(ALL_PIPES);               // Sets up dynamic payload on
    1258:	8f e3       	ldi	r24, 0x3F	; 63
    125a:	0e 94 af 07 	call	0xf5e	; 0xf5e <hal_nrf_setup_dyn_pl>
                                                 // all data pipes.
/*****************************************************************************
 * End changes from esb/radio_esb.c                                          *
 *****************************************************************************/
   
  if(operational_mode == HAL_NRF_PTX)            // Mode depentant settings
    125e:	11 11       	cpse	r17, r1
    1260:	04 c0       	rjmp	.+8      	; 0x126a <radio_pl_init+0x74>
  {
    hal_nrf_set_operation_mode(HAL_NRF_PTX);     // Enter TX mode
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 82 07 	call	0xf04	; 0xf04 <hal_nrf_set_operation_mode>
    1268:	07 c0       	rjmp	.+14     	; 0x1278 <radio_pl_init+0x82>
  }
  else
  {
    hal_nrf_set_operation_mode(HAL_NRF_PRX);     // Enter RX mode
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	0e 94 82 07 	call	0xf04	; 0xf04 <hal_nrf_set_operation_mode>
    hal_nrf_set_rx_pload_width((uint8_t)HAL_NRF_PIPE0, RF_PAYLOAD_LENGTH);
    1270:	6a e0       	ldi	r22, 0x0A	; 10
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	0e 94 7e 07 	call	0xefc	; 0xefc <hal_nrf_set_rx_pload_width>
                                                 // Pipe0 expect 
                                                 // PAYLOAD_LENGTH byte payload
                                                 // PAYLOAD_LENGTH in radio.h
  }

  hal_nrf_set_rf_channel(RF_CHANNEL);            // Operating on static channel
    1278:	88 e2       	ldi	r24, 0x28	; 40
    127a:	0e 94 aa 07 	call	0xf54	; 0xf54 <hal_nrf_set_rf_channel>
                                                 // Defined in radio.h. 
                                                 // Frequency = 2400 + RF_CHANNEL
  hal_nrf_set_power_mode(HAL_NRF_PWR_UP);        // Power up device
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	0e 94 96 07 	call	0xf2c	; 0xf2c <hal_nrf_set_power_mode>
    1284:	83 ef       	ldi	r24, 0xF3	; 243
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <radio_pl_init+0x92>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <radio_pl_init+0x98>
    128e:	00 00       	nop
  
  _delay_ms(RF_POWER_UP_DELAY);
  
  radio_set_status (RF_IDLE);                    // Radio now ready
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	0e 94 c5 08 	call	0x118a	; 0x118a <radio_set_status>
}    
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	08 95       	ret

0000129e <__vector_9>:

#include "ism_tranceiver.h"

volatile bool second_tick = false;

ISR (REAL_TIME_SECOND_IRQ_VECTOR) {
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31

	second_tick = true;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	80 93 1a 02 	sts	0x021A, r24
	puts("tick, tack");	
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	0e 94 ad 0b 	call	0x175a	; 0x175a <puts>
		
    12ce:	ff 91       	pop	r31
    12d0:	ef 91       	pop	r30
    12d2:	bf 91       	pop	r27
    12d4:	af 91       	pop	r26
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	7f 91       	pop	r23
    12dc:	6f 91       	pop	r22
    12de:	5f 91       	pop	r21
    12e0:	4f 91       	pop	r20
    12e2:	3f 91       	pop	r19
    12e4:	2f 91       	pop	r18
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0
    12ec:	1f 90       	pop	r1
    12ee:	18 95       	reti

000012f0 <__subsf3>:
    12f0:	50 58       	subi	r21, 0x80	; 128

000012f2 <__addsf3>:
    12f2:	bb 27       	eor	r27, r27
    12f4:	aa 27       	eor	r26, r26
    12f6:	0e 94 90 09 	call	0x1320	; 0x1320 <__addsf3x>
    12fa:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_round>
    12fe:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__fp_pscA>
    1302:	38 f0       	brcs	.+14     	; 0x1312 <__addsf3+0x20>
    1304:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fp_pscB>
    1308:	20 f0       	brcs	.+8      	; 0x1312 <__addsf3+0x20>
    130a:	39 f4       	brne	.+14     	; 0x131a <__addsf3+0x28>
    130c:	9f 3f       	cpi	r25, 0xFF	; 255
    130e:	19 f4       	brne	.+6      	; 0x1316 <__addsf3+0x24>
    1310:	26 f4       	brtc	.+8      	; 0x131a <__addsf3+0x28>
    1312:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_nan>
    1316:	0e f4       	brtc	.+2      	; 0x131a <__addsf3+0x28>
    1318:	e0 95       	com	r30
    131a:	e7 fb       	bst	r30, 7
    131c:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__fp_inf>

00001320 <__addsf3x>:
    1320:	e9 2f       	mov	r30, r25
    1322:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__fp_split3>
    1326:	58 f3       	brcs	.-42     	; 0x12fe <__addsf3+0xc>
    1328:	ba 17       	cp	r27, r26
    132a:	62 07       	cpc	r22, r18
    132c:	73 07       	cpc	r23, r19
    132e:	84 07       	cpc	r24, r20
    1330:	95 07       	cpc	r25, r21
    1332:	20 f0       	brcs	.+8      	; 0x133c <__addsf3x+0x1c>
    1334:	79 f4       	brne	.+30     	; 0x1354 <__addsf3x+0x34>
    1336:	a6 f5       	brtc	.+104    	; 0x13a0 <__addsf3x+0x80>
    1338:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__fp_zero>
    133c:	0e f4       	brtc	.+2      	; 0x1340 <__addsf3x+0x20>
    133e:	e0 95       	com	r30
    1340:	0b 2e       	mov	r0, r27
    1342:	ba 2f       	mov	r27, r26
    1344:	a0 2d       	mov	r26, r0
    1346:	0b 01       	movw	r0, r22
    1348:	b9 01       	movw	r22, r18
    134a:	90 01       	movw	r18, r0
    134c:	0c 01       	movw	r0, r24
    134e:	ca 01       	movw	r24, r20
    1350:	a0 01       	movw	r20, r0
    1352:	11 24       	eor	r1, r1
    1354:	ff 27       	eor	r31, r31
    1356:	59 1b       	sub	r21, r25
    1358:	99 f0       	breq	.+38     	; 0x1380 <__addsf3x+0x60>
    135a:	59 3f       	cpi	r21, 0xF9	; 249
    135c:	50 f4       	brcc	.+20     	; 0x1372 <__addsf3x+0x52>
    135e:	50 3e       	cpi	r21, 0xE0	; 224
    1360:	68 f1       	brcs	.+90     	; 0x13bc <__addsf3x+0x9c>
    1362:	1a 16       	cp	r1, r26
    1364:	f0 40       	sbci	r31, 0x00	; 0
    1366:	a2 2f       	mov	r26, r18
    1368:	23 2f       	mov	r18, r19
    136a:	34 2f       	mov	r19, r20
    136c:	44 27       	eor	r20, r20
    136e:	58 5f       	subi	r21, 0xF8	; 248
    1370:	f3 cf       	rjmp	.-26     	; 0x1358 <__addsf3x+0x38>
    1372:	46 95       	lsr	r20
    1374:	37 95       	ror	r19
    1376:	27 95       	ror	r18
    1378:	a7 95       	ror	r26
    137a:	f0 40       	sbci	r31, 0x00	; 0
    137c:	53 95       	inc	r21
    137e:	c9 f7       	brne	.-14     	; 0x1372 <__addsf3x+0x52>
    1380:	7e f4       	brtc	.+30     	; 0x13a0 <__addsf3x+0x80>
    1382:	1f 16       	cp	r1, r31
    1384:	ba 0b       	sbc	r27, r26
    1386:	62 0b       	sbc	r22, r18
    1388:	73 0b       	sbc	r23, r19
    138a:	84 0b       	sbc	r24, r20
    138c:	ba f0       	brmi	.+46     	; 0x13bc <__addsf3x+0x9c>
    138e:	91 50       	subi	r25, 0x01	; 1
    1390:	a1 f0       	breq	.+40     	; 0x13ba <__addsf3x+0x9a>
    1392:	ff 0f       	add	r31, r31
    1394:	bb 1f       	adc	r27, r27
    1396:	66 1f       	adc	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	88 1f       	adc	r24, r24
    139c:	c2 f7       	brpl	.-16     	; 0x138e <__addsf3x+0x6e>
    139e:	0e c0       	rjmp	.+28     	; 0x13bc <__addsf3x+0x9c>
    13a0:	ba 0f       	add	r27, r26
    13a2:	62 1f       	adc	r22, r18
    13a4:	73 1f       	adc	r23, r19
    13a6:	84 1f       	adc	r24, r20
    13a8:	48 f4       	brcc	.+18     	; 0x13bc <__addsf3x+0x9c>
    13aa:	87 95       	ror	r24
    13ac:	77 95       	ror	r23
    13ae:	67 95       	ror	r22
    13b0:	b7 95       	ror	r27
    13b2:	f7 95       	ror	r31
    13b4:	9e 3f       	cpi	r25, 0xFE	; 254
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <__addsf3x+0x9a>
    13b8:	b0 cf       	rjmp	.-160    	; 0x131a <__addsf3+0x28>
    13ba:	93 95       	inc	r25
    13bc:	88 0f       	add	r24, r24
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <__addsf3x+0xa2>
    13c0:	99 27       	eor	r25, r25
    13c2:	ee 0f       	add	r30, r30
    13c4:	97 95       	ror	r25
    13c6:	87 95       	ror	r24
    13c8:	08 95       	ret

000013ca <__divsf3>:
    13ca:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__divsf3x>
    13ce:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_round>
    13d2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fp_pscB>
    13d6:	58 f0       	brcs	.+22     	; 0x13ee <__divsf3+0x24>
    13d8:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__fp_pscA>
    13dc:	40 f0       	brcs	.+16     	; 0x13ee <__divsf3+0x24>
    13de:	29 f4       	brne	.+10     	; 0x13ea <__divsf3+0x20>
    13e0:	5f 3f       	cpi	r21, 0xFF	; 255
    13e2:	29 f0       	breq	.+10     	; 0x13ee <__divsf3+0x24>
    13e4:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__fp_inf>
    13e8:	51 11       	cpse	r21, r1
    13ea:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__fp_szero>
    13ee:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_nan>

000013f2 <__divsf3x>:
    13f2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__fp_split3>
    13f6:	68 f3       	brcs	.-38     	; 0x13d2 <__divsf3+0x8>

000013f8 <__divsf3_pse>:
    13f8:	99 23       	and	r25, r25
    13fa:	b1 f3       	breq	.-20     	; 0x13e8 <__divsf3+0x1e>
    13fc:	55 23       	and	r21, r21
    13fe:	91 f3       	breq	.-28     	; 0x13e4 <__divsf3+0x1a>
    1400:	95 1b       	sub	r25, r21
    1402:	55 0b       	sbc	r21, r21
    1404:	bb 27       	eor	r27, r27
    1406:	aa 27       	eor	r26, r26
    1408:	62 17       	cp	r22, r18
    140a:	73 07       	cpc	r23, r19
    140c:	84 07       	cpc	r24, r20
    140e:	38 f0       	brcs	.+14     	; 0x141e <__divsf3_pse+0x26>
    1410:	9f 5f       	subi	r25, 0xFF	; 255
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	44 1f       	adc	r20, r20
    141a:	aa 1f       	adc	r26, r26
    141c:	a9 f3       	breq	.-22     	; 0x1408 <__divsf3_pse+0x10>
    141e:	35 d0       	rcall	.+106    	; 0x148a <__divsf3_pse+0x92>
    1420:	0e 2e       	mov	r0, r30
    1422:	3a f0       	brmi	.+14     	; 0x1432 <__divsf3_pse+0x3a>
    1424:	e0 e8       	ldi	r30, 0x80	; 128
    1426:	32 d0       	rcall	.+100    	; 0x148c <__divsf3_pse+0x94>
    1428:	91 50       	subi	r25, 0x01	; 1
    142a:	50 40       	sbci	r21, 0x00	; 0
    142c:	e6 95       	lsr	r30
    142e:	00 1c       	adc	r0, r0
    1430:	ca f7       	brpl	.-14     	; 0x1424 <__divsf3_pse+0x2c>
    1432:	2b d0       	rcall	.+86     	; 0x148a <__divsf3_pse+0x92>
    1434:	fe 2f       	mov	r31, r30
    1436:	29 d0       	rcall	.+82     	; 0x148a <__divsf3_pse+0x92>
    1438:	66 0f       	add	r22, r22
    143a:	77 1f       	adc	r23, r23
    143c:	88 1f       	adc	r24, r24
    143e:	bb 1f       	adc	r27, r27
    1440:	26 17       	cp	r18, r22
    1442:	37 07       	cpc	r19, r23
    1444:	48 07       	cpc	r20, r24
    1446:	ab 07       	cpc	r26, r27
    1448:	b0 e8       	ldi	r27, 0x80	; 128
    144a:	09 f0       	breq	.+2      	; 0x144e <__divsf3_pse+0x56>
    144c:	bb 0b       	sbc	r27, r27
    144e:	80 2d       	mov	r24, r0
    1450:	bf 01       	movw	r22, r30
    1452:	ff 27       	eor	r31, r31
    1454:	93 58       	subi	r25, 0x83	; 131
    1456:	5f 4f       	sbci	r21, 0xFF	; 255
    1458:	3a f0       	brmi	.+14     	; 0x1468 <__divsf3_pse+0x70>
    145a:	9e 3f       	cpi	r25, 0xFE	; 254
    145c:	51 05       	cpc	r21, r1
    145e:	78 f0       	brcs	.+30     	; 0x147e <__divsf3_pse+0x86>
    1460:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__fp_inf>
    1464:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__fp_szero>
    1468:	5f 3f       	cpi	r21, 0xFF	; 255
    146a:	e4 f3       	brlt	.-8      	; 0x1464 <__divsf3_pse+0x6c>
    146c:	98 3e       	cpi	r25, 0xE8	; 232
    146e:	d4 f3       	brlt	.-12     	; 0x1464 <__divsf3_pse+0x6c>
    1470:	86 95       	lsr	r24
    1472:	77 95       	ror	r23
    1474:	67 95       	ror	r22
    1476:	b7 95       	ror	r27
    1478:	f7 95       	ror	r31
    147a:	9f 5f       	subi	r25, 0xFF	; 255
    147c:	c9 f7       	brne	.-14     	; 0x1470 <__divsf3_pse+0x78>
    147e:	88 0f       	add	r24, r24
    1480:	91 1d       	adc	r25, r1
    1482:	96 95       	lsr	r25
    1484:	87 95       	ror	r24
    1486:	97 f9       	bld	r25, 7
    1488:	08 95       	ret
    148a:	e1 e0       	ldi	r30, 0x01	; 1
    148c:	66 0f       	add	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	88 1f       	adc	r24, r24
    1492:	bb 1f       	adc	r27, r27
    1494:	62 17       	cp	r22, r18
    1496:	73 07       	cpc	r23, r19
    1498:	84 07       	cpc	r24, r20
    149a:	ba 07       	cpc	r27, r26
    149c:	20 f0       	brcs	.+8      	; 0x14a6 <__divsf3_pse+0xae>
    149e:	62 1b       	sub	r22, r18
    14a0:	73 0b       	sbc	r23, r19
    14a2:	84 0b       	sbc	r24, r20
    14a4:	ba 0b       	sbc	r27, r26
    14a6:	ee 1f       	adc	r30, r30
    14a8:	88 f7       	brcc	.-30     	; 0x148c <__divsf3_pse+0x94>
    14aa:	e0 95       	com	r30
    14ac:	08 95       	ret

000014ae <__fixunssfsi>:
    14ae:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__fp_splitA>
    14b2:	88 f0       	brcs	.+34     	; 0x14d6 <__fixunssfsi+0x28>
    14b4:	9f 57       	subi	r25, 0x7F	; 127
    14b6:	98 f0       	brcs	.+38     	; 0x14de <__fixunssfsi+0x30>
    14b8:	b9 2f       	mov	r27, r25
    14ba:	99 27       	eor	r25, r25
    14bc:	b7 51       	subi	r27, 0x17	; 23
    14be:	b0 f0       	brcs	.+44     	; 0x14ec <__fixunssfsi+0x3e>
    14c0:	e1 f0       	breq	.+56     	; 0x14fa <__fixunssfsi+0x4c>
    14c2:	66 0f       	add	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	1a f0       	brmi	.+6      	; 0x14d2 <__fixunssfsi+0x24>
    14cc:	ba 95       	dec	r27
    14ce:	c9 f7       	brne	.-14     	; 0x14c2 <__fixunssfsi+0x14>
    14d0:	14 c0       	rjmp	.+40     	; 0x14fa <__fixunssfsi+0x4c>
    14d2:	b1 30       	cpi	r27, 0x01	; 1
    14d4:	91 f0       	breq	.+36     	; 0x14fa <__fixunssfsi+0x4c>
    14d6:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fp_zero>
    14da:	b1 e0       	ldi	r27, 0x01	; 1
    14dc:	08 95       	ret
    14de:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__fp_zero>
    14e2:	67 2f       	mov	r22, r23
    14e4:	78 2f       	mov	r23, r24
    14e6:	88 27       	eor	r24, r24
    14e8:	b8 5f       	subi	r27, 0xF8	; 248
    14ea:	39 f0       	breq	.+14     	; 0x14fa <__fixunssfsi+0x4c>
    14ec:	b9 3f       	cpi	r27, 0xF9	; 249
    14ee:	cc f3       	brlt	.-14     	; 0x14e2 <__fixunssfsi+0x34>
    14f0:	86 95       	lsr	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b3 95       	inc	r27
    14f8:	d9 f7       	brne	.-10     	; 0x14f0 <__fixunssfsi+0x42>
    14fa:	3e f4       	brtc	.+14     	; 0x150a <__fixunssfsi+0x5c>
    14fc:	90 95       	com	r25
    14fe:	80 95       	com	r24
    1500:	70 95       	com	r23
    1502:	61 95       	neg	r22
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	08 95       	ret

0000150c <__floatunsisf>:
    150c:	e8 94       	clt
    150e:	09 c0       	rjmp	.+18     	; 0x1522 <__floatsisf+0x12>

00001510 <__floatsisf>:
    1510:	97 fb       	bst	r25, 7
    1512:	3e f4       	brtc	.+14     	; 0x1522 <__floatsisf+0x12>
    1514:	90 95       	com	r25
    1516:	80 95       	com	r24
    1518:	70 95       	com	r23
    151a:	61 95       	neg	r22
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	8f 4f       	sbci	r24, 0xFF	; 255
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	99 23       	and	r25, r25
    1524:	a9 f0       	breq	.+42     	; 0x1550 <__floatsisf+0x40>
    1526:	f9 2f       	mov	r31, r25
    1528:	96 e9       	ldi	r25, 0x96	; 150
    152a:	bb 27       	eor	r27, r27
    152c:	93 95       	inc	r25
    152e:	f6 95       	lsr	r31
    1530:	87 95       	ror	r24
    1532:	77 95       	ror	r23
    1534:	67 95       	ror	r22
    1536:	b7 95       	ror	r27
    1538:	f1 11       	cpse	r31, r1
    153a:	f8 cf       	rjmp	.-16     	; 0x152c <__floatsisf+0x1c>
    153c:	fa f4       	brpl	.+62     	; 0x157c <__floatsisf+0x6c>
    153e:	bb 0f       	add	r27, r27
    1540:	11 f4       	brne	.+4      	; 0x1546 <__floatsisf+0x36>
    1542:	60 ff       	sbrs	r22, 0
    1544:	1b c0       	rjmp	.+54     	; 0x157c <__floatsisf+0x6c>
    1546:	6f 5f       	subi	r22, 0xFF	; 255
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	8f 4f       	sbci	r24, 0xFF	; 255
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	16 c0       	rjmp	.+44     	; 0x157c <__floatsisf+0x6c>
    1550:	88 23       	and	r24, r24
    1552:	11 f0       	breq	.+4      	; 0x1558 <__floatsisf+0x48>
    1554:	96 e9       	ldi	r25, 0x96	; 150
    1556:	11 c0       	rjmp	.+34     	; 0x157a <__floatsisf+0x6a>
    1558:	77 23       	and	r23, r23
    155a:	21 f0       	breq	.+8      	; 0x1564 <__floatsisf+0x54>
    155c:	9e e8       	ldi	r25, 0x8E	; 142
    155e:	87 2f       	mov	r24, r23
    1560:	76 2f       	mov	r23, r22
    1562:	05 c0       	rjmp	.+10     	; 0x156e <__floatsisf+0x5e>
    1564:	66 23       	and	r22, r22
    1566:	71 f0       	breq	.+28     	; 0x1584 <__floatsisf+0x74>
    1568:	96 e8       	ldi	r25, 0x86	; 134
    156a:	86 2f       	mov	r24, r22
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	2a f0       	brmi	.+10     	; 0x157c <__floatsisf+0x6c>
    1572:	9a 95       	dec	r25
    1574:	66 0f       	add	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	88 1f       	adc	r24, r24
    157a:	da f7       	brpl	.-10     	; 0x1572 <__floatsisf+0x62>
    157c:	88 0f       	add	r24, r24
    157e:	96 95       	lsr	r25
    1580:	87 95       	ror	r24
    1582:	97 f9       	bld	r25, 7
    1584:	08 95       	ret

00001586 <__fp_inf>:
    1586:	97 f9       	bld	r25, 7
    1588:	9f 67       	ori	r25, 0x7F	; 127
    158a:	80 e8       	ldi	r24, 0x80	; 128
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	08 95       	ret

00001592 <__fp_nan>:
    1592:	9f ef       	ldi	r25, 0xFF	; 255
    1594:	80 ec       	ldi	r24, 0xC0	; 192
    1596:	08 95       	ret

00001598 <__fp_pscA>:
    1598:	00 24       	eor	r0, r0
    159a:	0a 94       	dec	r0
    159c:	16 16       	cp	r1, r22
    159e:	17 06       	cpc	r1, r23
    15a0:	18 06       	cpc	r1, r24
    15a2:	09 06       	cpc	r0, r25
    15a4:	08 95       	ret

000015a6 <__fp_pscB>:
    15a6:	00 24       	eor	r0, r0
    15a8:	0a 94       	dec	r0
    15aa:	12 16       	cp	r1, r18
    15ac:	13 06       	cpc	r1, r19
    15ae:	14 06       	cpc	r1, r20
    15b0:	05 06       	cpc	r0, r21
    15b2:	08 95       	ret

000015b4 <__fp_round>:
    15b4:	09 2e       	mov	r0, r25
    15b6:	03 94       	inc	r0
    15b8:	00 0c       	add	r0, r0
    15ba:	11 f4       	brne	.+4      	; 0x15c0 <__fp_round+0xc>
    15bc:	88 23       	and	r24, r24
    15be:	52 f0       	brmi	.+20     	; 0x15d4 <__fp_round+0x20>
    15c0:	bb 0f       	add	r27, r27
    15c2:	40 f4       	brcc	.+16     	; 0x15d4 <__fp_round+0x20>
    15c4:	bf 2b       	or	r27, r31
    15c6:	11 f4       	brne	.+4      	; 0x15cc <__fp_round+0x18>
    15c8:	60 ff       	sbrs	r22, 0
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <__fp_round+0x20>
    15cc:	6f 5f       	subi	r22, 0xFF	; 255
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	8f 4f       	sbci	r24, 0xFF	; 255
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	08 95       	ret

000015d6 <__fp_split3>:
    15d6:	57 fd       	sbrc	r21, 7
    15d8:	90 58       	subi	r25, 0x80	; 128
    15da:	44 0f       	add	r20, r20
    15dc:	55 1f       	adc	r21, r21
    15de:	59 f0       	breq	.+22     	; 0x15f6 <__fp_splitA+0x10>
    15e0:	5f 3f       	cpi	r21, 0xFF	; 255
    15e2:	71 f0       	breq	.+28     	; 0x1600 <__fp_splitA+0x1a>
    15e4:	47 95       	ror	r20

000015e6 <__fp_splitA>:
    15e6:	88 0f       	add	r24, r24
    15e8:	97 fb       	bst	r25, 7
    15ea:	99 1f       	adc	r25, r25
    15ec:	61 f0       	breq	.+24     	; 0x1606 <__fp_splitA+0x20>
    15ee:	9f 3f       	cpi	r25, 0xFF	; 255
    15f0:	79 f0       	breq	.+30     	; 0x1610 <__fp_splitA+0x2a>
    15f2:	87 95       	ror	r24
    15f4:	08 95       	ret
    15f6:	12 16       	cp	r1, r18
    15f8:	13 06       	cpc	r1, r19
    15fa:	14 06       	cpc	r1, r20
    15fc:	55 1f       	adc	r21, r21
    15fe:	f2 cf       	rjmp	.-28     	; 0x15e4 <__fp_split3+0xe>
    1600:	46 95       	lsr	r20
    1602:	f1 df       	rcall	.-30     	; 0x15e6 <__fp_splitA>
    1604:	08 c0       	rjmp	.+16     	; 0x1616 <__fp_splitA+0x30>
    1606:	16 16       	cp	r1, r22
    1608:	17 06       	cpc	r1, r23
    160a:	18 06       	cpc	r1, r24
    160c:	99 1f       	adc	r25, r25
    160e:	f1 cf       	rjmp	.-30     	; 0x15f2 <__fp_splitA+0xc>
    1610:	86 95       	lsr	r24
    1612:	71 05       	cpc	r23, r1
    1614:	61 05       	cpc	r22, r1
    1616:	08 94       	sec
    1618:	08 95       	ret

0000161a <__fp_zero>:
    161a:	e8 94       	clt

0000161c <__fp_szero>:
    161c:	bb 27       	eor	r27, r27
    161e:	66 27       	eor	r22, r22
    1620:	77 27       	eor	r23, r23
    1622:	cb 01       	movw	r24, r22
    1624:	97 f9       	bld	r25, 7
    1626:	08 95       	ret

00001628 <__mulsf3>:
    1628:	0e 94 27 0b 	call	0x164e	; 0x164e <__mulsf3x>
    162c:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_round>
    1630:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__fp_pscA>
    1634:	38 f0       	brcs	.+14     	; 0x1644 <__mulsf3+0x1c>
    1636:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fp_pscB>
    163a:	20 f0       	brcs	.+8      	; 0x1644 <__mulsf3+0x1c>
    163c:	95 23       	and	r25, r21
    163e:	11 f0       	breq	.+4      	; 0x1644 <__mulsf3+0x1c>
    1640:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__fp_inf>
    1644:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_nan>
    1648:	11 24       	eor	r1, r1
    164a:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__fp_szero>

0000164e <__mulsf3x>:
    164e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__fp_split3>
    1652:	70 f3       	brcs	.-36     	; 0x1630 <__mulsf3+0x8>

00001654 <__mulsf3_pse>:
    1654:	95 9f       	mul	r25, r21
    1656:	c1 f3       	breq	.-16     	; 0x1648 <__mulsf3+0x20>
    1658:	95 0f       	add	r25, r21
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	55 1f       	adc	r21, r21
    165e:	62 9f       	mul	r22, r18
    1660:	f0 01       	movw	r30, r0
    1662:	72 9f       	mul	r23, r18
    1664:	bb 27       	eor	r27, r27
    1666:	f0 0d       	add	r31, r0
    1668:	b1 1d       	adc	r27, r1
    166a:	63 9f       	mul	r22, r19
    166c:	aa 27       	eor	r26, r26
    166e:	f0 0d       	add	r31, r0
    1670:	b1 1d       	adc	r27, r1
    1672:	aa 1f       	adc	r26, r26
    1674:	64 9f       	mul	r22, r20
    1676:	66 27       	eor	r22, r22
    1678:	b0 0d       	add	r27, r0
    167a:	a1 1d       	adc	r26, r1
    167c:	66 1f       	adc	r22, r22
    167e:	82 9f       	mul	r24, r18
    1680:	22 27       	eor	r18, r18
    1682:	b0 0d       	add	r27, r0
    1684:	a1 1d       	adc	r26, r1
    1686:	62 1f       	adc	r22, r18
    1688:	73 9f       	mul	r23, r19
    168a:	b0 0d       	add	r27, r0
    168c:	a1 1d       	adc	r26, r1
    168e:	62 1f       	adc	r22, r18
    1690:	83 9f       	mul	r24, r19
    1692:	a0 0d       	add	r26, r0
    1694:	61 1d       	adc	r22, r1
    1696:	22 1f       	adc	r18, r18
    1698:	74 9f       	mul	r23, r20
    169a:	33 27       	eor	r19, r19
    169c:	a0 0d       	add	r26, r0
    169e:	61 1d       	adc	r22, r1
    16a0:	23 1f       	adc	r18, r19
    16a2:	84 9f       	mul	r24, r20
    16a4:	60 0d       	add	r22, r0
    16a6:	21 1d       	adc	r18, r1
    16a8:	82 2f       	mov	r24, r18
    16aa:	76 2f       	mov	r23, r22
    16ac:	6a 2f       	mov	r22, r26
    16ae:	11 24       	eor	r1, r1
    16b0:	9f 57       	subi	r25, 0x7F	; 127
    16b2:	50 40       	sbci	r21, 0x00	; 0
    16b4:	9a f0       	brmi	.+38     	; 0x16dc <__mulsf3_pse+0x88>
    16b6:	f1 f0       	breq	.+60     	; 0x16f4 <__mulsf3_pse+0xa0>
    16b8:	88 23       	and	r24, r24
    16ba:	4a f0       	brmi	.+18     	; 0x16ce <__mulsf3_pse+0x7a>
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	bb 1f       	adc	r27, r27
    16c2:	66 1f       	adc	r22, r22
    16c4:	77 1f       	adc	r23, r23
    16c6:	88 1f       	adc	r24, r24
    16c8:	91 50       	subi	r25, 0x01	; 1
    16ca:	50 40       	sbci	r21, 0x00	; 0
    16cc:	a9 f7       	brne	.-22     	; 0x16b8 <__mulsf3_pse+0x64>
    16ce:	9e 3f       	cpi	r25, 0xFE	; 254
    16d0:	51 05       	cpc	r21, r1
    16d2:	80 f0       	brcs	.+32     	; 0x16f4 <__mulsf3_pse+0xa0>
    16d4:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__fp_inf>
    16d8:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__fp_szero>
    16dc:	5f 3f       	cpi	r21, 0xFF	; 255
    16de:	e4 f3       	brlt	.-8      	; 0x16d8 <__mulsf3_pse+0x84>
    16e0:	98 3e       	cpi	r25, 0xE8	; 232
    16e2:	d4 f3       	brlt	.-12     	; 0x16d8 <__mulsf3_pse+0x84>
    16e4:	86 95       	lsr	r24
    16e6:	77 95       	ror	r23
    16e8:	67 95       	ror	r22
    16ea:	b7 95       	ror	r27
    16ec:	f7 95       	ror	r31
    16ee:	e7 95       	ror	r30
    16f0:	9f 5f       	subi	r25, 0xFF	; 255
    16f2:	c1 f7       	brne	.-16     	; 0x16e4 <__mulsf3_pse+0x90>
    16f4:	fe 2b       	or	r31, r30
    16f6:	88 0f       	add	r24, r24
    16f8:	91 1d       	adc	r25, r1
    16fa:	96 95       	lsr	r25
    16fc:	87 95       	ror	r24
    16fe:	97 f9       	bld	r25, 7
    1700:	08 95       	ret

00001702 <__umulhisi3>:
    1702:	a2 9f       	mul	r26, r18
    1704:	b0 01       	movw	r22, r0
    1706:	b3 9f       	mul	r27, r19
    1708:	c0 01       	movw	r24, r0
    170a:	a3 9f       	mul	r26, r19
    170c:	70 0d       	add	r23, r0
    170e:	81 1d       	adc	r24, r1
    1710:	11 24       	eor	r1, r1
    1712:	91 1d       	adc	r25, r1
    1714:	b2 9f       	mul	r27, r18
    1716:	70 0d       	add	r23, r0
    1718:	81 1d       	adc	r24, r1
    171a:	11 24       	eor	r1, r1
    171c:	91 1d       	adc	r25, r1
    171e:	08 95       	ret

00001720 <__usmulhisi3>:
    1720:	0e 94 81 0b 	call	0x1702	; 0x1702 <__umulhisi3>

00001724 <__usmulhisi3_tail>:
    1724:	b7 ff       	sbrs	r27, 7
    1726:	08 95       	ret
    1728:	82 1b       	sub	r24, r18
    172a:	93 0b       	sbc	r25, r19
    172c:	08 95       	ret

0000172e <printf>:
    172e:	a0 e0       	ldi	r26, 0x00	; 0
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ed e9       	ldi	r30, 0x9D	; 157
    1734:	fb e0       	ldi	r31, 0x0B	; 11
    1736:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__prologue_saves__+0x20>
    173a:	ae 01       	movw	r20, r28
    173c:	4b 5f       	subi	r20, 0xFB	; 251
    173e:	5f 4f       	sbci	r21, 0xFF	; 255
    1740:	fa 01       	movw	r30, r20
    1742:	61 91       	ld	r22, Z+
    1744:	71 91       	ld	r23, Z+
    1746:	af 01       	movw	r20, r30
    1748:	80 91 27 02 	lds	r24, 0x0227
    174c:	90 91 28 02 	lds	r25, 0x0228
    1750:	0e 94 00 0c 	call	0x1800	; 0x1800 <vfprintf>
    1754:	e2 e0       	ldi	r30, 0x02	; 2
    1756:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__epilogue_restores__+0x20>

0000175a <puts>:
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	e0 91 27 02 	lds	r30, 0x0227
    1766:	f0 91 28 02 	lds	r31, 0x0228
    176a:	23 81       	ldd	r18, Z+3	; 0x03
    176c:	21 ff       	sbrs	r18, 1
    176e:	1b c0       	rjmp	.+54     	; 0x17a6 <puts+0x4c>
    1770:	8c 01       	movw	r16, r24
    1772:	d0 e0       	ldi	r29, 0x00	; 0
    1774:	c0 e0       	ldi	r28, 0x00	; 0
    1776:	f8 01       	movw	r30, r16
    1778:	81 91       	ld	r24, Z+
    177a:	8f 01       	movw	r16, r30
    177c:	60 91 27 02 	lds	r22, 0x0227
    1780:	70 91 28 02 	lds	r23, 0x0228
    1784:	db 01       	movw	r26, r22
    1786:	18 96       	adiw	r26, 0x08	; 8
    1788:	ed 91       	ld	r30, X+
    178a:	fc 91       	ld	r31, X
    178c:	19 97       	sbiw	r26, 0x09	; 9
    178e:	88 23       	and	r24, r24
    1790:	31 f0       	breq	.+12     	; 0x179e <puts+0x44>
    1792:	09 95       	icall
    1794:	89 2b       	or	r24, r25
    1796:	79 f3       	breq	.-34     	; 0x1776 <puts+0x1c>
    1798:	df ef       	ldi	r29, 0xFF	; 255
    179a:	cf ef       	ldi	r28, 0xFF	; 255
    179c:	ec cf       	rjmp	.-40     	; 0x1776 <puts+0x1c>
    179e:	8a e0       	ldi	r24, 0x0A	; 10
    17a0:	09 95       	icall
    17a2:	89 2b       	or	r24, r25
    17a4:	19 f0       	breq	.+6      	; 0x17ac <puts+0x52>
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	9f ef       	ldi	r25, 0xFF	; 255
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <puts+0x56>
    17ac:	8d 2f       	mov	r24, r29
    17ae:	9c 2f       	mov	r25, r28
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <sprintf>:
    17ba:	ae e0       	ldi	r26, 0x0E	; 14
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e3 ee       	ldi	r30, 0xE3	; 227
    17c0:	fb e0       	ldi	r31, 0x0B	; 11
    17c2:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__prologue_saves__+0x1c>
    17c6:	0d 89       	ldd	r16, Y+21	; 0x15
    17c8:	1e 89       	ldd	r17, Y+22	; 0x16
    17ca:	86 e0       	ldi	r24, 0x06	; 6
    17cc:	8c 83       	std	Y+4, r24	; 0x04
    17ce:	1a 83       	std	Y+2, r17	; 0x02
    17d0:	09 83       	std	Y+1, r16	; 0x01
    17d2:	8f ef       	ldi	r24, 0xFF	; 255
    17d4:	9f e7       	ldi	r25, 0x7F	; 127
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	ae 01       	movw	r20, r28
    17dc:	47 5e       	subi	r20, 0xE7	; 231
    17de:	5f 4f       	sbci	r21, 0xFF	; 255
    17e0:	6f 89       	ldd	r22, Y+23	; 0x17
    17e2:	78 8d       	ldd	r23, Y+24	; 0x18
    17e4:	ce 01       	movw	r24, r28
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	0e 94 00 0c 	call	0x1800	; 0x1800 <vfprintf>
    17ec:	2f 81       	ldd	r18, Y+7	; 0x07
    17ee:	38 85       	ldd	r19, Y+8	; 0x08
    17f0:	f8 01       	movw	r30, r16
    17f2:	e2 0f       	add	r30, r18
    17f4:	f3 1f       	adc	r31, r19
    17f6:	10 82       	st	Z, r1
    17f8:	2e 96       	adiw	r28, 0x0e	; 14
    17fa:	e4 e0       	ldi	r30, 0x04	; 4
    17fc:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__epilogue_restores__+0x1c>

00001800 <vfprintf>:
    1800:	ac e0       	ldi	r26, 0x0C	; 12
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e6 e0       	ldi	r30, 0x06	; 6
    1806:	fc e0       	ldi	r31, 0x0C	; 12
    1808:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__prologue_saves__>
    180c:	7c 01       	movw	r14, r24
    180e:	6b 01       	movw	r12, r22
    1810:	8a 01       	movw	r16, r20
    1812:	fc 01       	movw	r30, r24
    1814:	17 82       	std	Z+7, r1	; 0x07
    1816:	16 82       	std	Z+6, r1	; 0x06
    1818:	83 81       	ldd	r24, Z+3	; 0x03
    181a:	81 ff       	sbrs	r24, 1
    181c:	bd c1       	rjmp	.+890    	; 0x1b98 <vfprintf+0x398>
    181e:	ce 01       	movw	r24, r28
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	4c 01       	movw	r8, r24
    1824:	f7 01       	movw	r30, r14
    1826:	93 81       	ldd	r25, Z+3	; 0x03
    1828:	f6 01       	movw	r30, r12
    182a:	93 fd       	sbrc	r25, 3
    182c:	85 91       	lpm	r24, Z+
    182e:	93 ff       	sbrs	r25, 3
    1830:	81 91       	ld	r24, Z+
    1832:	6f 01       	movw	r12, r30
    1834:	88 23       	and	r24, r24
    1836:	09 f4       	brne	.+2      	; 0x183a <vfprintf+0x3a>
    1838:	ab c1       	rjmp	.+854    	; 0x1b90 <vfprintf+0x390>
    183a:	85 32       	cpi	r24, 0x25	; 37
    183c:	39 f4       	brne	.+14     	; 0x184c <vfprintf+0x4c>
    183e:	93 fd       	sbrc	r25, 3
    1840:	85 91       	lpm	r24, Z+
    1842:	93 ff       	sbrs	r25, 3
    1844:	81 91       	ld	r24, Z+
    1846:	6f 01       	movw	r12, r30
    1848:	85 32       	cpi	r24, 0x25	; 37
    184a:	29 f4       	brne	.+10     	; 0x1856 <vfprintf+0x56>
    184c:	b7 01       	movw	r22, r14
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <fputc>
    1854:	e7 cf       	rjmp	.-50     	; 0x1824 <vfprintf+0x24>
    1856:	51 2c       	mov	r5, r1
    1858:	31 2c       	mov	r3, r1
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	20 32       	cpi	r18, 0x20	; 32
    185e:	a0 f4       	brcc	.+40     	; 0x1888 <vfprintf+0x88>
    1860:	8b 32       	cpi	r24, 0x2B	; 43
    1862:	69 f0       	breq	.+26     	; 0x187e <vfprintf+0x7e>
    1864:	30 f4       	brcc	.+12     	; 0x1872 <vfprintf+0x72>
    1866:	80 32       	cpi	r24, 0x20	; 32
    1868:	59 f0       	breq	.+22     	; 0x1880 <vfprintf+0x80>
    186a:	83 32       	cpi	r24, 0x23	; 35
    186c:	69 f4       	brne	.+26     	; 0x1888 <vfprintf+0x88>
    186e:	20 61       	ori	r18, 0x10	; 16
    1870:	2c c0       	rjmp	.+88     	; 0x18ca <vfprintf+0xca>
    1872:	8d 32       	cpi	r24, 0x2D	; 45
    1874:	39 f0       	breq	.+14     	; 0x1884 <vfprintf+0x84>
    1876:	80 33       	cpi	r24, 0x30	; 48
    1878:	39 f4       	brne	.+14     	; 0x1888 <vfprintf+0x88>
    187a:	21 60       	ori	r18, 0x01	; 1
    187c:	26 c0       	rjmp	.+76     	; 0x18ca <vfprintf+0xca>
    187e:	22 60       	ori	r18, 0x02	; 2
    1880:	24 60       	ori	r18, 0x04	; 4
    1882:	23 c0       	rjmp	.+70     	; 0x18ca <vfprintf+0xca>
    1884:	28 60       	ori	r18, 0x08	; 8
    1886:	21 c0       	rjmp	.+66     	; 0x18ca <vfprintf+0xca>
    1888:	27 fd       	sbrc	r18, 7
    188a:	27 c0       	rjmp	.+78     	; 0x18da <vfprintf+0xda>
    188c:	30 ed       	ldi	r19, 0xD0	; 208
    188e:	38 0f       	add	r19, r24
    1890:	3a 30       	cpi	r19, 0x0A	; 10
    1892:	78 f4       	brcc	.+30     	; 0x18b2 <vfprintf+0xb2>
    1894:	26 ff       	sbrs	r18, 6
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <vfprintf+0xa4>
    1898:	fa e0       	ldi	r31, 0x0A	; 10
    189a:	5f 9e       	mul	r5, r31
    189c:	30 0d       	add	r19, r0
    189e:	11 24       	eor	r1, r1
    18a0:	53 2e       	mov	r5, r19
    18a2:	13 c0       	rjmp	.+38     	; 0x18ca <vfprintf+0xca>
    18a4:	8a e0       	ldi	r24, 0x0A	; 10
    18a6:	38 9e       	mul	r3, r24
    18a8:	30 0d       	add	r19, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	33 2e       	mov	r3, r19
    18ae:	20 62       	ori	r18, 0x20	; 32
    18b0:	0c c0       	rjmp	.+24     	; 0x18ca <vfprintf+0xca>
    18b2:	8e 32       	cpi	r24, 0x2E	; 46
    18b4:	21 f4       	brne	.+8      	; 0x18be <vfprintf+0xbe>
    18b6:	26 fd       	sbrc	r18, 6
    18b8:	6b c1       	rjmp	.+726    	; 0x1b90 <vfprintf+0x390>
    18ba:	20 64       	ori	r18, 0x40	; 64
    18bc:	06 c0       	rjmp	.+12     	; 0x18ca <vfprintf+0xca>
    18be:	8c 36       	cpi	r24, 0x6C	; 108
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <vfprintf+0xc6>
    18c2:	20 68       	ori	r18, 0x80	; 128
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <vfprintf+0xca>
    18c6:	88 36       	cpi	r24, 0x68	; 104
    18c8:	41 f4       	brne	.+16     	; 0x18da <vfprintf+0xda>
    18ca:	f6 01       	movw	r30, r12
    18cc:	93 fd       	sbrc	r25, 3
    18ce:	85 91       	lpm	r24, Z+
    18d0:	93 ff       	sbrs	r25, 3
    18d2:	81 91       	ld	r24, Z+
    18d4:	6f 01       	movw	r12, r30
    18d6:	81 11       	cpse	r24, r1
    18d8:	c1 cf       	rjmp	.-126    	; 0x185c <vfprintf+0x5c>
    18da:	98 2f       	mov	r25, r24
    18dc:	9f 7d       	andi	r25, 0xDF	; 223
    18de:	95 54       	subi	r25, 0x45	; 69
    18e0:	93 30       	cpi	r25, 0x03	; 3
    18e2:	28 f4       	brcc	.+10     	; 0x18ee <vfprintf+0xee>
    18e4:	0c 5f       	subi	r16, 0xFC	; 252
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	ff e3       	ldi	r31, 0x3F	; 63
    18ea:	f9 83       	std	Y+1, r31	; 0x01
    18ec:	0d c0       	rjmp	.+26     	; 0x1908 <vfprintf+0x108>
    18ee:	83 36       	cpi	r24, 0x63	; 99
    18f0:	31 f0       	breq	.+12     	; 0x18fe <vfprintf+0xfe>
    18f2:	83 37       	cpi	r24, 0x73	; 115
    18f4:	71 f0       	breq	.+28     	; 0x1912 <vfprintf+0x112>
    18f6:	83 35       	cpi	r24, 0x53	; 83
    18f8:	09 f0       	breq	.+2      	; 0x18fc <vfprintf+0xfc>
    18fa:	5b c0       	rjmp	.+182    	; 0x19b2 <vfprintf+0x1b2>
    18fc:	22 c0       	rjmp	.+68     	; 0x1942 <vfprintf+0x142>
    18fe:	f8 01       	movw	r30, r16
    1900:	80 81       	ld	r24, Z
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	0e 5f       	subi	r16, 0xFE	; 254
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	44 24       	eor	r4, r4
    190a:	43 94       	inc	r4
    190c:	51 2c       	mov	r5, r1
    190e:	54 01       	movw	r10, r8
    1910:	15 c0       	rjmp	.+42     	; 0x193c <vfprintf+0x13c>
    1912:	38 01       	movw	r6, r16
    1914:	f2 e0       	ldi	r31, 0x02	; 2
    1916:	6f 0e       	add	r6, r31
    1918:	71 1c       	adc	r7, r1
    191a:	f8 01       	movw	r30, r16
    191c:	a0 80       	ld	r10, Z
    191e:	b1 80       	ldd	r11, Z+1	; 0x01
    1920:	26 ff       	sbrs	r18, 6
    1922:	03 c0       	rjmp	.+6      	; 0x192a <vfprintf+0x12a>
    1924:	65 2d       	mov	r22, r5
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x12e>
    192a:	6f ef       	ldi	r22, 0xFF	; 255
    192c:	7f ef       	ldi	r23, 0xFF	; 255
    192e:	c5 01       	movw	r24, r10
    1930:	2c 87       	std	Y+12, r18	; 0x0c
    1932:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <strnlen>
    1936:	2c 01       	movw	r4, r24
    1938:	83 01       	movw	r16, r6
    193a:	2c 85       	ldd	r18, Y+12	; 0x0c
    193c:	2f 77       	andi	r18, 0x7F	; 127
    193e:	22 2e       	mov	r2, r18
    1940:	17 c0       	rjmp	.+46     	; 0x1970 <vfprintf+0x170>
    1942:	38 01       	movw	r6, r16
    1944:	f2 e0       	ldi	r31, 0x02	; 2
    1946:	6f 0e       	add	r6, r31
    1948:	71 1c       	adc	r7, r1
    194a:	f8 01       	movw	r30, r16
    194c:	a0 80       	ld	r10, Z
    194e:	b1 80       	ldd	r11, Z+1	; 0x01
    1950:	26 ff       	sbrs	r18, 6
    1952:	03 c0       	rjmp	.+6      	; 0x195a <vfprintf+0x15a>
    1954:	65 2d       	mov	r22, r5
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	02 c0       	rjmp	.+4      	; 0x195e <vfprintf+0x15e>
    195a:	6f ef       	ldi	r22, 0xFF	; 255
    195c:	7f ef       	ldi	r23, 0xFF	; 255
    195e:	c5 01       	movw	r24, r10
    1960:	2c 87       	std	Y+12, r18	; 0x0c
    1962:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strnlen_P>
    1966:	2c 01       	movw	r4, r24
    1968:	2c 85       	ldd	r18, Y+12	; 0x0c
    196a:	20 68       	ori	r18, 0x80	; 128
    196c:	22 2e       	mov	r2, r18
    196e:	83 01       	movw	r16, r6
    1970:	23 fc       	sbrc	r2, 3
    1972:	1b c0       	rjmp	.+54     	; 0x19aa <vfprintf+0x1aa>
    1974:	83 2d       	mov	r24, r3
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	48 16       	cp	r4, r24
    197a:	59 06       	cpc	r5, r25
    197c:	b0 f4       	brcc	.+44     	; 0x19aa <vfprintf+0x1aa>
    197e:	b7 01       	movw	r22, r14
    1980:	80 e2       	ldi	r24, 0x20	; 32
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <fputc>
    1988:	3a 94       	dec	r3
    198a:	f4 cf       	rjmp	.-24     	; 0x1974 <vfprintf+0x174>
    198c:	f5 01       	movw	r30, r10
    198e:	27 fc       	sbrc	r2, 7
    1990:	85 91       	lpm	r24, Z+
    1992:	27 fe       	sbrs	r2, 7
    1994:	81 91       	ld	r24, Z+
    1996:	5f 01       	movw	r10, r30
    1998:	b7 01       	movw	r22, r14
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <fputc>
    19a0:	31 10       	cpse	r3, r1
    19a2:	3a 94       	dec	r3
    19a4:	f1 e0       	ldi	r31, 0x01	; 1
    19a6:	4f 1a       	sub	r4, r31
    19a8:	51 08       	sbc	r5, r1
    19aa:	41 14       	cp	r4, r1
    19ac:	51 04       	cpc	r5, r1
    19ae:	71 f7       	brne	.-36     	; 0x198c <vfprintf+0x18c>
    19b0:	e5 c0       	rjmp	.+458    	; 0x1b7c <vfprintf+0x37c>
    19b2:	84 36       	cpi	r24, 0x64	; 100
    19b4:	11 f0       	breq	.+4      	; 0x19ba <vfprintf+0x1ba>
    19b6:	89 36       	cpi	r24, 0x69	; 105
    19b8:	39 f5       	brne	.+78     	; 0x1a08 <vfprintf+0x208>
    19ba:	f8 01       	movw	r30, r16
    19bc:	27 ff       	sbrs	r18, 7
    19be:	07 c0       	rjmp	.+14     	; 0x19ce <vfprintf+0x1ce>
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	0c 5f       	subi	r16, 0xFC	; 252
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	08 c0       	rjmp	.+16     	; 0x19de <vfprintf+0x1de>
    19ce:	60 81       	ld	r22, Z
    19d0:	71 81       	ldd	r23, Z+1	; 0x01
    19d2:	07 2e       	mov	r0, r23
    19d4:	00 0c       	add	r0, r0
    19d6:	88 0b       	sbc	r24, r24
    19d8:	99 0b       	sbc	r25, r25
    19da:	0e 5f       	subi	r16, 0xFE	; 254
    19dc:	1f 4f       	sbci	r17, 0xFF	; 255
    19de:	2f 76       	andi	r18, 0x6F	; 111
    19e0:	72 2e       	mov	r7, r18
    19e2:	97 ff       	sbrs	r25, 7
    19e4:	09 c0       	rjmp	.+18     	; 0x19f8 <vfprintf+0x1f8>
    19e6:	90 95       	com	r25
    19e8:	80 95       	com	r24
    19ea:	70 95       	com	r23
    19ec:	61 95       	neg	r22
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	8f 4f       	sbci	r24, 0xFF	; 255
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	20 68       	ori	r18, 0x80	; 128
    19f6:	72 2e       	mov	r7, r18
    19f8:	2a e0       	ldi	r18, 0x0A	; 10
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	a4 01       	movw	r20, r8
    19fe:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__ultoa_invert>
    1a02:	a8 2e       	mov	r10, r24
    1a04:	a8 18       	sub	r10, r8
    1a06:	44 c0       	rjmp	.+136    	; 0x1a90 <vfprintf+0x290>
    1a08:	85 37       	cpi	r24, 0x75	; 117
    1a0a:	29 f4       	brne	.+10     	; 0x1a16 <vfprintf+0x216>
    1a0c:	2f 7e       	andi	r18, 0xEF	; 239
    1a0e:	b2 2e       	mov	r11, r18
    1a10:	2a e0       	ldi	r18, 0x0A	; 10
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	25 c0       	rjmp	.+74     	; 0x1a60 <vfprintf+0x260>
    1a16:	f2 2f       	mov	r31, r18
    1a18:	f9 7f       	andi	r31, 0xF9	; 249
    1a1a:	bf 2e       	mov	r11, r31
    1a1c:	8f 36       	cpi	r24, 0x6F	; 111
    1a1e:	c1 f0       	breq	.+48     	; 0x1a50 <vfprintf+0x250>
    1a20:	18 f4       	brcc	.+6      	; 0x1a28 <vfprintf+0x228>
    1a22:	88 35       	cpi	r24, 0x58	; 88
    1a24:	79 f0       	breq	.+30     	; 0x1a44 <vfprintf+0x244>
    1a26:	b4 c0       	rjmp	.+360    	; 0x1b90 <vfprintf+0x390>
    1a28:	80 37       	cpi	r24, 0x70	; 112
    1a2a:	19 f0       	breq	.+6      	; 0x1a32 <vfprintf+0x232>
    1a2c:	88 37       	cpi	r24, 0x78	; 120
    1a2e:	21 f0       	breq	.+8      	; 0x1a38 <vfprintf+0x238>
    1a30:	af c0       	rjmp	.+350    	; 0x1b90 <vfprintf+0x390>
    1a32:	2f 2f       	mov	r18, r31
    1a34:	20 61       	ori	r18, 0x10	; 16
    1a36:	b2 2e       	mov	r11, r18
    1a38:	b4 fe       	sbrs	r11, 4
    1a3a:	0d c0       	rjmp	.+26     	; 0x1a56 <vfprintf+0x256>
    1a3c:	8b 2d       	mov	r24, r11
    1a3e:	84 60       	ori	r24, 0x04	; 4
    1a40:	b8 2e       	mov	r11, r24
    1a42:	09 c0       	rjmp	.+18     	; 0x1a56 <vfprintf+0x256>
    1a44:	24 ff       	sbrs	r18, 4
    1a46:	0a c0       	rjmp	.+20     	; 0x1a5c <vfprintf+0x25c>
    1a48:	9f 2f       	mov	r25, r31
    1a4a:	96 60       	ori	r25, 0x06	; 6
    1a4c:	b9 2e       	mov	r11, r25
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <vfprintf+0x25c>
    1a50:	28 e0       	ldi	r18, 0x08	; 8
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	05 c0       	rjmp	.+10     	; 0x1a60 <vfprintf+0x260>
    1a56:	20 e1       	ldi	r18, 0x10	; 16
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <vfprintf+0x260>
    1a5c:	20 e1       	ldi	r18, 0x10	; 16
    1a5e:	32 e0       	ldi	r19, 0x02	; 2
    1a60:	f8 01       	movw	r30, r16
    1a62:	b7 fe       	sbrs	r11, 7
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <vfprintf+0x274>
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	0c 5f       	subi	r16, 0xFC	; 252
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
    1a72:	06 c0       	rjmp	.+12     	; 0x1a80 <vfprintf+0x280>
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 5f       	subi	r16, 0xFE	; 254
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	a4 01       	movw	r20, r8
    1a82:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__ultoa_invert>
    1a86:	a8 2e       	mov	r10, r24
    1a88:	a8 18       	sub	r10, r8
    1a8a:	fb 2d       	mov	r31, r11
    1a8c:	ff 77       	andi	r31, 0x7F	; 127
    1a8e:	7f 2e       	mov	r7, r31
    1a90:	76 fe       	sbrs	r7, 6
    1a92:	0b c0       	rjmp	.+22     	; 0x1aaa <vfprintf+0x2aa>
    1a94:	37 2d       	mov	r19, r7
    1a96:	3e 7f       	andi	r19, 0xFE	; 254
    1a98:	a5 14       	cp	r10, r5
    1a9a:	50 f4       	brcc	.+20     	; 0x1ab0 <vfprintf+0x2b0>
    1a9c:	74 fe       	sbrs	r7, 4
    1a9e:	0a c0       	rjmp	.+20     	; 0x1ab4 <vfprintf+0x2b4>
    1aa0:	72 fc       	sbrc	r7, 2
    1aa2:	08 c0       	rjmp	.+16     	; 0x1ab4 <vfprintf+0x2b4>
    1aa4:	37 2d       	mov	r19, r7
    1aa6:	3e 7e       	andi	r19, 0xEE	; 238
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <vfprintf+0x2b4>
    1aaa:	ba 2c       	mov	r11, r10
    1aac:	37 2d       	mov	r19, r7
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <vfprintf+0x2b6>
    1ab0:	ba 2c       	mov	r11, r10
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <vfprintf+0x2b6>
    1ab4:	b5 2c       	mov	r11, r5
    1ab6:	34 ff       	sbrs	r19, 4
    1ab8:	0d c0       	rjmp	.+26     	; 0x1ad4 <vfprintf+0x2d4>
    1aba:	fe 01       	movw	r30, r28
    1abc:	ea 0d       	add	r30, r10
    1abe:	f1 1d       	adc	r31, r1
    1ac0:	80 81       	ld	r24, Z
    1ac2:	80 33       	cpi	r24, 0x30	; 48
    1ac4:	11 f4       	brne	.+4      	; 0x1aca <vfprintf+0x2ca>
    1ac6:	39 7e       	andi	r19, 0xE9	; 233
    1ac8:	09 c0       	rjmp	.+18     	; 0x1adc <vfprintf+0x2dc>
    1aca:	32 ff       	sbrs	r19, 2
    1acc:	06 c0       	rjmp	.+12     	; 0x1ada <vfprintf+0x2da>
    1ace:	b3 94       	inc	r11
    1ad0:	b3 94       	inc	r11
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <vfprintf+0x2dc>
    1ad4:	83 2f       	mov	r24, r19
    1ad6:	86 78       	andi	r24, 0x86	; 134
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <vfprintf+0x2dc>
    1ada:	b3 94       	inc	r11
    1adc:	33 fd       	sbrc	r19, 3
    1ade:	13 c0       	rjmp	.+38     	; 0x1b06 <vfprintf+0x306>
    1ae0:	30 ff       	sbrs	r19, 0
    1ae2:	06 c0       	rjmp	.+12     	; 0x1af0 <vfprintf+0x2f0>
    1ae4:	5a 2c       	mov	r5, r10
    1ae6:	b3 14       	cp	r11, r3
    1ae8:	18 f4       	brcc	.+6      	; 0x1af0 <vfprintf+0x2f0>
    1aea:	53 0c       	add	r5, r3
    1aec:	5b 18       	sub	r5, r11
    1aee:	b3 2c       	mov	r11, r3
    1af0:	b3 14       	cp	r11, r3
    1af2:	68 f4       	brcc	.+26     	; 0x1b0e <vfprintf+0x30e>
    1af4:	b7 01       	movw	r22, r14
    1af6:	80 e2       	ldi	r24, 0x20	; 32
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	3c 87       	std	Y+12, r19	; 0x0c
    1afc:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <fputc>
    1b00:	b3 94       	inc	r11
    1b02:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b04:	f5 cf       	rjmp	.-22     	; 0x1af0 <vfprintf+0x2f0>
    1b06:	b3 14       	cp	r11, r3
    1b08:	10 f4       	brcc	.+4      	; 0x1b0e <vfprintf+0x30e>
    1b0a:	3b 18       	sub	r3, r11
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <vfprintf+0x310>
    1b0e:	31 2c       	mov	r3, r1
    1b10:	34 ff       	sbrs	r19, 4
    1b12:	12 c0       	rjmp	.+36     	; 0x1b38 <vfprintf+0x338>
    1b14:	b7 01       	movw	r22, r14
    1b16:	80 e3       	ldi	r24, 0x30	; 48
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	3c 87       	std	Y+12, r19	; 0x0c
    1b1c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <fputc>
    1b20:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b22:	32 ff       	sbrs	r19, 2
    1b24:	17 c0       	rjmp	.+46     	; 0x1b54 <vfprintf+0x354>
    1b26:	31 fd       	sbrc	r19, 1
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <vfprintf+0x330>
    1b2a:	88 e7       	ldi	r24, 0x78	; 120
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <vfprintf+0x334>
    1b30:	88 e5       	ldi	r24, 0x58	; 88
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	b7 01       	movw	r22, r14
    1b36:	0c c0       	rjmp	.+24     	; 0x1b50 <vfprintf+0x350>
    1b38:	83 2f       	mov	r24, r19
    1b3a:	86 78       	andi	r24, 0x86	; 134
    1b3c:	59 f0       	breq	.+22     	; 0x1b54 <vfprintf+0x354>
    1b3e:	31 ff       	sbrs	r19, 1
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <vfprintf+0x346>
    1b42:	8b e2       	ldi	r24, 0x2B	; 43
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <vfprintf+0x348>
    1b46:	80 e2       	ldi	r24, 0x20	; 32
    1b48:	37 fd       	sbrc	r19, 7
    1b4a:	8d e2       	ldi	r24, 0x2D	; 45
    1b4c:	b7 01       	movw	r22, r14
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <fputc>
    1b54:	a5 14       	cp	r10, r5
    1b56:	38 f4       	brcc	.+14     	; 0x1b66 <vfprintf+0x366>
    1b58:	b7 01       	movw	r22, r14
    1b5a:	80 e3       	ldi	r24, 0x30	; 48
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <fputc>
    1b62:	5a 94       	dec	r5
    1b64:	f7 cf       	rjmp	.-18     	; 0x1b54 <vfprintf+0x354>
    1b66:	aa 94       	dec	r10
    1b68:	f4 01       	movw	r30, r8
    1b6a:	ea 0d       	add	r30, r10
    1b6c:	f1 1d       	adc	r31, r1
    1b6e:	80 81       	ld	r24, Z
    1b70:	b7 01       	movw	r22, r14
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <fputc>
    1b78:	a1 10       	cpse	r10, r1
    1b7a:	f5 cf       	rjmp	.-22     	; 0x1b66 <vfprintf+0x366>
    1b7c:	33 20       	and	r3, r3
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <vfprintf+0x382>
    1b80:	51 ce       	rjmp	.-862    	; 0x1824 <vfprintf+0x24>
    1b82:	b7 01       	movw	r22, r14
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <fputc>
    1b8c:	3a 94       	dec	r3
    1b8e:	f6 cf       	rjmp	.-20     	; 0x1b7c <vfprintf+0x37c>
    1b90:	f7 01       	movw	r30, r14
    1b92:	86 81       	ldd	r24, Z+6	; 0x06
    1b94:	97 81       	ldd	r25, Z+7	; 0x07
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <vfprintf+0x39c>
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	9f ef       	ldi	r25, 0xFF	; 255
    1b9c:	2c 96       	adiw	r28, 0x0c	; 12
    1b9e:	e2 e1       	ldi	r30, 0x12	; 18
    1ba0:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__epilogue_restores__>

00001ba4 <strnlen_P>:
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	05 90       	lpm	r0, Z+
    1ba8:	61 50       	subi	r22, 0x01	; 1
    1baa:	70 40       	sbci	r23, 0x00	; 0
    1bac:	01 10       	cpse	r0, r1
    1bae:	d8 f7       	brcc	.-10     	; 0x1ba6 <strnlen_P+0x2>
    1bb0:	80 95       	com	r24
    1bb2:	90 95       	com	r25
    1bb4:	8e 0f       	add	r24, r30
    1bb6:	9f 1f       	adc	r25, r31
    1bb8:	08 95       	ret

00001bba <strnlen>:
    1bba:	fc 01       	movw	r30, r24
    1bbc:	61 50       	subi	r22, 0x01	; 1
    1bbe:	70 40       	sbci	r23, 0x00	; 0
    1bc0:	01 90       	ld	r0, Z+
    1bc2:	01 10       	cpse	r0, r1
    1bc4:	d8 f7       	brcc	.-10     	; 0x1bbc <strnlen+0x2>
    1bc6:	80 95       	com	r24
    1bc8:	90 95       	com	r25
    1bca:	8e 0f       	add	r24, r30
    1bcc:	9f 1f       	adc	r25, r31
    1bce:	08 95       	ret

00001bd0 <fputc>:
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	fb 01       	movw	r30, r22
    1bda:	23 81       	ldd	r18, Z+3	; 0x03
    1bdc:	21 fd       	sbrc	r18, 1
    1bde:	03 c0       	rjmp	.+6      	; 0x1be6 <fputc+0x16>
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	9f ef       	ldi	r25, 0xFF	; 255
    1be4:	28 c0       	rjmp	.+80     	; 0x1c36 <fputc+0x66>
    1be6:	22 ff       	sbrs	r18, 2
    1be8:	16 c0       	rjmp	.+44     	; 0x1c16 <fputc+0x46>
    1bea:	46 81       	ldd	r20, Z+6	; 0x06
    1bec:	57 81       	ldd	r21, Z+7	; 0x07
    1bee:	24 81       	ldd	r18, Z+4	; 0x04
    1bf0:	35 81       	ldd	r19, Z+5	; 0x05
    1bf2:	42 17       	cp	r20, r18
    1bf4:	53 07       	cpc	r21, r19
    1bf6:	44 f4       	brge	.+16     	; 0x1c08 <fputc+0x38>
    1bf8:	a0 81       	ld	r26, Z
    1bfa:	b1 81       	ldd	r27, Z+1	; 0x01
    1bfc:	9d 01       	movw	r18, r26
    1bfe:	2f 5f       	subi	r18, 0xFF	; 255
    1c00:	3f 4f       	sbci	r19, 0xFF	; 255
    1c02:	31 83       	std	Z+1, r19	; 0x01
    1c04:	20 83       	st	Z, r18
    1c06:	8c 93       	st	X, r24
    1c08:	26 81       	ldd	r18, Z+6	; 0x06
    1c0a:	37 81       	ldd	r19, Z+7	; 0x07
    1c0c:	2f 5f       	subi	r18, 0xFF	; 255
    1c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c10:	37 83       	std	Z+7, r19	; 0x07
    1c12:	26 83       	std	Z+6, r18	; 0x06
    1c14:	10 c0       	rjmp	.+32     	; 0x1c36 <fputc+0x66>
    1c16:	eb 01       	movw	r28, r22
    1c18:	09 2f       	mov	r16, r25
    1c1a:	18 2f       	mov	r17, r24
    1c1c:	00 84       	ldd	r0, Z+8	; 0x08
    1c1e:	f1 85       	ldd	r31, Z+9	; 0x09
    1c20:	e0 2d       	mov	r30, r0
    1c22:	09 95       	icall
    1c24:	89 2b       	or	r24, r25
    1c26:	e1 f6       	brne	.-72     	; 0x1be0 <fputc+0x10>
    1c28:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	9f 83       	std	Y+7, r25	; 0x07
    1c30:	8e 83       	std	Y+6, r24	; 0x06
    1c32:	81 2f       	mov	r24, r17
    1c34:	90 2f       	mov	r25, r16
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	1f 91       	pop	r17
    1c3c:	0f 91       	pop	r16
    1c3e:	08 95       	ret

00001c40 <__ultoa_invert>:
    1c40:	fa 01       	movw	r30, r20
    1c42:	aa 27       	eor	r26, r26
    1c44:	28 30       	cpi	r18, 0x08	; 8
    1c46:	51 f1       	breq	.+84     	; 0x1c9c <__ultoa_invert+0x5c>
    1c48:	20 31       	cpi	r18, 0x10	; 16
    1c4a:	81 f1       	breq	.+96     	; 0x1cac <__ultoa_invert+0x6c>
    1c4c:	e8 94       	clt
    1c4e:	6f 93       	push	r22
    1c50:	6e 7f       	andi	r22, 0xFE	; 254
    1c52:	6e 5f       	subi	r22, 0xFE	; 254
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	8f 4f       	sbci	r24, 0xFF	; 255
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	af 4f       	sbci	r26, 0xFF	; 255
    1c5c:	b1 e0       	ldi	r27, 0x01	; 1
    1c5e:	3e d0       	rcall	.+124    	; 0x1cdc <__ultoa_invert+0x9c>
    1c60:	b4 e0       	ldi	r27, 0x04	; 4
    1c62:	3c d0       	rcall	.+120    	; 0x1cdc <__ultoa_invert+0x9c>
    1c64:	67 0f       	add	r22, r23
    1c66:	78 1f       	adc	r23, r24
    1c68:	89 1f       	adc	r24, r25
    1c6a:	9a 1f       	adc	r25, r26
    1c6c:	a1 1d       	adc	r26, r1
    1c6e:	68 0f       	add	r22, r24
    1c70:	79 1f       	adc	r23, r25
    1c72:	8a 1f       	adc	r24, r26
    1c74:	91 1d       	adc	r25, r1
    1c76:	a1 1d       	adc	r26, r1
    1c78:	6a 0f       	add	r22, r26
    1c7a:	71 1d       	adc	r23, r1
    1c7c:	81 1d       	adc	r24, r1
    1c7e:	91 1d       	adc	r25, r1
    1c80:	a1 1d       	adc	r26, r1
    1c82:	20 d0       	rcall	.+64     	; 0x1cc4 <__ultoa_invert+0x84>
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <__ultoa_invert+0x48>
    1c86:	68 94       	set
    1c88:	3f 91       	pop	r19
    1c8a:	2a e0       	ldi	r18, 0x0A	; 10
    1c8c:	26 9f       	mul	r18, r22
    1c8e:	11 24       	eor	r1, r1
    1c90:	30 19       	sub	r19, r0
    1c92:	30 5d       	subi	r19, 0xD0	; 208
    1c94:	31 93       	st	Z+, r19
    1c96:	de f6       	brtc	.-74     	; 0x1c4e <__ultoa_invert+0xe>
    1c98:	cf 01       	movw	r24, r30
    1c9a:	08 95       	ret
    1c9c:	46 2f       	mov	r20, r22
    1c9e:	47 70       	andi	r20, 0x07	; 7
    1ca0:	40 5d       	subi	r20, 0xD0	; 208
    1ca2:	41 93       	st	Z+, r20
    1ca4:	b3 e0       	ldi	r27, 0x03	; 3
    1ca6:	0f d0       	rcall	.+30     	; 0x1cc6 <__ultoa_invert+0x86>
    1ca8:	c9 f7       	brne	.-14     	; 0x1c9c <__ultoa_invert+0x5c>
    1caa:	f6 cf       	rjmp	.-20     	; 0x1c98 <__ultoa_invert+0x58>
    1cac:	46 2f       	mov	r20, r22
    1cae:	4f 70       	andi	r20, 0x0F	; 15
    1cb0:	40 5d       	subi	r20, 0xD0	; 208
    1cb2:	4a 33       	cpi	r20, 0x3A	; 58
    1cb4:	18 f0       	brcs	.+6      	; 0x1cbc <__ultoa_invert+0x7c>
    1cb6:	49 5d       	subi	r20, 0xD9	; 217
    1cb8:	31 fd       	sbrc	r19, 1
    1cba:	40 52       	subi	r20, 0x20	; 32
    1cbc:	41 93       	st	Z+, r20
    1cbe:	02 d0       	rcall	.+4      	; 0x1cc4 <__ultoa_invert+0x84>
    1cc0:	a9 f7       	brne	.-22     	; 0x1cac <__ultoa_invert+0x6c>
    1cc2:	ea cf       	rjmp	.-44     	; 0x1c98 <__ultoa_invert+0x58>
    1cc4:	b4 e0       	ldi	r27, 0x04	; 4
    1cc6:	a6 95       	lsr	r26
    1cc8:	97 95       	ror	r25
    1cca:	87 95       	ror	r24
    1ccc:	77 95       	ror	r23
    1cce:	67 95       	ror	r22
    1cd0:	ba 95       	dec	r27
    1cd2:	c9 f7       	brne	.-14     	; 0x1cc6 <__ultoa_invert+0x86>
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	61 05       	cpc	r22, r1
    1cd8:	71 05       	cpc	r23, r1
    1cda:	08 95       	ret
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	0a 2e       	mov	r0, r26
    1ce2:	06 94       	lsr	r0
    1ce4:	57 95       	ror	r21
    1ce6:	47 95       	ror	r20
    1ce8:	37 95       	ror	r19
    1cea:	27 95       	ror	r18
    1cec:	ba 95       	dec	r27
    1cee:	c9 f7       	brne	.-14     	; 0x1ce2 <__ultoa_invert+0xa2>
    1cf0:	62 0f       	add	r22, r18
    1cf2:	73 1f       	adc	r23, r19
    1cf4:	84 1f       	adc	r24, r20
    1cf6:	95 1f       	adc	r25, r21
    1cf8:	a0 1d       	adc	r26, r0
    1cfa:	08 95       	ret

00001cfc <__prologue_saves__>:
    1cfc:	2f 92       	push	r2
    1cfe:	3f 92       	push	r3
    1d00:	4f 92       	push	r4
    1d02:	5f 92       	push	r5
    1d04:	6f 92       	push	r6
    1d06:	7f 92       	push	r7
    1d08:	8f 92       	push	r8
    1d0a:	9f 92       	push	r9
    1d0c:	af 92       	push	r10
    1d0e:	bf 92       	push	r11
    1d10:	cf 92       	push	r12
    1d12:	df 92       	push	r13
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	ca 1b       	sub	r28, r26
    1d26:	db 0b       	sbc	r29, r27
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	09 94       	ijmp

00001d34 <__epilogue_restores__>:
    1d34:	2a 88       	ldd	r2, Y+18	; 0x12
    1d36:	39 88       	ldd	r3, Y+17	; 0x11
    1d38:	48 88       	ldd	r4, Y+16	; 0x10
    1d3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d40:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d42:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d44:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d46:	b9 84       	ldd	r11, Y+9	; 0x09
    1d48:	c8 84       	ldd	r12, Y+8	; 0x08
    1d4a:	df 80       	ldd	r13, Y+7	; 0x07
    1d4c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d4e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d50:	0c 81       	ldd	r16, Y+4	; 0x04
    1d52:	1b 81       	ldd	r17, Y+3	; 0x03
    1d54:	aa 81       	ldd	r26, Y+2	; 0x02
    1d56:	b9 81       	ldd	r27, Y+1	; 0x01
    1d58:	ce 0f       	add	r28, r30
    1d5a:	d1 1d       	adc	r29, r1
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	ed 01       	movw	r28, r26
    1d68:	08 95       	ret

00001d6a <_exit>:
    1d6a:	f8 94       	cli

00001d6c <__stop_program>:
    1d6c:	ff cf       	rjmp	.-2      	; 0x1d6c <__stop_program>
